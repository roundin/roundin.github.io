/*! For license information please see main.bundle.js.LICENSE.txt */
(()=>{var e,t,n={5318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.default=e.exports,e.exports.__esModule=!0},2318:(e,t,n)=>{"use strict";n.d(t,{Z:()=>f});var r=n(7462),o=n(5987),i=n(7294),a=(n(5697),n(6010)),l=n(4670),u=n(3871),s={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",subtitle1:"h6",subtitle2:"h6",body1:"p",body2:"p"},c=i.forwardRef((function(e,t){var n=e.align,l=void 0===n?"inherit":n,c=e.classes,f=e.className,d=e.color,p=void 0===d?"initial":d,h=e.component,m=e.display,v=void 0===m?"initial":m,y=e.gutterBottom,g=void 0!==y&&y,b=e.noWrap,w=void 0!==b&&b,k=e.paragraph,x=void 0!==k&&k,E=e.variant,S=void 0===E?"body1":E,C=e.variantMapping,R=void 0===C?s:C,P=(0,o.Z)(e,["align","classes","className","color","component","display","gutterBottom","noWrap","paragraph","variant","variantMapping"]),O=h||(x?"p":R[S]||s[S])||"span";return i.createElement(O,(0,r.Z)({className:(0,a.Z)(c.root,f,"inherit"!==S&&c[S],"initial"!==p&&c["color".concat((0,u.Z)(p))],w&&c.noWrap,g&&c.gutterBottom,x&&c.paragraph,"inherit"!==l&&c["align".concat((0,u.Z)(l))],"initial"!==v&&c["display".concat((0,u.Z)(v))]),ref:t},P))}));const f=(0,l.Z)((function(e){return{root:{margin:0},body2:e.typography.body2,body1:e.typography.body1,caption:e.typography.caption,button:e.typography.button,h1:e.typography.h1,h2:e.typography.h2,h3:e.typography.h3,h4:e.typography.h4,h5:e.typography.h5,h6:e.typography.h6,subtitle1:e.typography.subtitle1,subtitle2:e.typography.subtitle2,overline:e.typography.overline,srOnly:{position:"absolute",height:1,width:1,overflow:"hidden"},alignLeft:{textAlign:"left"},alignCenter:{textAlign:"center"},alignRight:{textAlign:"right"},alignJustify:{textAlign:"justify"},noWrap:{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},gutterBottom:{marginBottom:"0.35em"},paragraph:{marginBottom:16},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorTextPrimary:{color:e.palette.text.primary},colorTextSecondary:{color:e.palette.text.secondary},colorError:{color:e.palette.error.main},displayInline:{display:"inline"},displayBlock:{display:"block"}}}),{name:"MuiTypography"})(c)},9693:(e,t,n)=>{"use strict";n.d(t,{mi:()=>l,Fq:()=>s,_j:()=>c,$n:()=>f});var r=n(288);function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return Math.min(Math.max(t,e),n)}function i(e){if(e.type)return e;if("#"===e.charAt(0))return i(function(e){e=e.substr(1);var t=new RegExp(".{1,".concat(e.length>=6?2:1,"}"),"g"),n=e.match(t);return n&&1===n[0].length&&(n=n.map((function(e){return e+e}))),n?"rgb".concat(4===n.length?"a":"","(").concat(n.map((function(e,t){return t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3})).join(", "),")"):""}(e));var t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla"].indexOf(n))throw new Error((0,r.Z)(3,e));var o=e.substring(t+1,e.length-1).split(",");return{type:n,values:o=o.map((function(e){return parseFloat(e)}))}}function a(e){var t=e.type,n=e.values;return-1!==t.indexOf("rgb")?n=n.map((function(e,t){return t<3?parseInt(e,10):e})):-1!==t.indexOf("hsl")&&(n[1]="".concat(n[1],"%"),n[2]="".concat(n[2],"%")),"".concat(t,"(").concat(n.join(", "),")")}function l(e,t){var n=u(e),r=u(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}function u(e){var t="hsl"===(e=i(e)).type?i(function(e){var t=(e=i(e)).values,n=t[0],r=t[1]/100,o=t[2]/100,l=r*Math.min(o,1-o),u=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:(e+n/30)%12;return o-l*Math.max(Math.min(t-3,9-t,1),-1)},s="rgb",c=[Math.round(255*u(0)),Math.round(255*u(8)),Math.round(255*u(4))];return"hsla"===e.type&&(s+="a",c.push(t[3])),a({type:s,values:c})}(e)).values:e.values;return t=t.map((function(e){return(e/=255)<=.03928?e/12.92:Math.pow((e+.055)/1.055,2.4)})),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function s(e,t){return e=i(e),t=o(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),e.values[3]=t,a(e)}function c(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]*=1-t;return a(e)}function f(e,t){if(e=i(e),t=o(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(var n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;return a(e)}},2920:(e,t,n)=>{"use strict";n.d(t,{Z:()=>X});var r=n(5987),o=n(5953),i=n(7462),a=["xs","sm","md","lg","xl"];function l(e){var t=e.values,n=void 0===t?{xs:0,sm:600,md:960,lg:1280,xl:1920}:t,o=e.unit,l=void 0===o?"px":o,u=e.step,s=void 0===u?5:u,c=(0,r.Z)(e,["values","unit","step"]);function f(e){var t="number"==typeof n[e]?n[e]:e;return"@media (min-width:".concat(t).concat(l,")")}function d(e,t){var r=a.indexOf(t);return r===a.length-1?f(e):"@media (min-width:".concat("number"==typeof n[e]?n[e]:e).concat(l,") and ")+"(max-width:".concat((-1!==r&&"number"==typeof n[a[r+1]]?n[a[r+1]]:t)-s/100).concat(l,")")}return(0,i.Z)({keys:a,values:n,up:f,down:function(e){var t=a.indexOf(e)+1,r=n[a[t]];return t===a.length?f("xs"):"@media (max-width:".concat(("number"==typeof r&&t>0?r:e)-s/100).concat(l,")")},between:d,only:function(e){return d(e,e)},width:function(e){return n[e]}},c)}var u=n(4942);function s(e,t,n){var r;return(0,i.Z)({gutters:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,i.Z)({paddingLeft:t(2),paddingRight:t(2)},n,(0,u.Z)({},e.up("sm"),(0,i.Z)({paddingLeft:t(3),paddingRight:t(3)},n[e.up("sm")])))},toolbar:(r={minHeight:56},(0,u.Z)(r,"".concat(e.up("xs")," and (orientation: landscape)"),{minHeight:48}),(0,u.Z)(r,e.up("sm"),{minHeight:64}),r)},n)}var c=n(288);const f={black:"#000",white:"#fff"};const d={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#d5d5d5",A200:"#aaaaaa",A400:"#303030",A700:"#616161"};const p={50:"#e8eaf6",100:"#c5cae9",200:"#9fa8da",300:"#7986cb",400:"#5c6bc0",500:"#3f51b5",600:"#3949ab",700:"#303f9f",800:"#283593",900:"#1a237e",A100:"#8c9eff",A200:"#536dfe",A400:"#3d5afe",A700:"#304ffe"};const h={50:"#fce4ec",100:"#f8bbd0",200:"#f48fb1",300:"#f06292",400:"#ec407a",500:"#e91e63",600:"#d81b60",700:"#c2185b",800:"#ad1457",900:"#880e4f",A100:"#ff80ab",A200:"#ff4081",A400:"#f50057",A700:"#c51162"};const m={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"};const v={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"};const y={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"};const g={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"};var b=n(9693),w={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.54)",disabled:"rgba(0, 0, 0, 0.38)",hint:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:f.white,default:d[50]},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},k={text:{primary:f.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",hint:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:d[800],default:"#303030"},action:{active:f.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function x(e,t,n,r){var o=r.light||r,i=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=(0,b.$n)(e.main,o):"dark"===t&&(e.dark=(0,b._j)(e.main,i)))}function E(e){var t=e.primary,n=void 0===t?{light:p[300],main:p[500],dark:p[700]}:t,a=e.secondary,l=void 0===a?{light:h.A200,main:h.A400,dark:h.A700}:a,u=e.error,s=void 0===u?{light:m[300],main:m[500],dark:m[700]}:u,E=e.warning,S=void 0===E?{light:v[300],main:v[500],dark:v[700]}:E,C=e.info,R=void 0===C?{light:y[300],main:y[500],dark:y[700]}:C,P=e.success,O=void 0===P?{light:g[300],main:g[500],dark:g[700]}:P,T=e.type,_=void 0===T?"light":T,N=e.contrastThreshold,A=void 0===N?3:N,M=e.tonalOffset,Z=void 0===M?.2:M,L=(0,r.Z)(e,["primary","secondary","error","warning","info","success","type","contrastThreshold","tonalOffset"]);function z(e){return(0,b.mi)(e,k.text.primary)>=A?k.text.primary:w.text.primary}var I=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:500,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:700;if(!(e=(0,i.Z)({},e)).main&&e[t]&&(e.main=e[t]),!e.main)throw new Error((0,c.Z)(4,t));if("string"!=typeof e.main)throw new Error((0,c.Z)(5,JSON.stringify(e.main)));return x(e,"light",n,Z),x(e,"dark",r,Z),e.contrastText||(e.contrastText=z(e.main)),e},D={dark:k,light:w};return(0,o.Z)((0,i.Z)({common:f,type:_,primary:I(n),secondary:I(l,"A400","A200","A700"),error:I(s),warning:I(S),info:I(R),success:I(O),grey:d,contrastThreshold:A,getContrastText:z,augmentColor:I,tonalOffset:Z},D[_]),L)}function S(e){return Math.round(1e5*e)/1e5}function C(e){return S(e)}var R={textTransform:"uppercase"},P='"Roboto", "Helvetica", "Arial", sans-serif';function O(e,t){var n="function"==typeof t?t(e):t,a=n.fontFamily,l=void 0===a?P:a,u=n.fontSize,s=void 0===u?14:u,c=n.fontWeightLight,f=void 0===c?300:c,d=n.fontWeightRegular,p=void 0===d?400:d,h=n.fontWeightMedium,m=void 0===h?500:h,v=n.fontWeightBold,y=void 0===v?700:v,g=n.htmlFontSize,b=void 0===g?16:g,w=n.allVariants,k=n.pxToRem,x=(0,r.Z)(n,["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"]);var E=s/14,O=k||function(e){return"".concat(e/b*E,"rem")},T=function(e,t,n,r,o){return(0,i.Z)({fontFamily:l,fontWeight:e,fontSize:O(t),lineHeight:n},l===P?{letterSpacing:"".concat(S(r/t),"em")}:{},o,w)},_={h1:T(f,96,1.167,-1.5),h2:T(f,60,1.2,-.5),h3:T(p,48,1.167,0),h4:T(p,34,1.235,.25),h5:T(p,24,1.334,0),h6:T(m,20,1.6,.15),subtitle1:T(p,16,1.75,.15),subtitle2:T(m,14,1.57,.1),body1:T(p,16,1.5,.15),body2:T(p,14,1.43,.15),button:T(m,14,1.75,.4,R),caption:T(p,12,1.66,.4),overline:T(p,12,2.66,1,R)};return(0,o.Z)((0,i.Z)({htmlFontSize:b,pxToRem:O,round:C,fontFamily:l,fontSize:s,fontWeightLight:f,fontWeightRegular:p,fontWeightMedium:m,fontWeightBold:y},_),x,{clone:!1})}function T(){return["".concat(arguments.length<=0?void 0:arguments[0],"px ").concat(arguments.length<=1?void 0:arguments[1],"px ").concat(arguments.length<=2?void 0:arguments[2],"px ").concat(arguments.length<=3?void 0:arguments[3],"px rgba(0,0,0,").concat(.2,")"),"".concat(arguments.length<=4?void 0:arguments[4],"px ").concat(arguments.length<=5?void 0:arguments[5],"px ").concat(arguments.length<=6?void 0:arguments[6],"px ").concat(arguments.length<=7?void 0:arguments[7],"px rgba(0,0,0,").concat(.14,")"),"".concat(arguments.length<=8?void 0:arguments[8],"px ").concat(arguments.length<=9?void 0:arguments[9],"px ").concat(arguments.length<=10?void 0:arguments[10],"px ").concat(arguments.length<=11?void 0:arguments[11],"px rgba(0,0,0,").concat(.12,")")].join(",")}const _=["none",T(0,2,1,-1,0,1,1,0,0,1,3,0),T(0,3,1,-2,0,2,2,0,0,1,5,0),T(0,3,3,-2,0,3,4,0,0,1,8,0),T(0,2,4,-1,0,4,5,0,0,1,10,0),T(0,3,5,-1,0,5,8,0,0,1,14,0),T(0,3,5,-1,0,6,10,0,0,1,18,0),T(0,4,5,-2,0,7,10,1,0,2,16,1),T(0,5,5,-3,0,8,10,1,0,3,14,2),T(0,5,6,-3,0,9,12,1,0,3,16,2),T(0,6,6,-3,0,10,14,1,0,4,18,3),T(0,6,7,-4,0,11,15,1,0,4,20,3),T(0,7,8,-4,0,12,17,2,0,5,22,4),T(0,7,8,-4,0,13,19,2,0,5,24,4),T(0,7,9,-4,0,14,21,2,0,5,26,4),T(0,8,9,-5,0,15,22,2,0,6,28,5),T(0,8,10,-5,0,16,24,2,0,6,30,5),T(0,8,11,-5,0,17,26,2,0,6,32,5),T(0,9,11,-5,0,18,28,2,0,7,34,6),T(0,9,12,-6,0,19,29,2,0,7,36,6),T(0,10,13,-6,0,20,31,3,0,8,38,7),T(0,10,13,-6,0,21,33,3,0,8,40,7),T(0,10,14,-6,0,22,35,3,0,8,42,7),T(0,11,14,-7,0,23,36,3,0,9,44,8),T(0,11,15,-7,0,24,38,3,0,9,46,8)];const N={borderRadius:4};var A=n(885),M=n(1002),Z=(n(5697),{xs:0,sm:600,md:960,lg:1280,xl:1920}),L={keys:["xs","sm","md","lg","xl"],up:function(e){return"@media (min-width:".concat(Z[e],"px)")}};const z=function(e,t){return t?(0,o.Z)(e,t,{clone:!1}):e};var I,D,j={m:"margin",p:"padding"},F={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},B={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},U=(I=function(e){if(e.length>2){if(!B[e])return[e];e=B[e]}var t=e.split(""),n=(0,A.Z)(t,2),r=n[0],o=n[1],i=j[r],a=F[o]||"";return Array.isArray(a)?a.map((function(e){return i+e})):[i+a]},D={},function(e){return void 0===D[e]&&(D[e]=I(e)),D[e]}),$=["m","mt","mr","mb","ml","mx","my","p","pt","pr","pb","pl","px","py","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY"];function V(e){var t=e.spacing||8;return"number"==typeof t?function(e){return t*e}:Array.isArray(t)?function(e){return t[e]}:"function"==typeof t?t:function(){}}function W(e,t){return function(n){return e.reduce((function(e,r){return e[r]=function(e,t){if("string"==typeof t||null==t)return t;var n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:"-".concat(n)}(t,n),e}),{})}}function H(e){var t=V(e.theme);return Object.keys(e).map((function(n){if(-1===$.indexOf(n))return null;var r=W(U(n),t),o=e[n];return function(e,t,n){if(Array.isArray(t)){var r=e.theme.breakpoints||L;return t.reduce((function(e,o,i){return e[r.up(r.keys[i])]=n(t[i]),e}),{})}if("object"===(0,M.Z)(t)){var o=e.theme.breakpoints||L;return Object.keys(t).reduce((function(e,r){return e[o.up(r)]=n(t[r]),e}),{})}return n(t)}(e,o,r)})).reduce(z,{})}H.propTypes={},H.filterProps=$;function K(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:8;if(e.mui)return e;var t=V({spacing:e}),n=function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return 0===n.length?t(1):1===n.length?t(n[0]):n.map((function(e){if("string"==typeof e)return e;var n=t(e);return"number"==typeof n?"".concat(n,"px"):n})).join(" ")};return Object.defineProperty(n,"unit",{get:function(){return e}}),n.mui=!0,n}var q=n(3291),Q=n(2781);function Y(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.breakpoints,n=void 0===t?{}:t,i=e.mixins,a=void 0===i?{}:i,u=e.palette,c=void 0===u?{}:u,f=e.spacing,d=e.typography,p=void 0===d?{}:d,h=(0,r.Z)(e,["breakpoints","mixins","palette","spacing","typography"]),m=E(c),v=l(n),y=K(f),g=(0,o.Z)({breakpoints:v,direction:"ltr",mixins:s(v,y,a),overrides:{},palette:m,props:{},shadows:_,typography:O(m,p),spacing:y,shape:N,transitions:q.ZP,zIndex:Q.Z},h),b=arguments.length,w=new Array(b>1?b-1:0),k=1;k<b;k++)w[k-1]=arguments[k];return g=w.reduce((function(e,t){return(0,o.Z)(e,t)}),g)}const X=Y},9700:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=(0,n(2920).Z)()},1120:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7462),o=n(1890),i=n(9700);const a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,o.Z)(e,(0,r.Z)({defaultTheme:i.Z},t))}},3291:(e,t,n)=>{"use strict";n.d(t,{x9:()=>i,ZP:()=>l});var r=n(5987),o={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},i={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function a(e){return"".concat(Math.round(e),"ms")}const l={easing:o,duration:i,create:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["all"],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.duration,l=void 0===n?i.standard:n,u=t.easing,s=void 0===u?o.easeInOut:u,c=t.delay,f=void 0===c?0:c;(0,r.Z)(t,["duration","easing","delay"]);return(Array.isArray(e)?e:[e]).map((function(e){return"".concat(e," ").concat("string"==typeof l?l:a(l)," ").concat(s," ").concat("string"==typeof f?f:a(f))})).join(",")},getAutoHeightDuration:function(e){if(!e)return 0;var t=e/36;return Math.round(10*(4+15*Math.pow(t,.25)+t/5))}}},4670:(e,t,n)=>{"use strict";n.d(t,{Z:()=>p});var r=n(7462),o=n(5987),i=n(7294),a=(n(5697),n(8679)),l=n.n(a),u=n(1890),s=n(3869),c=n(159);const f=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){var a=t.defaultTheme,f=t.withTheme,d=void 0!==f&&f,p=t.name,h=(0,o.Z)(t,["defaultTheme","withTheme","name"]);var m=p,v=(0,u.Z)(e,(0,r.Z)({defaultTheme:a,Component:n,name:p||n.displayName,classNamePrefix:m},h)),y=i.forwardRef((function(e,t){e.classes;var l,u=e.innerRef,f=(0,o.Z)(e,["classes","innerRef"]),h=v((0,r.Z)({},n.defaultProps,e)),m=f;return("string"==typeof p||d)&&(l=(0,c.Z)()||a,p&&(m=(0,s.Z)({theme:l,name:p,props:f})),d&&!m.theme&&(m.theme=l)),i.createElement(n,(0,r.Z)({ref:u||t,classes:h},m))}));return l()(y,n),y}};var d=n(9700);const p=function(e,t){return f(e,(0,r.Z)({defaultTheme:d.Z},t))}},2781:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r={mobileStepper:1e3,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500}},3871:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(288);function o(e){if("string"!=typeof e)throw new Error((0,r.Z)(7));return e.charAt(0).toUpperCase()+e.slice(1)}},2568:(e,t,n)=>{"use strict";function r(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.reduce((function(e,t){return null==t?e:function(){for(var n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];e.apply(this,r),t.apply(this,r)}}),(function(){}))}n.d(t,{Z:()=>r})},9437:(e,t,n)=>{"use strict";function r(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:166;function r(){for(var r=arguments.length,o=new Array(r),i=0;i<r;i++)o[i]=arguments[i];var a=this,l=function(){e.apply(a,o)};clearTimeout(t),t=setTimeout(l,n)}return r.clear=function(){clearTimeout(t)},r}n.d(t,{Z:()=>r})},5743:(e,t,n)=>{"use strict";n.r(t),n.d(t,{capitalize:()=>r.Z,createChainedFunction:()=>o.Z,createSvgIcon:()=>d,debounce:()=>p.Z,deprecatedPropType:()=>h,isMuiElement:()=>m,ownerDocument:()=>v.Z,ownerWindow:()=>y.Z,requirePropFactory:()=>g,setRef:()=>b.Z,unstable_useId:()=>S,unsupportedProp:()=>w,useControlled:()=>k,useEventCallback:()=>x.Z,useForkRef:()=>E.Z,useIsFocusVisible:()=>C.Z});var r=n(3871),o=n(2568),i=n(7462),a=n(7294),l=n(5987),u=(n(5697),n(6010)),s=n(4670),c=a.forwardRef((function(e,t){var n=e.children,o=e.classes,s=e.className,c=e.color,f=void 0===c?"inherit":c,d=e.component,p=void 0===d?"svg":d,h=e.fontSize,m=void 0===h?"medium":h,v=e.htmlColor,y=e.titleAccess,g=e.viewBox,b=void 0===g?"0 0 24 24":g,w=(0,l.Z)(e,["children","classes","className","color","component","fontSize","htmlColor","titleAccess","viewBox"]);return a.createElement(p,(0,i.Z)({className:(0,u.Z)(o.root,s,"inherit"!==f&&o["color".concat((0,r.Z)(f))],"default"!==m&&"medium"!==m&&o["fontSize".concat((0,r.Z)(m))]),focusable:"false",viewBox:b,color:v,"aria-hidden":!y||void 0,role:y?"img":void 0,ref:t},w),n,y?a.createElement("title",null,y):null)}));c.muiName="SvgIcon";const f=(0,s.Z)((function(e){return{root:{userSelect:"none",width:"1em",height:"1em",display:"inline-block",fill:"currentColor",flexShrink:0,fontSize:e.typography.pxToRem(24),transition:e.transitions.create("fill",{duration:e.transitions.duration.shorter})},colorPrimary:{color:e.palette.primary.main},colorSecondary:{color:e.palette.secondary.main},colorAction:{color:e.palette.action.active},colorError:{color:e.palette.error.main},colorDisabled:{color:e.palette.action.disabled},fontSizeInherit:{fontSize:"inherit"},fontSizeSmall:{fontSize:e.typography.pxToRem(20)},fontSizeLarge:{fontSize:e.typography.pxToRem(35)}}}),{name:"MuiSvgIcon"})(c);function d(e,t){var n=function(t,n){return a.createElement(f,(0,i.Z)({ref:n},t),e)};return n.muiName=f.muiName,a.memo(a.forwardRef(n))}var p=n(9437);function h(e,t){return function(){return null}}function m(e,t){return a.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}var v=n(626),y=n(713);function g(e){return function(){return null}}var b=n(4236);function w(e,t,n,r,o){return null}function k(e){var t=e.controlled,n=e.default,r=(e.name,e.state,a.useRef(void 0!==t).current),o=a.useState(n),i=o[0],l=o[1];return[r?t:i,a.useCallback((function(e){r||l(e)}),[])]}var x=n(5192),E=n(3834);function S(e){var t=a.useState(e),n=t[0],r=t[1],o=e||n;return a.useEffect((function(){null==n&&r("mui-".concat(Math.round(1e5*Math.random())))}),[n]),o}var C=n(4896)},626:(e,t,n)=>{"use strict";function r(e){return e&&e.ownerDocument||document}n.d(t,{Z:()=>r})},713:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(626);function o(e){return(0,r.Z)(e).defaultView||window}},4236:(e,t,n)=>{"use strict";function r(e,t){"function"==typeof e?e(t):e&&(e.current=t)}n.d(t,{Z:()=>r})},5192:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o="undefined"!=typeof window?r.useLayoutEffect:r.useEffect;function i(e){var t=r.useRef(e);return o((function(){t.current=e})),r.useCallback((function(){return t.current.apply(void 0,arguments)}),[])}},3834:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o=n(4236);function i(e,t){return r.useMemo((function(){return null==e&&null==t?null:function(n){(0,o.Z)(e,n),(0,o.Z)(t,n)}}),[e,t])}},4896:(e,t,n)=>{"use strict";n.d(t,{Z:()=>h});var r=n(7294),o=n(3935),i=!0,a=!1,l=null,u={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function s(e){e.metaKey||e.altKey||e.ctrlKey||(i=!0)}function c(){i=!1}function f(){"hidden"===this.visibilityState&&a&&(i=!0)}function d(e){var t,n,r,o=e.target;try{return o.matches(":focus-visible")}catch(e){}return i||(n=(t=o).type,!("INPUT"!==(r=t.tagName)||!u[n]||t.readOnly)||"TEXTAREA"===r&&!t.readOnly||!!t.isContentEditable)}function p(){a=!0,window.clearTimeout(l),l=window.setTimeout((function(){a=!1}),100)}function h(){return{isFocusVisible:d,onBlurVisible:p,ref:r.useCallback((function(e){var t,n=o.findDOMNode(e);null!=n&&((t=n.ownerDocument).addEventListener("keydown",s,!0),t.addEventListener("mousedown",c,!0),t.addEventListener("pointerdown",c,!0),t.addEventListener("touchstart",c,!0),t.addEventListener("visibilitychange",f,!0))}),[])}}},8884:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(2108)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"}),"Menu");t.Z=a},8825:(e,t,n)=>{"use strict";var r=n(5318);t.Z=void 0;var o=r(n(2108)),i=n(5893),a=(0,o.default)((0,i.jsx)("path",{d:"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"}),"Notifications");t.Z=a},2108:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"default",{enumerable:!0,get:function(){return r.createSvgIcon}});var r=n(5743)},7076:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="function"==typeof Symbol&&Symbol.for?Symbol.for("mui.nested"):"__THEME_NESTED__"},3869:(e,t,n)=>{"use strict";function r(e){var t=e.theme,n=e.name,r=e.props;if(!t||!t.props||!t.props[n])return r;var o,i=t.props[n];for(o in i)void 0===r[o]&&(r[o]=i[o]);return r}n.d(t,{Z:()=>r})},1890:(e,t,n)=>{"use strict";n.d(t,{Z:()=>pn});var r=n(5987),o=n(7462),i=n(7294),a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};const l="object"===("undefined"==typeof window?"undefined":a(window))&&"object"===("undefined"==typeof document?"undefined":a(document))&&9===document.nodeType;var u=n(3144),s=n(1721);function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var f=n(3366),d={}.constructor;function p(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(p);if(e.constructor!==d)return e;var t={};for(var n in e)t[n]=p(e[n]);return t}function h(e,t,n){void 0===e&&(e="unnamed");var r=n.jss,o=p(t),i=r.plugins.onCreateRule(e,o,n);return i||(e[0],null)}var m=function(e,t){for(var n="",r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=t),n+=e[r];return n},v=function(e,t){if(void 0===t&&(t=!1),!Array.isArray(e))return e;var n="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)n&&(n+=", "),n+=m(e[r]," ");else n=m(e,", ");return t||"!important"!==e[e.length-1]||(n+=" !important"),n};function y(e,t){for(var n="",r=0;r<t;r++)n+="  ";return n+e}function g(e,t,n){void 0===n&&(n={});var r="";if(!t)return r;var o=n.indent,i=void 0===o?0:o,a=t.fallbacks;if(e&&i++,a)if(Array.isArray(a))for(var l=0;l<a.length;l++){var u=a[l];for(var s in u){var c=u[s];null!=c&&(r&&(r+="\n"),r+=y(s+": "+v(c)+";",i))}}else for(var f in a){var d=a[f];null!=d&&(r&&(r+="\n"),r+=y(f+": "+v(d)+";",i))}for(var p in t){var h=t[p];null!=h&&"fallbacks"!==p&&(r&&(r+="\n"),r+=y(p+": "+v(h)+";",i))}return(r||n.allowEmpty)&&e?(r&&(r="\n"+r+"\n"),y(e+" {"+r,--i)+y("}",i)):r}var b=/([[\].#*$><+~=|^:(),"'`\s])/g,w="undefined"!=typeof CSS&&CSS.escape,k=function(e){return w?w(e):e.replace(b,"\\$1")},x=function(){function e(e,t,n){this.type="style",this.key=void 0,this.isProcessed=!1,this.style=void 0,this.renderer=void 0,this.renderable=void 0,this.options=void 0;var r=n.sheet,o=n.Renderer;this.key=e,this.options=n,this.style=t,r?this.renderer=r.renderer:o&&(this.renderer=new o)}return e.prototype.prop=function(e,t,n){if(void 0===t)return this.style[e];var r=!!n&&n.force;if(!r&&this.style[e]===t)return this;var o=t;n&&!1===n.process||(o=this.options.jss.plugins.onChangeValue(t,e,this));var i=null==o||!1===o,a=e in this.style;if(i&&!a&&!r)return this;var l=i&&a;if(l?delete this.style[e]:this.style[e]=o,this.renderable&&this.renderer)return l?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,o),this;var u=this.options.sheet;return u&&u.attached,this},e}(),E=function(e){function t(t,n,r){var o;(o=e.call(this,t,n,r)||this).selectorText=void 0,o.id=void 0,o.renderable=void 0;var i=r.selector,a=r.scoped,l=r.sheet,u=r.generateId;return i?o.selectorText=i:!1!==a&&(o.id=u(c(c(o)),l),o.selectorText="."+k(o.id)),o}(0,s.Z)(t,e);var n=t.prototype;return n.applyTo=function(e){var t=this.renderer;if(t){var n=this.toJSON();for(var r in n)t.setProperty(e,r,n[r])}return this},n.toJSON=function(){var e={};for(var t in this.style){var n=this.style[t];"object"!=typeof n?e[t]=n:Array.isArray(n)&&(e[t]=v(n))}return e},n.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?(0,o.Z)({},e,{allowEmpty:!0}):e;return g(this.selectorText,this.style,n)},(0,u.Z)(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,n=this.renderable;if(n&&t)t.setSelector(n,e)||t.replaceRule(n,this)}},get:function(){return this.selectorText}}]),t}(x),S={onCreateRule:function(e,t,n){return"@"===e[0]||n.parent&&"keyframes"===n.parent.type?null:new E(e,t,n)}},C={indent:1,children:!0},R=/@([\w-]+)/,P=function(){function e(e,t,n){this.type="conditional",this.at=void 0,this.key=void 0,this.query=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e;var r=e.match(R);for(var i in this.at=r?r[1]:"unknown",this.query=n.name||"@"+this.at,this.options=n,this.rules=new Y((0,o.Z)({},n,{parent:this})),t)this.rules.add(i,t[i]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r?(this.options.jss.plugins.onProcessRule(r),r):null},t.toString=function(e){if(void 0===e&&(e=C),null==e.indent&&(e.indent=C.indent),null==e.children&&(e.children=C.children),!1===e.children)return this.query+" {}";var t=this.rules.toString(e);return t?this.query+" {\n"+t+"\n}":""},e}(),O=/@media|@supports\s+/,T={onCreateRule:function(e,t,n){return O.test(e)?new P(e,t,n):null}},_={indent:1,children:!0},N=/@keyframes\s+([\w-]+)/,A=function(){function e(e,t,n){this.type="keyframes",this.at="@keyframes",this.key=void 0,this.name=void 0,this.id=void 0,this.rules=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0;var r=e.match(N);r&&r[1]?this.name=r[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=n;var i=n.scoped,a=n.sheet,l=n.generateId;for(var u in this.id=!1===i?this.name:k(l(this,a)),this.rules=new Y((0,o.Z)({},n,{parent:this})),t)this.rules.add(u,t[u],(0,o.Z)({},n,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){if(void 0===e&&(e=_),null==e.indent&&(e.indent=_.indent),null==e.children&&(e.children=_.children),!1===e.children)return this.at+" "+this.id+" {}";var t=this.rules.toString(e);return t&&(t="\n"+t+"\n"),this.at+" "+this.id+" {"+t+"}"},e}(),M=/@keyframes\s+/,Z=/\$([\w-]+)/g,L=function(e,t){return"string"==typeof e?e.replace(Z,(function(e,n){return n in t?t[n]:e})):e},z=function(e,t,n){var r=e[t],o=L(r,n);o!==r&&(e[t]=o)},I={onCreateRule:function(e,t,n){return"string"==typeof e&&M.test(e)?new A(e,t,n):null},onProcessStyle:function(e,t,n){return"style"===t.type&&n?("animation-name"in e&&z(e,"animation-name",n.keyframes),"animation"in e&&z(e,"animation",n.keyframes),e):e},onChangeValue:function(e,t,n){var r=n.options.sheet;if(!r)return e;switch(t){case"animation":case"animation-name":return L(e,r.keyframes);default:return e}}},D=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(t=e.call.apply(e,[this].concat(r))||this).renderable=void 0,t}return(0,s.Z)(t,e),t.prototype.toString=function(e){var t=this.options.sheet,n=!!t&&t.options.link?(0,o.Z)({},e,{allowEmpty:!0}):e;return g(this.key,this.style,n)},t}(x),j={onCreateRule:function(e,t,n){return n.parent&&"keyframes"===n.parent.type?new D(e,t,n):null}},F=function(){function e(e,t,n){this.type="font-face",this.at="@font-face",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.style)){for(var t="",n=0;n<this.style.length;n++)t+=g(this.at,this.style[n]),this.style[n+1]&&(t+="\n");return t}return g(this.at,this.style,e)},e}(),B=/@font-face/,U={onCreateRule:function(e,t,n){return B.test(e)?new F(e,t,n):null}},$=function(){function e(e,t,n){this.type="viewport",this.at="@viewport",this.key=void 0,this.style=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.style=t,this.options=n}return e.prototype.toString=function(e){return g(this.key,this.style,e)},e}(),V={onCreateRule:function(e,t,n){return"@viewport"===e||"@-ms-viewport"===e?new $(e,t,n):null}},W=function(){function e(e,t,n){this.type="simple",this.key=void 0,this.value=void 0,this.options=void 0,this.isProcessed=!1,this.renderable=void 0,this.key=e,this.value=t,this.options=n}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",n=0;n<this.value.length;n++)t+=this.key+" "+this.value[n]+";",this.value[n+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),H={"@charset":!0,"@import":!0,"@namespace":!0},K=[S,T,I,j,U,V,{onCreateRule:function(e,t,n){return e in H?new W(e,t,n):null}}],q={process:!0},Q={force:!0,process:!0},Y=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=void 0,this.classes=void 0,this.keyframes=void 0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,n){var r=this.options,i=r.parent,a=r.sheet,l=r.jss,u=r.Renderer,s=r.generateId,c=r.scoped,f=(0,o.Z)({classes:this.classes,parent:i,sheet:a,jss:l,Renderer:u,generateId:s,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},n),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(f.selector="."+k(this.classes[d]));var p=h(d,t,f);if(!p)return null;this.register(p);var m=void 0===f.index?this.index.length:f.index;return this.index.splice(m,0,p),p},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof E?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof A&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof E?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof A&&delete this.keyframes[e.name]},t.update=function(){var e,t,n;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],n=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.map[e],t,n);else for(var r=0;r<this.index.length;r++)this.updateOne(this.index[r],t,n)},t.updateOne=function(t,n,r){void 0===r&&(r=q);var o=this.options,i=o.jss.plugins,a=o.sheet;if(t.rules instanceof e)t.rules.update(n,r);else{var l=t,u=l.style;if(i.onUpdate(n,t,a,r),r.process&&u&&u!==l.style){for(var s in i.onProcessStyle(l.style,l,a),l.style){var c=l.style[s];c!==u[s]&&l.prop(s,c,Q)}for(var f in u){var d=l.style[f],p=u[f];null==d&&d!==p&&l.prop(f,null,Q)}}}},t.toString=function(e){for(var t="",n=this.options.sheet,r=!!n&&n.options.link,o=0;o<this.index.length;o++){var i=this.index[o].toString(e);(i||r)&&(t&&(t+="\n"),t+=i)}return t},e}(),X=function(){function e(e,t){for(var n in this.options=void 0,this.deployed=void 0,this.attached=void 0,this.rules=void 0,this.renderer=void 0,this.classes=void 0,this.keyframes=void 0,this.queue=void 0,this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=(0,o.Z)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new Y(this.options),e)this.rules.add(n,e[n]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,n){var r=this.queue;this.attached&&!r&&(this.queue=[]);var o=this.rules.add(e,t,n);return o?(this.options.jss.plugins.onProcessRule(o),this.attached?this.deployed?(r?r.push(o):(this.insertRule(o),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),o):o:(this.deployed=!1,o)):null},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var n=[];for(var r in e){var o=this.addRule(r,e[r],t);o&&n.push(o)}return n},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,n){return this.rules.updateOne(e,t,n),this},t.toString=function(e){return this.rules.toString(e)},e}(),G=function(){function e(){this.plugins={internal:[],external:[]},this.registry=void 0}var t=e.prototype;return t.onCreateRule=function(e,t,n){for(var r=0;r<this.registry.onCreateRule.length;r++){var o=this.registry.onCreateRule[r](e,t,n);if(o)return o}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,n=0;n<this.registry.onProcessRule.length;n++)this.registry.onProcessRule[n](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,n){for(var r=0;r<this.registry.onProcessStyle.length;r++)t.style=this.registry.onProcessStyle[r](t.style,t,n)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,n,r){for(var o=0;o<this.registry.onUpdate.length;o++)this.registry.onUpdate[o](e,t,n,r)},t.onChangeValue=function(e,t,n){for(var r=e,o=0;o<this.registry.onChangeValue.length;o++)r=this.registry.onChangeValue[o](r,t,n);return r},t.use=function(e,t){void 0===t&&(t={queue:"external"});var n=this.plugins[t.queue];-1===n.indexOf(e)&&(n.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var n in t)n in e&&e[n].push(t[n]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),J=new(function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,n=e.options.index;if(-1===t.indexOf(e))if(0===t.length||n>=this.index)t.push(e);else for(var r=0;r<t.length;r++)if(t[r].options.index>n)return void t.splice(r,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,n=t.attached,r=(0,f.Z)(t,["attached"]),o="",i=0;i<this.registry.length;i++){var a=this.registry[i];null!=n&&a.attached!==n||(o&&(o+="\n"),o+=a.toString(r))}return o},(0,u.Z)(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}()),ee="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),te="2f1acc6c3a606b082e5eef5e54414ffb";null==ee[te]&&(ee[te]=0);var ne=ee[te]++,re=function(e){void 0===e&&(e={});var t=0;return function(n,r){t+=1;var o="",i="";return r&&(r.options.classNamePrefix&&(i=r.options.classNamePrefix),null!=r.options.jss.id&&(o=String(r.options.jss.id))),e.minify?""+(i||"c")+ne+o+t:i+n.key+"-"+ne+(o?"-"+o:"")+"-"+t}},oe=function(e){var t;return function(){return t||(t=e()),t}},ie=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ae=function(e,t,n){try{var r=n;if(Array.isArray(n)&&(r=v(n,!0),"!important"===n[n.length-1]))return e.style.setProperty(t,r,"important"),!0;e.attributeStyleMap?e.attributeStyleMap.set(t,r):e.style.setProperty(t,r)}catch(e){return!1}return!0},le=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},ue=function(e,t){return e.selectorText=t,e.selectorText===t},se=oe((function(){return document.querySelector("head")}));function ce(e){var t=J.registry;if(t.length>0){var n=function(e,t){for(var n=0;n<e.length;n++){var r=e[n];if(r.attached&&r.options.index>t.index&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e);if(n&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element};if((n=function(e,t){for(var n=e.length-1;n>=0;n--){var r=e[n];if(r.attached&&r.options.insertionPoint===t.insertionPoint)return r}return null}(t,e))&&n.renderer)return{parent:n.renderer.element.parentNode,node:n.renderer.element.nextSibling}}var r=e.insertionPoint;if(r&&"string"==typeof r){var o=function(e){for(var t=se(),n=0;n<t.childNodes.length;n++){var r=t.childNodes[n];if(8===r.nodeType&&r.nodeValue.trim()===e)return r}return null}(r);if(o)return{parent:o.parentNode,node:o.nextSibling}}return!1}var fe=oe((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),de=function(e,t,n){try{if("insertRule"in e)e.insertRule(t,n);else if("appendRule"in e){e.appendRule(t)}}catch(e){return!1}return e.cssRules[n]},pe=function(e,t){var n=e.cssRules.length;return void 0===t||t>n?n:t},he=function(){function e(e){this.getPropertyValue=ie,this.setProperty=ae,this.removeProperty=le,this.setSelector=ue,this.element=void 0,this.sheet=void 0,this.hasInsertedRules=!1,this.cssRules=[],e&&J.add(e),this.sheet=e;var t=this.sheet?this.sheet.options:{},n=t.media,r=t.meta,o=t.element;this.element=o||function(){var e=document.createElement("style");return e.textContent="\n",e}(),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),r&&this.element.setAttribute("data-meta",r);var i=fe();i&&this.element.setAttribute("nonce",i)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var n=t.insertionPoint,r=ce(t);if(!1!==r&&r.parent)r.parent.insertBefore(e,r.node);else if(n&&"number"==typeof n.nodeType){var o=n,i=o.parentNode;i&&i.insertBefore(e,o.nextSibling)}else se().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var n=0;n<e.index.length;n++)this.insertRule(e.index[n],n,t)},t.insertRule=function(e,t,n){if(void 0===n&&(n=this.element.sheet),e.rules){var r=e,o=n;if("conditional"===e.type||"keyframes"===e.type){var i=pe(n,t);if(!1===(o=de(n,r.toString({children:!1}),i)))return!1;this.refCssRule(e,i,o)}return this.insertRules(r.rules,o),o}var a=e.toString();if(!a)return!1;var l=pe(n,t),u=de(n,a,l);return!1!==u&&(this.hasInsertedRules=!0,this.refCssRule(e,l,u),u)},t.refCssRule=function(e,t,n){e.renderable=n,e.options.parent instanceof X&&(this.cssRules[t]=n)},t.deleteRule=function(e){var t=this.element.sheet,n=this.indexOf(e);return-1!==n&&(t.deleteRule(n),this.cssRules.splice(n,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var n=this.indexOf(e);return-1!==n&&(this.element.sheet.deleteRule(n),this.cssRules.splice(n,1),this.insertRule(t,n))},t.getRules=function(){return this.element.sheet.cssRules},e}(),me=0,ve=function(){function e(e){this.id=me++,this.version="10.7.1",this.plugins=new G,this.options={id:{minify:!1},createGenerateId:re,Renderer:l?he:null,plugins:[]},this.generateId=re({minify:!1});for(var t=0;t<K.length;t++)this.plugins.use(K[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=(0,o.Z)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var n=t.index;"number"!=typeof n&&(n=0===J.index?0:J.index+1);var r=new X(e,(0,o.Z)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:n}));return this.plugins.onProcessSheet(r),r},t.removeStyleSheet=function(e){return e.detach(),J.remove(e),this},t.createRule=function(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),"object"==typeof e)return this.createRule(void 0,e,t);var r=(0,o.Z)({},n,{name:e,jss:this,Renderer:this.options.Renderer});r.generateId||(r.generateId=this.generateId),r.classes||(r.classes={}),r.keyframes||(r.keyframes={});var i=h(e,t,r);return i&&this.plugins.onProcessRule(i),i},t.use=function(){for(var e=this,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return n.forEach((function(t){e.plugins.use(t)})),this},e}();function ye(e){var t=null;for(var n in e){var r=e[n],o=typeof r;if("function"===o)t||(t={}),t[n]=r;else if("object"===o&&null!==r&&!Array.isArray(r)){var i=ye(r);i&&(t||(t={}),t[n]=i)}}return t}var ge="object"==typeof CSS&&null!=CSS&&"number"in CSS,be=function(e){return new ve(e)};be();function we(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.baseClasses,n=e.newClasses;e.Component;if(!n)return t;var r=(0,o.Z)({},t);return Object.keys(n).forEach((function(e){n[e]&&(r[e]="".concat(t[e]," ").concat(n[e]))})),r}const ke={set:function(e,t,n,r){var o=e.get(t);o||(o=new Map,e.set(t,o)),o.set(n,r)},get:function(e,t,n){var r=e.get(t);return r?r.get(n):void 0},delete:function(e,t,n){e.get(t).delete(n)}};var xe=n(159),Ee=(n(5697),n(7076)),Se=["checked","disabled","error","focused","focusVisible","required","expanded","selected"];var Ce=Date.now(),Re="fnValues"+Ce,Pe="fnStyle"+ ++Ce;const Oe=function(){return{onCreateRule:function(e,t,n){if("function"!=typeof t)return null;var r=h(e,{},n);return r[Pe]=t,r},onProcessStyle:function(e,t){if(Re in t||Pe in t)return e;var n={};for(var r in e){var o=e[r];"function"==typeof o&&(delete e[r],n[r]=o)}return t[Re]=n,e},onUpdate:function(e,t,n,r){var o=t,i=o[Pe];i&&(o.style=i(e)||{});var a=o[Re];if(a)for(var l in a)o.prop(l,a[l](e),r)}}};var Te="@global",_e="@global ",Ne=function(){function e(e,t,n){for(var r in this.type="global",this.at=Te,this.rules=void 0,this.options=void 0,this.key=void 0,this.isProcessed=!1,this.key=e,this.options=n,this.rules=new Y((0,o.Z)({},n,{parent:this})),t)this.rules.add(r,t[r]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,n){var r=this.rules.add(e,t,n);return r&&this.options.jss.plugins.onProcessRule(r),r},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(){return this.rules.toString()},e}(),Ae=function(){function e(e,t,n){this.type="global",this.at=Te,this.options=void 0,this.rule=void 0,this.isProcessed=!1,this.key=void 0,this.key=e,this.options=n;var r=e.substr(_e.length);this.rule=n.jss.createRule(r,t,(0,o.Z)({},n,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),Me=/\s*,\s*/g;function Ze(e,t){for(var n=e.split(Me),r="",o=0;o<n.length;o++)r+=t+" "+n[o].trim(),n[o+1]&&(r+=", ");return r}const Le=function(){return{onCreateRule:function(e,t,n){if(!e)return null;if(e===Te)return new Ne(e,t,n);if("@"===e[0]&&e.substr(0,_e.length)===_e)return new Ae(e,t,n);var r=n.parent;return r&&("global"===r.type||r.options.parent&&"global"===r.options.parent.type)&&(n.scoped=!1),!1===n.scoped&&(n.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var n=e.options,r=e.style,i=r?r[Te]:null;if(i){for(var a in i)t.addRule(a,i[a],(0,o.Z)({},n,{selector:Ze(a,e.selector)}));delete r[Te]}}(e,t),function(e,t){var n=e.options,r=e.style;for(var i in r)if("@"===i[0]&&i.substr(0,Te.length)===Te){var a=Ze(i.substr(Te.length),e.selector);t.addRule(a,r[i],(0,o.Z)({},n,{selector:a})),delete r[i]}}(e,t))}}};var ze=/\s*,\s*/g,Ie=/&/g,De=/\$([\w-]+)/g;const je=function(){function e(e,t){return function(n,r){var o=e.getRule(r)||t&&t.getRule(r);return o?(o=o).selector:r}}function t(e,t){for(var n=t.split(ze),r=e.split(ze),o="",i=0;i<n.length;i++)for(var a=n[i],l=0;l<r.length;l++){var u=r[l];o&&(o+=", "),o+=-1!==u.indexOf("&")?u.replace(Ie,a):a+" "+u}return o}function n(e,t,n){if(n)return(0,o.Z)({},n,{index:n.index+1});var r=e.options.nestingLevel;r=void 0===r?1:r+1;var i=(0,o.Z)({},e.options,{nestingLevel:r,index:t.indexOf(e)+1});return delete i.name,i}return{onProcessStyle:function(r,i,a){if("style"!==i.type)return r;var l,u,s=i,c=s.options.parent;for(var f in r){var d=-1!==f.indexOf("&"),p="@"===f[0];if(d||p){if(l=n(s,c,l),d){var h=t(f,s.selector);u||(u=e(c,a)),h=h.replace(De,u),c.addRule(h,r[f],(0,o.Z)({},l,{selector:h}))}else p&&c.addRule(f,{},l).addRule(s.key,r[f],{selector:s.selector});delete r[f]}}return r}}};var Fe=/[A-Z]/g,Be=/^ms-/,Ue={};function $e(e){return"-"+e.toLowerCase()}const Ve=function(e){if(Ue.hasOwnProperty(e))return Ue[e];var t=e.replace(Fe,$e);return Ue[e]=Be.test(t)?"-"+t:t};function We(e){var t={};for(var n in e){t[0===n.indexOf("--")?n:Ve(n)]=e[n]}return e.fallbacks&&(Array.isArray(e.fallbacks)?t.fallbacks=e.fallbacks.map(We):t.fallbacks=We(e.fallbacks)),t}const He=function(){return{onProcessStyle:function(e){if(Array.isArray(e)){for(var t=0;t<e.length;t++)e[t]=We(e[t]);return e}return We(e)},onChangeValue:function(e,t,n){if(0===t.indexOf("--"))return e;var r=Ve(t);return t===r?e:(n.prop(r,e),null)}}};var Ke=ge&&CSS?CSS.px:"px",qe=ge&&CSS?CSS.ms:"ms",Qe=ge&&CSS?CSS.percent:"%";function Ye(e){var t=/(-[a-z])/g,n=function(e){return e[1].toUpperCase()},r={};for(var o in e)r[o]=e[o],r[o.replace(t,n)]=e[o];return r}var Xe=Ye({"animation-delay":qe,"animation-duration":qe,"background-position":Ke,"background-position-x":Ke,"background-position-y":Ke,"background-size":Ke,border:Ke,"border-bottom":Ke,"border-bottom-left-radius":Ke,"border-bottom-right-radius":Ke,"border-bottom-width":Ke,"border-left":Ke,"border-left-width":Ke,"border-radius":Ke,"border-right":Ke,"border-right-width":Ke,"border-top":Ke,"border-top-left-radius":Ke,"border-top-right-radius":Ke,"border-top-width":Ke,"border-width":Ke,"border-block":Ke,"border-block-end":Ke,"border-block-end-width":Ke,"border-block-start":Ke,"border-block-start-width":Ke,"border-block-width":Ke,"border-inline":Ke,"border-inline-end":Ke,"border-inline-end-width":Ke,"border-inline-start":Ke,"border-inline-start-width":Ke,"border-inline-width":Ke,"border-start-start-radius":Ke,"border-start-end-radius":Ke,"border-end-start-radius":Ke,"border-end-end-radius":Ke,margin:Ke,"margin-bottom":Ke,"margin-left":Ke,"margin-right":Ke,"margin-top":Ke,"margin-block":Ke,"margin-block-end":Ke,"margin-block-start":Ke,"margin-inline":Ke,"margin-inline-end":Ke,"margin-inline-start":Ke,padding:Ke,"padding-bottom":Ke,"padding-left":Ke,"padding-right":Ke,"padding-top":Ke,"padding-block":Ke,"padding-block-end":Ke,"padding-block-start":Ke,"padding-inline":Ke,"padding-inline-end":Ke,"padding-inline-start":Ke,"mask-position-x":Ke,"mask-position-y":Ke,"mask-size":Ke,height:Ke,width:Ke,"min-height":Ke,"max-height":Ke,"min-width":Ke,"max-width":Ke,bottom:Ke,left:Ke,top:Ke,right:Ke,inset:Ke,"inset-block":Ke,"inset-block-end":Ke,"inset-block-start":Ke,"inset-inline":Ke,"inset-inline-end":Ke,"inset-inline-start":Ke,"box-shadow":Ke,"text-shadow":Ke,"column-gap":Ke,"column-rule":Ke,"column-rule-width":Ke,"column-width":Ke,"font-size":Ke,"font-size-delta":Ke,"letter-spacing":Ke,"text-decoration-thickness":Ke,"text-indent":Ke,"text-stroke":Ke,"text-stroke-width":Ke,"word-spacing":Ke,motion:Ke,"motion-offset":Ke,outline:Ke,"outline-offset":Ke,"outline-width":Ke,perspective:Ke,"perspective-origin-x":Qe,"perspective-origin-y":Qe,"transform-origin":Qe,"transform-origin-x":Qe,"transform-origin-y":Qe,"transform-origin-z":Qe,"transition-delay":qe,"transition-duration":qe,"vertical-align":Ke,"flex-basis":Ke,"shape-margin":Ke,size:Ke,gap:Ke,grid:Ke,"grid-gap":Ke,"row-gap":Ke,"grid-row-gap":Ke,"grid-column-gap":Ke,"grid-template-rows":Ke,"grid-template-columns":Ke,"grid-auto-rows":Ke,"grid-auto-columns":Ke,"box-shadow-x":Ke,"box-shadow-y":Ke,"box-shadow-blur":Ke,"box-shadow-spread":Ke,"font-line-height":Ke,"text-shadow-x":Ke,"text-shadow-y":Ke,"text-shadow-blur":Ke});function Ge(e,t,n){if(null==t)return t;if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]=Ge(e,t[r],n);else if("object"==typeof t)if("fallbacks"===e)for(var o in t)t[o]=Ge(o,t[o],n);else for(var i in t)t[i]=Ge(e+"-"+i,t[i],n);else if("number"==typeof t&&!1===isNaN(t)){var a=n[e]||Xe[e];return!a||0===t&&a===Ke?t.toString():"function"==typeof a?a(t).toString():""+t+a}return t}const Je=function(e){void 0===e&&(e={});var t=Ye(e);return{onProcessStyle:function(e,n){if("style"!==n.type)return e;for(var r in e)e[r]=Ge(r,e[r],t);return e},onChangeValue:function(e,n){return Ge(n,e,t)}}};var et=n(2982),tt="",nt="",rt="",ot="",it=l&&"ontouchstart"in document.documentElement;if(l){var at={Moz:"-moz-",ms:"-ms-",O:"-o-",Webkit:"-webkit-"},lt=document.createElement("p").style;for(var ut in at)if(ut+"Transform"in lt){tt=ut,nt=at[ut];break}"Webkit"===tt&&"msHyphens"in lt&&(tt="ms",nt=at.ms,ot="edge"),"Webkit"===tt&&"-apple-trailing-word"in lt&&(rt="apple")}var st=tt,ct=nt,ft=rt,dt=ot,pt=it;var ht={noPrefill:["appearance"],supportedProperty:function(e){return"appearance"===e&&("ms"===st?"-webkit-"+e:ct+e)}},mt={noPrefill:["color-adjust"],supportedProperty:function(e){return"color-adjust"===e&&("Webkit"===st?ct+"print-"+e:e)}},vt=/[-\s]+(.)?/g;function yt(e,t){return t?t.toUpperCase():""}function gt(e){return e.replace(vt,yt)}function bt(e){return gt("-"+e)}var wt,kt={noPrefill:["mask"],supportedProperty:function(e,t){if(!/^mask/.test(e))return!1;if("Webkit"===st){var n="mask-image";if(gt(n)in t)return e;if(st+bt(n)in t)return ct+e}return e}},xt={noPrefill:["text-orientation"],supportedProperty:function(e){return"text-orientation"===e&&("apple"!==ft||pt?e:ct+e)}},Et={noPrefill:["transform"],supportedProperty:function(e,t,n){return"transform"===e&&(n.transform?e:ct+e)}},St={noPrefill:["transition"],supportedProperty:function(e,t,n){return"transition"===e&&(n.transition?e:ct+e)}},Ct={noPrefill:["writing-mode"],supportedProperty:function(e){return"writing-mode"===e&&("Webkit"===st||"ms"===st&&"edge"!==dt?ct+e:e)}},Rt={noPrefill:["user-select"],supportedProperty:function(e){return"user-select"===e&&("Moz"===st||"ms"===st||"apple"===ft?ct+e:e)}},Pt={supportedProperty:function(e,t){return!!/^break-/.test(e)&&("Webkit"===st?"WebkitColumn"+bt(e)in t&&ct+"column-"+e:"Moz"===st&&("page"+bt(e)in t&&"page-"+e))}},Ot={supportedProperty:function(e,t){if(!/^(border|margin|padding)-inline/.test(e))return!1;if("Moz"===st)return e;var n=e.replace("-inline","");return st+bt(n)in t&&ct+n}},Tt={supportedProperty:function(e,t){return gt(e)in t&&e}},_t={supportedProperty:function(e,t){var n=bt(e);return"-"===e[0]||"-"===e[0]&&"-"===e[1]?e:st+n in t?ct+e:"Webkit"!==st&&"Webkit"+n in t&&"-webkit-"+e}},Nt={supportedProperty:function(e){return"scroll-snap"===e.substring(0,11)&&("ms"===st?""+ct+e:e)}},At={supportedProperty:function(e){return"overscroll-behavior"===e&&("ms"===st?ct+"scroll-chaining":e)}},Mt={"flex-grow":"flex-positive","flex-shrink":"flex-negative","flex-basis":"flex-preferred-size","justify-content":"flex-pack",order:"flex-order","align-items":"flex-align","align-content":"flex-line-pack"},Zt={supportedProperty:function(e,t){var n=Mt[e];return!!n&&(st+bt(n)in t&&ct+n)}},Lt={flex:"box-flex","flex-grow":"box-flex","flex-direction":["box-orient","box-direction"],order:"box-ordinal-group","align-items":"box-align","flex-flow":["box-orient","box-direction"],"justify-content":"box-pack"},zt=Object.keys(Lt),It=function(e){return ct+e},Dt=[ht,mt,kt,xt,Et,St,Ct,Rt,Pt,Ot,Tt,_t,Nt,At,Zt,{supportedProperty:function(e,t,n){var r=n.multiple;if(zt.indexOf(e)>-1){var o=Lt[e];if(!Array.isArray(o))return st+bt(o)in t&&ct+o;if(!r)return!1;for(var i=0;i<o.length;i++)if(!(st+bt(o[0])in t))return!1;return o.map(It)}return!1}}],jt=Dt.filter((function(e){return e.supportedProperty})).map((function(e){return e.supportedProperty})),Ft=Dt.filter((function(e){return e.noPrefill})).reduce((function(e,t){return e.push.apply(e,(0,et.Z)(t.noPrefill)),e}),[]),Bt={};if(l){wt=document.createElement("p");var Ut=window.getComputedStyle(document.documentElement,"");for(var $t in Ut)isNaN($t)||(Bt[Ut[$t]]=Ut[$t]);Ft.forEach((function(e){return delete Bt[e]}))}function Vt(e,t){if(void 0===t&&(t={}),!wt)return e;if(null!=Bt[e])return Bt[e];"transition"!==e&&"transform"!==e||(t[e]=e in wt.style);for(var n=0;n<jt.length&&(Bt[e]=jt[n](e,wt.style,t),!Bt[e]);n++);try{wt.style[e]=""}catch(e){return!1}return Bt[e]}var Wt,Ht={},Kt={transition:1,"transition-property":1,"-webkit-transition":1,"-webkit-transition-property":1},qt=/(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;function Qt(e,t,n){if("var"===t)return"var";if("all"===t)return"all";if("all"===n)return", all";var r=t?Vt(t):", "+Vt(n);return r||(t||n)}function Yt(e,t){var n=t;if(!Wt||"content"===e)return t;if("string"!=typeof n||!isNaN(parseInt(n,10)))return n;var r=e+n;if(null!=Ht[r])return Ht[r];try{Wt.style[e]=n}catch(e){return Ht[r]=!1,!1}if(Kt[e])n=n.replace(qt,Qt);else if(""===Wt.style[e]&&("-ms-flex"===(n=ct+n)&&(Wt.style[e]="-ms-flexbox"),Wt.style[e]=n,""===Wt.style[e]))return Ht[r]=!1,!1;return Wt.style[e]="",Ht[r]=n,Ht[r]}l&&(Wt=document.createElement("p"));const Xt=function(){function e(t){for(var n in t){var r=t[n];if("fallbacks"===n&&Array.isArray(r))t[n]=r.map(e);else{var o=!1,i=Vt(n);i&&i!==n&&(o=!0);var a=!1,l=Yt(i,v(r));l&&l!==r&&(a=!0),(o||a)&&(o&&delete t[n],t[i||n]=l||r)}}return t}return{onProcessRule:function(e){if("keyframes"===e.type){var t=e;t.at=function(e){return"-"===e[1]||"ms"===st?e:"@"+ct+"keyframes"+e.substr(10)}(t.at)}},onProcessStyle:function(t,n){return"style"!==n.type?t:e(t)},onChangeValue:function(e,t){return Yt(t,v(e))||e}}};const Gt=function(){var e=function(e,t){return e.length===t.length?e>t?1:-1:e.length-t.length};return{onProcessStyle:function(t,n){if("style"!==n.type)return t;for(var r={},o=Object.keys(t).sort(e),i=0;i<o.length;i++)r[o[i]]=t[o[i]];return r}}};var Jt=be({plugins:[Oe(),Le(),je(),He(),Je(),"undefined"==typeof window?null:Xt(),Gt()]}),en={disableGeneration:!1,generateClassName:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.disableGlobal,n=void 0!==t&&t,r=e.productionPrefix,o=void 0===r?"jss":r,i=e.seed,a=void 0===i?"":i,l=""===a?"":"".concat(a,"-"),u=0,s=function(){return u+=1};return function(e,t){var r=t.options.name;if(r&&0===r.indexOf("Mui")&&!t.options.link&&!n){if(-1!==Se.indexOf(e.key))return"Mui-".concat(e.key);var i="".concat(l).concat(r,"-").concat(e.key);return t.options.theme[Ee.Z]&&""===a?"".concat(i,"-").concat(s()):i}return"".concat(l).concat(o).concat(s())}}(),jss:Jt,sheetsCache:null,sheetsManager:new Map,sheetsRegistry:null},tn=i.createContext(en);var nn=-1e9;function rn(){return nn+=1}var on=n(5953);function an(e){var t="function"==typeof e;return{create:function(n,r){var i;try{i=t?e(n):e}catch(e){throw e}if(!r||!n.overrides||!n.overrides[r])return i;var a=n.overrides[r],l=(0,o.Z)({},i);return Object.keys(a).forEach((function(e){l[e]=(0,on.Z)(l[e],a[e])})),l},options:{}}}const ln={};function un(e,t,n){var r=e.state;if(e.stylesOptions.disableGeneration)return t||{};r.cacheClasses||(r.cacheClasses={value:null,lastProp:null,lastJSS:{}});var o=!1;return r.classes!==r.cacheClasses.lastJSS&&(r.cacheClasses.lastJSS=r.classes,o=!0),t!==r.cacheClasses.lastProp&&(r.cacheClasses.lastProp=t,o=!0),o&&(r.cacheClasses.value=we({baseClasses:r.cacheClasses.lastJSS,newClasses:t,Component:n})),r.cacheClasses.value}function sn(e,t){var n=e.state,r=e.theme,i=e.stylesOptions,a=e.stylesCreator,l=e.name;if(!i.disableGeneration){var u=ke.get(i.sheetsManager,a,r);u||(u={refs:0,staticSheet:null,dynamicStyles:null},ke.set(i.sheetsManager,a,r,u));var s=(0,o.Z)({},a.options,i,{theme:r,flip:"boolean"==typeof i.flip?i.flip:"rtl"===r.direction});s.generateId=s.serverGenerateClassName||s.generateClassName;var c=i.sheetsRegistry;if(0===u.refs){var f;i.sheetsCache&&(f=ke.get(i.sheetsCache,a,r));var d=a.create(r,l);f||((f=i.jss.createStyleSheet(d,(0,o.Z)({link:!1},s))).attach(),i.sheetsCache&&ke.set(i.sheetsCache,a,r,f)),c&&c.add(f),u.staticSheet=f,u.dynamicStyles=ye(d)}if(u.dynamicStyles){var p=i.jss.createStyleSheet(u.dynamicStyles,(0,o.Z)({link:!0},s));p.update(t),p.attach(),n.dynamicSheet=p,n.classes=we({baseClasses:u.staticSheet.classes,newClasses:p.classes}),c&&c.add(p)}else n.classes=u.staticSheet.classes;u.refs+=1}}function cn(e,t){var n=e.state;n.dynamicSheet&&n.dynamicSheet.update(t)}function fn(e){var t=e.state,n=e.theme,r=e.stylesOptions,o=e.stylesCreator;if(!r.disableGeneration){var i=ke.get(r.sheetsManager,o,n);i.refs-=1;var a=r.sheetsRegistry;0===i.refs&&(ke.delete(r.sheetsManager,o,n),r.jss.removeStyleSheet(i.staticSheet),a&&a.remove(i.staticSheet)),t.dynamicSheet&&(r.jss.removeStyleSheet(t.dynamicSheet),a&&a.remove(t.dynamicSheet))}}function dn(e,t){var n,r=i.useRef([]),o=i.useMemo((function(){return{}}),t);r.current!==o&&(r.current=o,n=e()),i.useEffect((function(){return function(){n&&n()}}),[o])}function pn(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.name,a=t.classNamePrefix,l=t.Component,u=t.defaultTheme,s=void 0===u?ln:u,c=(0,r.Z)(t,["name","classNamePrefix","Component","defaultTheme"]),f=an(e),d=n||a||"makeStyles";f.options={index:rn(),name:n,meta:d,classNamePrefix:d};var p=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=(0,xe.Z)()||s,r=(0,o.Z)({},i.useContext(tn),c),a=i.useRef(),u=i.useRef();dn((function(){var o={name:n,state:{},stylesCreator:f,stylesOptions:r,theme:t};return sn(o,e),u.current=!1,a.current=o,function(){fn(o)}}),[t,f]),i.useEffect((function(){u.current&&cn(a.current,e),u.current=!0}));var d=un(a.current,e.classes,l);return d};return p}},3800:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r=n(7294).createContext(null)},159:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(7294),o=n(3800);function i(){return r.useContext(o.Z)}},5953:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(7462),o=n(1002);function i(e){return e&&"object"===(0,o.Z)(e)&&e.constructor===Object}function a(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{clone:!0},o=n.clone?(0,r.Z)({},e):e;return i(e)&&i(t)&&Object.keys(t).forEach((function(r){"__proto__"!==r&&(i(t[r])&&r in e?o[r]=a(e[r],t[r],n):o[r]=t[r])})),o}},288:(e,t,n)=>{"use strict";function r(e){for(var t="https://material-ui.com/production-error/?code="+e,n=1;n<arguments.length;n+=1)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified Material-UI error #"+e+"; visit "+t+" for the full message."}n.d(t,{Z:()=>r})},6010:(e,t,n)=>{"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:()=>o})},1424:(e,t,n)=>{"use strict";n.d(t,{Z:()=>Z});var r=n(4015),o=n.n(r),i=n(3645),a=n.n(i),l=n(1667),u=n.n(l),s=n(6931),c=n(2708),f=n(3976),d=n(8404),p=n(9652),h=n(7804),m=n(822),v=n(812),y=n(5844),g=n(4325),b=n(9283),w=n(7749),k=a()(o()),x=u()(s),E=u()(c),S=u()(f),C=u()(d),R=u()(p),P=u()(h),O=u()(m),T=u()(v),_=u()(y),N=u()(g),A=u()(b),M=u()(w);k.push([e.id,'body {\n  margin: 0;\n  font-family: "Noto Sans CJK KR", BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell",\n    "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;\n  font-style: "normal";\n  font-weight: 500;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New", monospace;\n}\n\n@font-face {\n  font-family: "Noto Sans CJK KR";\n  font-style: normal;\n  font-weight: 100;\n  src: url('+x+') format("woff2"),\n    url('+E+') format("woff"),\n    url('+S+') format("truetype");\n}\n\n@font-face {\n  font-family: "Noto Sans CJK KR";\n  font-style: normal;\n  font-weight: normal;\n  src: url('+C+') format("woff2"),\n    url('+R+') format("woff"),\n    url('+P+') format("truetype");\n}\n\n@font-face {\n  font-family: "Noto Sans CJK KR";\n  font-style: normal;\n  font-weight: 500;\n  src: url('+O+') format("woff2"),\n    url('+T+') format("woff"),\n    url('+_+') format("truetype");\n}\n\n@font-face {\n  font-family: "Noto Sans CJK KR";\n  font-style: normal;\n  font-weight: bold;\n  src: url('+N+') format("woff2"),\n    url('+A+') format("woff"), url('+M+') format("truetype");\n}\n',"",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT;2DACyD;EACzD,oBAAoB;EACpB,gBAAgB;EAChB,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE,+EAA+E;AACjF;;AAEA;EACE,+BAA+B;EAC/B,kBAAkB;EAClB,gBAAgB;EAChB;;8DAE6D;AAC/D;;AAEA;EACE,+BAA+B;EAC/B,kBAAkB;EAClB,mBAAmB;EACnB;;8DAE+D;AACjE;;AAEA;EACE,+BAA+B;EAC/B,kBAAkB;EAClB,gBAAgB;EAChB;;8DAE8D;AAChE;;AAEA;EACE,+BAA+B;EAC/B,kBAAkB;EAClB,iBAAiB;EACjB;wHACqH;AACvH",sourcesContent:['body {\n  margin: 0;\n  font-family: "Noto Sans CJK KR", BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell",\n    "Fira Sans", "Droid Sans", "Helvetica Neue", sans-serif;\n  font-style: "normal";\n  font-weight: 500;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New", monospace;\n}\n\n@font-face {\n  font-family: "Noto Sans CJK KR";\n  font-style: normal;\n  font-weight: 100;\n  src: url("styles/fonts/NotoSansKR-Light.woff2") format("woff2"),\n    url("styles/fonts/NotoSansKR-Light.woff") format("woff"),\n    url("styles/fonts/NotoSansKR-Light.otf") format("truetype");\n}\n\n@font-face {\n  font-family: "Noto Sans CJK KR";\n  font-style: normal;\n  font-weight: normal;\n  src: url("styles/fonts/NotoSansKR-Regular.woff2") format("woff2"),\n    url("styles/fonts/NotoSansKR-Regular.woff") format("woff"),\n    url("styles/fonts/NotoSansKR-Regular.otf") format("truetype");\n}\n\n@font-face {\n  font-family: "Noto Sans CJK KR";\n  font-style: normal;\n  font-weight: 500;\n  src: url("styles/fonts/NotoSansKR-Medium.woff2") format("woff2"),\n    url("styles/fonts/NotoSansKR-Medium.woff") format("woff"),\n    url("styles/fonts/NotoSansKR-Medium.otf") format("truetype");\n}\n\n@font-face {\n  font-family: "Noto Sans CJK KR";\n  font-style: normal;\n  font-weight: bold;\n  src: url("styles/fonts/NotoSansKR-Bold.woff2") format("woff2"),\n    url("styles/fonts/NotoSansKR-Bold.woff") format("woff"), url("styles/fonts/NotoSansKR-Bold.otf") format("truetype");\n}\n'],sourceRoot:""}]);const Z=k},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=e(t);return t[2]?"@media ".concat(t[2]," {").concat(n,"}"):n})).join("")},t.i=function(e,n,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);r&&o[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),t.push(u))}},t}},4015:e=>{"use strict";function t(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null==n)return;var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return n(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports=function(e){var n=t(e,4),r=n[1],o=n[3];if(!o)return r;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),l="/*# ".concat(a," */"),u=o.sources.map((function(e){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(e," */")}));return[r].concat(u).concat([l]).join("\n")}return[r].join("\n")}},1667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},7531:(e,t,n)=>{"use strict";n.d(t,{lX:()=>w,q_:()=>R,ob:()=>p,PP:()=>O,Ep:()=>d});var r=n(7462);function o(e){return"/"===e.charAt(0)}function i(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}const a=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],l=e&&o(e),u=t&&o(t),s=l||u;if(e&&o(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var c=a[a.length-1];n="."===c||".."===c||""===c}else n=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?i(a,d):".."===p?(i(a,d),f++):f&&(i(a,d),f--)}if(!s)for(;f--;f)a.unshift("..");!s||""===a[0]||a[0]&&o(a[0])||a.unshift("");var h=a.join("/");return n&&"/"!==h.substr(-1)&&(h+="/"),h};var l=n(2177);function u(e){return"/"===e.charAt(0)?e:"/"+e}function s(e){return"/"===e.charAt(0)?e.substr(1):e}function c(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function f(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function d(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}function p(e,t,n,o){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=(0,r.Z)({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),o?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=a(i.pathname,o.pathname)):i.pathname=o.pathname:i.pathname||(i.pathname="/"),i}function h(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof r?r(i,o):o(!0):o(!1!==i)}else o(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var m=!("undefined"==typeof window||!window.document||!window.document.createElement);function v(e,t){t(window.confirm(e))}var y="popstate",g="hashchange";function b(){try{return window.history.state||{}}catch(e){return{}}}function w(e){void 0===e&&(e={}),m||(0,l.Z)(!1);var t,n=window.history,o=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,s=a.forceRefresh,w=void 0!==s&&s,k=a.getUserConfirmation,x=void 0===k?v:k,E=a.keyLength,S=void 0===E?6:E,C=e.basename?f(u(e.basename)):"";function R(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return C&&(i=c(i,C)),p(i,r,n)}function P(){return Math.random().toString(36).substr(2,S)}var O=h();function T(e){(0,r.Z)(B,e),B.length=n.length,O.notifyListeners(B.location,B.action)}function _(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||M(R(e.state))}function N(){M(R(b()))}var A=!1;function M(e){if(A)A=!1,T();else{O.confirmTransitionTo(e,"POP",x,(function(t){t?T({action:"POP",location:e}):function(e){var t=B.location,n=L.indexOf(t.key);-1===n&&(n=0);var r=L.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(A=!0,I(o))}(e)}))}}var Z=R(b()),L=[Z.key];function z(e){return C+d(e)}function I(e){n.go(e)}var D=0;function j(e){1===(D+=e)&&1===e?(window.addEventListener(y,_),i&&window.addEventListener(g,N)):0===D&&(window.removeEventListener(y,_),i&&window.removeEventListener(g,N))}var F=!1;var B={length:n.length,action:"POP",location:Z,createHref:z,push:function(e,t){var r="PUSH",i=p(e,t,P(),B.location);O.confirmTransitionTo(i,r,x,(function(e){if(e){var t=z(i),a=i.key,l=i.state;if(o)if(n.pushState({key:a,state:l},null,t),w)window.location.href=t;else{var u=L.indexOf(B.location.key),s=L.slice(0,u+1);s.push(i.key),L=s,T({action:r,location:i})}else window.location.href=t}}))},replace:function(e,t){var r="REPLACE",i=p(e,t,P(),B.location);O.confirmTransitionTo(i,r,x,(function(e){if(e){var t=z(i),a=i.key,l=i.state;if(o)if(n.replaceState({key:a,state:l},null,t),w)window.location.replace(t);else{var u=L.indexOf(B.location.key);-1!==u&&(L[u]=i.key),T({action:r,location:i})}else window.location.replace(t)}}))},go:I,goBack:function(){I(-1)},goForward:function(){I(1)},block:function(e){void 0===e&&(e=!1);var t=O.setPrompt(e);return F||(j(1),F=!0),function(){return F&&(F=!1,j(-1)),t()}},listen:function(e){var t=O.appendListener(e);return j(1),function(){j(-1),t()}}};return B}var k="hashchange",x={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+s(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s,decodePath:u},slash:{encodePath:u,decodePath:u}};function E(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function S(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function C(e){window.location.replace(E(window.location.href)+"#"+e)}function R(e){void 0===e&&(e={}),m||(0,l.Z)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),o=n.getUserConfirmation,i=void 0===o?v:o,a=n.hashType,s=void 0===a?"slash":a,y=e.basename?f(u(e.basename)):"",g=x[s],b=g.encodePath,w=g.decodePath;function R(){var e=w(S());return y&&(e=c(e,y)),p(e)}var P=h();function O(e){(0,r.Z)(F,e),F.length=t.length,P.notifyListeners(F.location,F.action)}var T=!1,_=null;function N(){var e,t,n=S(),r=b(n);if(n!==r)C(r);else{var o=R(),a=F.location;if(!T&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(_===d(o))return;_=null,function(e){if(T)T=!1,O();else{var t="POP";P.confirmTransitionTo(e,t,i,(function(n){n?O({action:t,location:e}):function(e){var t=F.location,n=L.lastIndexOf(d(t));-1===n&&(n=0);var r=L.lastIndexOf(d(e));-1===r&&(r=0);var o=n-r;o&&(T=!0,z(o))}(e)}))}}(o)}}var A=S(),M=b(A);A!==M&&C(M);var Z=R(),L=[d(Z)];function z(e){t.go(e)}var I=0;function D(e){1===(I+=e)&&1===e?window.addEventListener(k,N):0===I&&window.removeEventListener(k,N)}var j=!1;var F={length:t.length,action:"POP",location:Z,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=E(window.location.href)),n+"#"+b(y+d(e))},push:function(e,t){var n="PUSH",r=p(e,void 0,void 0,F.location);P.confirmTransitionTo(r,n,i,(function(e){if(e){var t=d(r),o=b(y+t);if(S()!==o){_=t,function(e){window.location.hash=e}(o);var i=L.lastIndexOf(d(F.location)),a=L.slice(0,i+1);a.push(t),L=a,O({action:n,location:r})}else O()}}))},replace:function(e,t){var n="REPLACE",r=p(e,void 0,void 0,F.location);P.confirmTransitionTo(r,n,i,(function(e){if(e){var t=d(r),o=b(y+t);S()!==o&&(_=t,C(o));var i=L.indexOf(d(F.location));-1!==i&&(L[i]=t),O({action:n,location:r})}}))},go:z,goBack:function(){z(-1)},goForward:function(){z(1)},block:function(e){void 0===e&&(e=!1);var t=P.setPrompt(e);return j||(D(1),j=!0),function(){return j&&(j=!1,D(-1)),t()}},listen:function(e){var t=P.appendListener(e);return D(1),function(){D(-1),t()}}};return F}function P(e,t,n){return Math.min(Math.max(e,t),n)}function O(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,o=t.initialEntries,i=void 0===o?["/"]:o,a=t.initialIndex,l=void 0===a?0:a,u=t.keyLength,s=void 0===u?6:u,c=h();function f(e){(0,r.Z)(w,e),w.length=w.entries.length,c.notifyListeners(w.location,w.action)}function m(){return Math.random().toString(36).substr(2,s)}var v=P(l,0,i.length-1),y=i.map((function(e){return p(e,void 0,"string"==typeof e?m():e.key||m())})),g=d;function b(e){var t=P(w.index+e,0,w.entries.length-1),r=w.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var w={length:y.length,action:"POP",location:y[v],index:v,entries:y,createHref:g,push:function(e,t){var r="PUSH",o=p(e,t,m(),w.location);c.confirmTransitionTo(o,r,n,(function(e){if(e){var t=w.index+1,n=w.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),f({action:r,location:o,index:t,entries:n})}}))},replace:function(e,t){var r="REPLACE",o=p(e,t,m(),w.location);c.confirmTransitionTo(o,r,n,(function(e){e&&(w.entries[w.index]=o,f({action:r,location:o}))}))},go:b,goBack:function(){b(-1)},goForward:function(){b(1)},canGo:function(e){var t=w.index+e;return t>=0&&t<w.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return w}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?a:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var l=u(t),m=u(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||l&&l[y])){var g=d(n,y);try{s(t,y,g)}catch(e){}}}}return t}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,u=o(e),s=1;s<arguments.length;s++){for(var c in a=Object(arguments[s]))n.call(a,c)&&(u[c]=a[c]);if(t){l=t(a);for(var f=0;f<l.length;f++)r.call(a,l[f])&&(u[l[f]]=a[l[f]])}}return u}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var k=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,E=60106,S=60107,C=60108,R=60114,P=60109,O=60110,T=60112,_=60113,N=60120,A=60115,M=60116,Z=60121,L=60128,z=60129,I=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var j=Symbol.for;x=j("react.element"),E=j("react.portal"),S=j("react.fragment"),C=j("react.strict_mode"),R=j("react.profiler"),P=j("react.provider"),O=j("react.context"),T=j("react.forward_ref"),_=j("react.suspense"),N=j("react.suspense_list"),A=j("react.memo"),M=j("react.lazy"),Z=j("react.block"),j("react.scope"),L=j("react.opaque.id"),z=j("react.debug_trace_mode"),I=j("react.offscreen"),D=j("react.legacy_hidden")}var F,B="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}function $(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var V=!1;function W(e,t){if(!e||V)return"";V=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=l);break}}}finally{V=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?$(e):""}function H(e){switch(e.tag){case 5:return $(e.type);case 16:return $("Lazy");case 13:return $("Suspense");case 19:return $("SuspenseList");case 0:case 2:case 15:return e=W(e.type,!1);case 11:return e=W(e.type.render,!1);case 22:return e=W(e.type._render,!1);case 1:return e=W(e.type,!0);default:return""}}function K(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case E:return"Portal";case R:return"Profiler";case C:return"StrictMode";case _:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case A:return K(e.type);case Z:return K(e._render);case M:t=e._payload,e=e._init;try{return K(e(t))}catch(e){}}return null}function q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Y(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function X(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function se(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml",de="http://www.w3.org/2000/svg";function pe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?pe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,ve,ye=(ve=function(e,t){if(e.namespaceURI!==de||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ve(e,t)}))}:ve);function ge(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},we=["Webkit","ms","Moz","O"];function ke(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ke(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(be).forEach((function(e){we.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Se(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ce(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Re(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Pe=null,Oe=null,Te=null;function _e(e){if(e=eo(e)){if("function"!=typeof Pe)throw Error(a(280));var t=e.stateNode;t&&(t=no(t),Pe(e.stateNode,e.type,t))}}function Ne(e){Oe?Te?Te.push(e):Te=[e]:Oe=e}function Ae(){if(Oe){var e=Oe,t=Te;if(Te=Oe=null,_e(e),t)for(e=0;e<t.length;e++)_e(t[e])}}function Me(e,t){return e(t)}function Ze(e,t,n,r,o){return e(t,n,r,o)}function Le(){}var ze=Me,Ie=!1,De=!1;function je(){null===Oe&&null===Te||(Le(),Ae())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=no(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(f)try{var Ue={};Object.defineProperty(Ue,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Ue,Ue),window.removeEventListener("test",Ue,Ue)}catch(ve){Be=!1}function $e(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ve=!1,We=null,He=!1,Ke=null,qe={onError:function(e){Ve=!0,We=e}};function Qe(e,t,n,r,o,i,a,l,u){Ve=!1,We=null,$e.apply(qe,arguments)}function Ye(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function Ge(e){if(Ye(e)!==e)throw Error(a(188))}function Je(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ye(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function et(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var tt,nt,rt,ot,it=!1,at=[],lt=null,ut=null,st=null,ct=new Map,ft=new Map,dt=[],pt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":lt=null;break;case"dragenter":case"dragleave":ut=null;break;case"mouseover":case"mouseout":st=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ft.delete(t.pointerId)}}function vt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=ht(t,n,r,o,i),null!==t&&(null!==(t=eo(t))&&nt(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function yt(e){var t=Jr(e.target);if(null!==t){var n=Ye(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void ot(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){rt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function gt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=eo(n))&&nt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){gt(e)&&n.delete(t)}function wt(){for(it=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=eo(e.blockedOn))&&tt(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==lt&&gt(lt)&&(lt=null),null!==ut&&gt(ut)&&(ut=null),null!==st&&gt(st)&&(st=null),ct.forEach(bt),ft.forEach(bt)}function kt(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,wt)))}function xt(e){function t(t){return kt(t,e)}if(0<at.length){kt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==lt&&kt(lt,e),null!==ut&&kt(ut,e),null!==st&&kt(st,e),ct.forEach(t),ft.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)yt(n),null===n.blockedOn&&dt.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var St={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},Ct={},Rt={};function Pt(e){if(Ct[e])return Ct[e];if(!St[e])return e;var t,n=St[e];for(t in n)if(n.hasOwnProperty(t)&&t in Rt)return Ct[e]=n[t];return e}f&&(Rt=document.createElement("div").style,"AnimationEvent"in window||(delete St.animationend.animation,delete St.animationiteration.animation,delete St.animationstart.animation),"TransitionEvent"in window||delete St.transitionend.transition);var Ot=Pt("animationend"),Tt=Pt("animationiteration"),_t=Pt("animationstart"),Nt=Pt("transitionend"),At=new Map,Mt=new Map,Zt=["abort","abort",Ot,"animationEnd",Tt,"animationIteration",_t,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Nt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Mt.set(r,t),At.set(r,o),s(o,[r])}}(0,i.unstable_now)();var zt=8;function It(e){if(0!=(1&e))return zt=15,1;if(0!=(2&e))return zt=14,2;if(0!=(4&e))return zt=13,4;var t=24&e;return 0!==t?(zt=12,t):0!=(32&e)?(zt=11,32):0!==(t=192&e)?(zt=10,t):0!=(256&e)?(zt=9,256):0!==(t=3584&e)?(zt=8,t):0!=(4096&e)?(zt=7,4096):0!==(t=4186112&e)?(zt=6,t):0!==(t=62914560&e)?(zt=5,t):67108864&e?(zt=4,67108864):0!=(134217728&e)?(zt=3,134217728):0!==(t=805306368&e)?(zt=2,t):0!=(1073741824&e)?(zt=1,1073741824):(zt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return zt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=zt=15;else if(0!==(i=134217727&n)){var u=i&~a;0!==u?(r=It(u),o=zt):0!==(l&=i)&&(r=It(l),o=zt)}else 0!==(i=n&~a)?(r=It(i),o=zt):0!==l&&(r=It(l),o=zt);if(0===r)return 0;if(r=n&((0>(r=31-Vt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(It(t),o<=zt)return t;zt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Vt(t)),r|=e[n],t&=~o;return r}function jt(e){return 0!==(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Ft(10,t):e;case 10:return 0===(e=Bt(192&~t))?Ft(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&(0===(e=Bt(4186112&~t))&&(e=512)),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function Ut(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function $t(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Vt(t)]=n}var Vt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Ht|0)|0},Wt=Math.log,Ht=Math.LN2;var Kt=i.unstable_UserBlockingPriority,qt=i.unstable_runWithPriority,Qt=!0;function Yt(e,t,n,r){Ie||Le();var o=Gt,i=Ie;Ie=!0;try{Ze(o,e,t,n,r)}finally{(Ie=i)||je()}}function Xt(e,t,n,r){qt(Kt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Qt)if((o=0==(4&t))&&0<at.length&&-1<pt.indexOf(e))e=ht(null,e,t,n,r),at.push(e);else{var i=Jt(e,t,n,r);if(null===i)o&&mt(e,r);else{if(o){if(-1<pt.indexOf(e))return e=ht(i,e,t,n,r),void at.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return lt=vt(lt,e,t,n,r,o),!0;case"dragenter":return ut=vt(ut,e,t,n,r,o),!0;case"mouseover":return st=vt(st,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return ct.set(i,vt(ct.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ft.set(i,vt(ft.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;mt(e,r)}Ar(e,t,r,null,n)}}}function Jt(e,t,n,r){var o=Re(r);if(null!==(o=Jr(o))){var i=Ye(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Xe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Ar(e,t,r,o,n),null}var en=null,tn=null,nn=null;function rn(){if(nn)return nn;var e,t,n=tn,r=n.length,o="value"in en?en.value:en.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return nn=o.slice(e,1<t?1-t:void 0)}function on(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function ln(){return!1}function un(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?an:ln,this.isPropagationStopped=ln,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var sn,cn,fn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},pn=un(dn),hn=o({},dn,{view:0,detail:0}),mn=un(hn),vn=o({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==fn&&(fn&&"mousemove"===e.type?(sn=e.screenX-fn.screenX,cn=e.screenY-fn.screenY):cn=sn=0,fn=e),sn)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),yn=un(vn),gn=un(o({},vn,{dataTransfer:0})),bn=un(o({},hn,{relatedTarget:0})),wn=un(o({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),kn=un(o({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),xn=un(o({},dn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Rn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Pn(){return Rn}var On=un(o({},hn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=on(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?on(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?on(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Tn=un(o({},vn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),_n=un(o({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),Nn=un(o({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),An=un(o({},vn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),Mn=[9,13,27,32],Zn=f&&"CompositionEvent"in window,Ln=null;f&&"documentMode"in document&&(Ln=document.documentMode);var zn=f&&"TextEvent"in window&&!Ln,In=f&&(!Zn||Ln&&8<Ln&&11>=Ln),Dn=String.fromCharCode(32),jn=!1;function Fn(e,t){switch(e){case"keyup":return-1!==Mn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Bn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1;var $n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function Wn(e,t,n,r){Ne(r),0<(t=Zr(t,"onChange")).length&&(n=new pn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Kn=null;function qn(e){Rr(e,0)}function Qn(e){if(X(to(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Gn;if(f){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Gn=Jn}else Gn=!1;Xn=Gn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Kn=Hn=null)}function nr(e){if("value"===e.propertyName&&Qn(Kn)){var t=[];if(Wn(t,Kn,e,Re(e)),e=qn,Ie)e(t);else{Ie=!0;try{Me(e,t)}finally{Ie=!1,je()}}}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(Kn)}function ir(e,t){if("click"===e)return Qn(t)}function ar(e,t){if("input"===e||"change"===e)return Qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!lr(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var mr=f&&"documentMode"in document&&11>=document.documentMode,vr=null,yr=null,gr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==vr||vr!==G(r)||("selectionStart"in(r=vr)&&hr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&sr(gr,r)||(gr=r,0<(r=Zr(yr,"onSelect")).length&&(t=new pn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=vr)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(Zt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),xr=0;xr<kr.length;xr++)Mt.set(kr[xr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Sr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function Cr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(Qe.apply(this,arguments),Ve){if(!Ve)throw Error(a(198));var c=We;Ve=!1,We=null,He||(He=!0,Ke=c)}}(r,t,void 0,e),e.currentTarget=null}function Rr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;Cr(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;Cr(o,l,s),i=u}}}if(He)throw e=Ke,He=!1,Ke=null,e}function Pr(e,t){var n=ro(t),r=e+"__bubble";n.has(r)||(Nr(t,e,2,!1),n.add(r))}var Or="_reactListening"+Math.random().toString(36).slice(2);function Tr(e){e[Or]||(e[Or]=!0,l.forEach((function(t){Sr.has(t)||_r(t,!1,e,null),_r(t,!0,e,null)})))}function _r(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Sr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=ro(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),Nr(i,e,o,t),a.add(l))}function Nr(e,t,n,r){var o=Mt.get(t);switch(void 0===o?2:o){case 0:o=Yt;break;case 1:o=Xt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ar(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Jr(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(De)return e(t,n);De=!0;try{ze(e,t,n)}finally{De=!1,je()}}((function(){var r=i,o=Re(n),a=[];e:{var l=At.get(e);if(void 0!==l){var u=pn,s=e;switch(e){case"keypress":if(0===on(n))break e;case"keydown":case"keyup":u=On;break;case"focusin":s="focus",u=bn;break;case"focusout":s="blur",u=bn;break;case"beforeblur":case"afterblur":u=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=_n;break;case Ot:case Tt:case _t:u=wn;break;case Nt:u=Nn;break;case"scroll":u=mn;break;case"wheel":u=An;break;case"copy":case"cut":case"paste":u=kn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Tn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&(null!=(m=Fe(h,d))&&c.push(Mr(h,m,p)))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Jr(s)&&!s[Xr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Jr(s):null)&&(s!==(f=Ye(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=yn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Tn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:to(u),p=null==s?l:to(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,Jr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Lr(p))h++;for(p=0,m=d;m;m=Lr(m))p++;for(;0<h-p;)c=Lr(c),h--;for(;0<p-h;)d=Lr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Lr(c),d=Lr(d)}c=null}else c=null;null!==u&&zr(a,l,u,c,!1),null!==s&&null!==f&&zr(a,f,s,c,!0)}if("select"===(u=(l=r?to(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Yn;else if(Vn(l))if(Xn)v=ar;else{v=or;var y=rr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ir);switch(v&&(v=v(e,r))?Wn(a,v,n,o):(y&&y(e,l,r),"focusout"===e&&(y=l._wrapperState)&&y.controlled&&"number"===l.type&&oe(l,"number",l.value)),y=r?to(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(vr=y,yr=r,gr=null);break;case"focusout":gr=yr=vr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(a,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(a,n,o)}var g;if(Zn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Un?Fn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(In&&"ko"!==n.locale&&(Un||"onCompositionStart"!==b?"onCompositionEnd"===b&&Un&&(g=rn()):(tn="value"in(en=o)?en.value:en.textContent,Un=!0)),0<(y=Zr(r,b)).length&&(b=new xn(b,e,null,n,o),a.push({event:b,listeners:y}),g?b.data=g:null!==(g=Bn(n))&&(b.data=g))),(g=zn?function(e,t){switch(e){case"compositionend":return Bn(t);case"keypress":return 32!==t.which?null:(jn=!0,Dn);case"textInput":return(e=t.data)===Dn&&jn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Zn&&Fn(e,t)?(e=rn(),nn=tn=en=null,Un=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return In&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&(0<(r=Zr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g))}Rr(a,t)}))}function Mr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Zr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Fe(e,n))&&r.unshift(Mr(e,i,o)),null!=(i=Fe(e,t))&&r.push(Mr(e,i,o))),e=e.return}return r}function Lr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Fe(n,i))&&a.unshift(Mr(n,u,l)):o||null!=(u=Fe(n,i))&&a.push(Mr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Ir(){}var Dr=null,jr=null;function Fr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Br(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,$r="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){1===e.nodeType?e.textContent="":9===e.nodeType&&(null!=(e=e.body)&&(e.textContent=""))}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Hr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Kr=0;var qr=Math.random().toString(36).slice(2),Qr="__reactFiber$"+qr,Yr="__reactProps$"+qr,Xr="__reactContainer$"+qr,Gr="__reactEvents$"+qr;function Jr(e){var t=e[Qr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Xr]||n[Qr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Hr(e);null!==e;){if(n=e[Qr])return n;e=Hr(e)}return t}n=(e=n).parentNode}return null}function eo(e){return!(e=e[Qr]||e[Xr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function to(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function no(e){return e[Yr]||null}function ro(e){var t=e[Gr];return void 0===t&&(t=e[Gr]=new Set),t}var oo=[],io=-1;function ao(e){return{current:e}}function lo(e){0>io||(e.current=oo[io],oo[io]=null,io--)}function uo(e,t){io++,oo[io]=e.current,e.current=t}var so={},co=ao(so),fo=ao(!1),po=so;function ho(e,t){var n=e.type.contextTypes;if(!n)return so;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function mo(e){return null!=(e=e.childContextTypes)}function vo(){lo(fo),lo(co)}function yo(e,t,n){if(co.current!==so)throw Error(a(168));uo(co,t),uo(fo,n)}function go(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,K(t)||"Unknown",i));return o({},n,r)}function bo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||so,po=co.current,uo(co,e),uo(fo,fo.current),!0}function wo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=go(e,t,po),r.__reactInternalMemoizedMergedChildContext=e,lo(fo),lo(co),uo(co,e)):lo(fo),uo(fo,n)}var ko=null,xo=null,Eo=i.unstable_runWithPriority,So=i.unstable_scheduleCallback,Co=i.unstable_cancelCallback,Ro=i.unstable_shouldYield,Po=i.unstable_requestPaint,Oo=i.unstable_now,To=i.unstable_getCurrentPriorityLevel,_o=i.unstable_ImmediatePriority,No=i.unstable_UserBlockingPriority,Ao=i.unstable_NormalPriority,Mo=i.unstable_LowPriority,Zo=i.unstable_IdlePriority,Lo={},zo=void 0!==Po?Po:function(){},Io=null,Do=null,jo=!1,Fo=Oo(),Bo=1e4>Fo?Oo:function(){return Oo()-Fo};function Uo(){switch(To()){case _o:return 99;case No:return 98;case Ao:return 97;case Mo:return 96;case Zo:return 95;default:throw Error(a(332))}}function $o(e){switch(e){case 99:return _o;case 98:return No;case 97:return Ao;case 96:return Mo;case 95:return Zo;default:throw Error(a(332))}}function Vo(e,t){return e=$o(e),Eo(e,t)}function Wo(e,t,n){return e=$o(e),So(e,t,n)}function Ho(){if(null!==Do){var e=Do;Do=null,Co(e)}Ko()}function Ko(){if(!jo&&null!==Io){jo=!0;var e=0;try{var t=Io;Vo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Io=null}catch(t){throw null!==Io&&(Io=Io.slice(e+1)),So(_o,Ho),t}finally{jo=!1}}}var qo=k.ReactCurrentBatchConfig;function Qo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Yo=ao(null),Xo=null,Go=null,Jo=null;function ei(){Jo=Go=Xo=null}function ti(e){var t=Yo.current;lo(Yo),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ri(e,t){Xo=e,Jo=Go=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Za=!0),e.firstContext=null)}function oi(e,t){if(Jo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Jo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Go){if(null===Xo)throw Error(a(308));Go=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Go=Go.next=t;return e._currentValue}var ii=!1;function ai(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ui(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function si(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function ci(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function fi(e,t,n,r){var i=e.updateQueue;ii=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,u=i.shared.pending;if(null!==u){i.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?a=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==a){for(d=i.baseState,l=0,f=c=s=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:ii=!0}}null!==a.callback&&(e.flags|=32,null===(u=i.effects)?i.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(a=a.next)){if(null===(u=i.shared.pending))break;a=u.next,u.next=null,i.lastBaseUpdate=u,i.shared.pending=null}}null===f&&(s=d),i.baseState=s,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Il|=l,e.lanes=l,e.memoizedState=d}}function di(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var pi=(new r.Component).refs;function hi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var mi={isMounted:function(e){return!!(e=e._reactInternals)&&Ye(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=uu(),o=su(e),i=ui(r,o);i.payload=t,null!=n&&(i.callback=n),si(e,i),cu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=uu(),o=su(e),i=ui(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),si(e,i),cu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=uu(),r=su(e),o=ui(n,r);o.tag=2,null!=t&&(o.callback=t),si(e,o),cu(e,r,n)}};function vi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!t.prototype||!t.prototype.isPureReactComponent||(!sr(n,r)||!sr(o,i))}function yi(e,t,n){var r=!1,o=so,i=t.contextType;return"object"==typeof i&&null!==i?i=oi(i):(o=mo(t)?po:co.current,i=(r=null!=(r=t.contextTypes))?ho(e,o):so),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=mi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mi.enqueueReplaceState(t,t.state,null)}function bi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=pi,ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=oi(i):(i=mo(t)?po:co.current,o.context=ho(e,i)),fi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(hi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&mi.enqueueReplaceState(o,o.state,null),fi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var wi=Array.isArray;function ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===pi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function xi(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ei(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Uu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Hu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=ki(e,t,n),r.return=e,r):((r=$u(n.type,n.key,n.props,null,e.mode,r)).ref=ki(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ku(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Vu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Hu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=$u(t.type,t.key,t.props,null,e.mode,n)).ref=ki(e,null,t),n.return=e,n;case E:return(t=Ku(t,e.mode,n)).return=e,t}if(wi(t)||U(t))return(t=Vu(t,e.mode,n,null)).return=e,t;xi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?n.type===S?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(wi(n)||U(n))return null!==o?null:f(e,t,n,r,null);xi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===S?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(wi(r)||U(r))return f(t,e=e.get(n)||null,r,o,null);xi(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,v=null;null!==f&&m<l.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,l[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y,f=v}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(v=h(f,o,m,l[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),s}function v(o,l,u,s){var c=U(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,v=l=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,s))&&(l=i(g,l,v),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),l=i(g,l,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===S&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case x:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===S){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=ki(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===S?((r=Vu(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=$u(i.type,i.key,i.props,null,e.mode,u)).ref=ki(e,r,i),u.return=e,e=u)}return l(e);case E:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ku(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Hu(i,e.mode,u)).return=e,e=r),l(e);if(wi(i))return m(e,r,i,u);if(U(i))return v(e,r,i,u);if(c&&xi(e,i),void 0===i&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,K(e.type)||"Component"))}return n(e,r)}}var Si=Ei(!0),Ci=Ei(!1),Ri={},Pi=ao(Ri),Oi=ao(Ri),Ti=ao(Ri);function _i(e){if(e===Ri)throw Error(a(174));return e}function Ni(e,t){switch(uo(Ti,t),uo(Oi,e),uo(Pi,Ri),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Pi),uo(Pi,t)}function Ai(){lo(Pi),lo(Oi),lo(Ti)}function Mi(e){_i(Ti.current);var t=_i(Pi.current),n=he(t,e.type);t!==n&&(uo(Oi,e),uo(Pi,n))}function Zi(e){Oi.current===e&&(lo(Pi),lo(Oi))}var Li=ao(0);function zi(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ii=null,Di=null,ji=!1;function Fi(e,t){var n=Fu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Bi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Ui(e){if(ji){var t=Di;if(t){var n=t;if(!Bi(e,t)){if(!(t=Wr(n.nextSibling))||!Bi(e,t))return e.flags=-1025&e.flags|2,ji=!1,void(Ii=e);Fi(Ii,n)}Ii=e,Di=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,ji=!1,Ii=e}}function $i(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ii=e}function Vi(e){if(e!==Ii)return!1;if(!ji)return $i(e),ji=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Br(t,e.memoizedProps))for(t=Di;t;)Fi(e,t),t=Wr(t.nextSibling);if($i(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Di=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Di=null}}else Di=Ii?Wr(e.stateNode.nextSibling):null;return!0}function Wi(){Di=Ii=null,ji=!1}var Hi=[];function Ki(){for(var e=0;e<Hi.length;e++)Hi[e]._workInProgressVersionPrimary=null;Hi.length=0}var qi=k.ReactCurrentDispatcher,Qi=k.ReactCurrentBatchConfig,Yi=0,Xi=null,Gi=null,Ji=null,ea=!1,ta=!1;function na(){throw Error(a(321))}function ra(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function oa(e,t,n,r,o,i){if(Yi=i,Xi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qi.current=null===e||null===e.memoizedState?_a:Na,e=n(r,o),ta){i=0;do{if(ta=!1,!(25>i))throw Error(a(301));i+=1,Ji=Gi=null,t.updateQueue=null,qi.current=Aa,e=n(r,o)}while(ta)}if(qi.current=Ta,t=null!==Gi&&null!==Gi.next,Yi=0,Ji=Gi=Xi=null,ea=!1,t)throw Error(a(300));return e}function ia(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ji?Xi.memoizedState=Ji=e:Ji=Ji.next=e,Ji}function aa(){if(null===Gi){var e=Xi.alternate;e=null!==e?e.memoizedState:null}else e=Gi.next;var t=null===Ji?Xi.memoizedState:Ji.next;if(null!==t)Ji=t,Gi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Gi=e).memoizedState,baseState:Gi.baseState,baseQueue:Gi.baseQueue,queue:Gi.queue,next:null},null===Ji?Xi.memoizedState=Ji=e:Ji=Ji.next=e}return Ji}function la(e,t){return"function"==typeof t?t(e):t}function ua(e){var t=aa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Gi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,s=o;do{var c=s.lane;if((Yi&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,Xi.lanes|=c,Il|=c}s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=l,lr(r,t.memoizedState)||(Za=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function sa(e){var t=aa(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(Za=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ca(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Yi&e)===e)&&(t._workInProgressVersionPrimary=r,Hi.push(t))),e)return n(t._source);throw Hi.push(t),Error(a(350))}function fa(e,t,n,r){var o=Tl;if(null===o)throw Error(a(349));var i=t._getVersion,l=i(t._source),u=qi.current,s=u.useState((function(){return ca(o,t,n)})),c=s[1],f=s[0];s=Ji;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Xi;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!lr(l,e)){e=n(t._source),lr(f,e)||(c(e),e=su(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var u=31-Vt(a),s=1<<u;r[u]|=e,a&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=su(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),lr(h,n)&&lr(m,t)&&lr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:f}).dispatch=c=Oa.bind(null,Xi,e),s.queue=e,s.baseQueue=null,f=ca(o,t,n),s.memoizedState=s.baseState=f),f}function da(e,t,n){return fa(aa(),e,t,n)}function pa(e){var t=ia();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:e}).dispatch=Oa.bind(null,Xi,e),[t.memoizedState,e]}function ha(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Xi.updateQueue)?(t={lastEffect:null},Xi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ma(e){return e={current:e},ia().memoizedState=e}function va(){return aa().memoizedState}function ya(e,t,n,r){var o=ia();Xi.flags|=e,o.memoizedState=ha(1|t,n,void 0,void 0===r?null:r)}function ga(e,t,n,r){var o=aa();r=void 0===r?null:r;var i=void 0;if(null!==Gi){var a=Gi.memoizedState;if(i=a.destroy,null!==r&&ra(r,a.deps))return void ha(t,n,i,r)}Xi.flags|=e,o.memoizedState=ha(1|t,n,i,r)}function ba(e,t){return ya(516,4,e,t)}function wa(e,t){return ga(516,4,e,t)}function ka(e,t){return ga(4,2,e,t)}function xa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ea(e,t,n){return n=null!=n?n.concat([e]):null,ga(4,2,xa.bind(null,t,e),n)}function Sa(){}function Ca(e,t){var n=aa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ra(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ra(e,t){var n=aa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ra(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Pa(e,t){var n=Uo();Vo(98>n?98:n,(function(){e(!0)})),Vo(97<n?97:n,(function(){var n=Qi.transition;Qi.transition=1;try{e(!1),t()}finally{Qi.transition=n}}))}function Oa(e,t,n){var r=uu(),o=su(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Xi||null!==a&&a===Xi)ta=ea=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=a(l,n);if(i.eagerReducer=a,i.eagerState=u,lr(u,l))return}catch(e){}cu(e,o,r)}}var Ta={readContext:oi,useCallback:na,useContext:na,useEffect:na,useImperativeHandle:na,useLayoutEffect:na,useMemo:na,useReducer:na,useRef:na,useState:na,useDebugValue:na,useDeferredValue:na,useTransition:na,useMutableSource:na,useOpaqueIdentifier:na,unstable_isNewReconciler:!1},_a={readContext:oi,useCallback:function(e,t){return ia().memoizedState=[e,void 0===t?null:t],e},useContext:oi,useEffect:ba,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,xa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ya(4,2,e,t)},useMemo:function(e,t){var n=ia();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ia();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oa.bind(null,Xi,e),[r.memoizedState,e]},useRef:ma,useState:pa,useDebugValue:Sa,useDeferredValue:function(e){var t=pa(e),n=t[0],r=t[1];return ba((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=pa(!1),t=e[0];return ma(e=Pa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=ia();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},fa(r,e,t,n)},useOpaqueIdentifier:function(){if(ji){var e=!1,t=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Kr++).toString(36))),Error(a(355))})),n=pa(t)[1];return 0==(2&Xi.mode)&&(Xi.flags|=516,ha(5,(function(){n("r:"+(Kr++).toString(36))}),void 0,null)),t}return pa(t="r:"+(Kr++).toString(36)),t},unstable_isNewReconciler:!1},Na={readContext:oi,useCallback:Ca,useContext:oi,useEffect:wa,useImperativeHandle:Ea,useLayoutEffect:ka,useMemo:Ra,useReducer:ua,useRef:va,useState:function(){return ua(la)},useDebugValue:Sa,useDeferredValue:function(e){var t=ua(la),n=t[0],r=t[1];return wa((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=ua(la)[0];return[va().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return ua(la)[0]},unstable_isNewReconciler:!1},Aa={readContext:oi,useCallback:Ca,useContext:oi,useEffect:wa,useImperativeHandle:Ea,useLayoutEffect:ka,useMemo:Ra,useReducer:sa,useRef:va,useState:function(){return sa(la)},useDebugValue:Sa,useDeferredValue:function(e){var t=sa(la),n=t[0],r=t[1];return wa((function(){var t=Qi.transition;Qi.transition=1;try{r(e)}finally{Qi.transition=t}}),[e]),n},useTransition:function(){var e=sa(la)[0];return[va().current,e]},useMutableSource:da,useOpaqueIdentifier:function(){return sa(la)[0]},unstable_isNewReconciler:!1},Ma=k.ReactCurrentOwner,Za=!1;function La(e,t,n,r){t.child=null===e?Ci(t,null,n,r):Si(t,e.child,n,r)}function za(e,t,n,r,o){n=n.render;var i=t.ref;return ri(t,o),r=oa(e,t,n,r,i,o),null===e||Za?(t.flags|=1,La(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Ia(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Bu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=$u(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Da(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:sr)(o,r)&&e.ref===t.ref)?nl(e,t,i):(t.flags|=1,(e=Uu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Da(e,t,n,r,o,i){if(null!==e&&sr(e.memoizedProps,r)&&e.ref===t.ref){if(Za=!1,0==(i&o))return t.lanes=e.lanes,nl(e,t,i);0!=(16384&e.flags)&&(Za=!0)}return Ba(e,t,n,r,i)}function ja(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},gu(t,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},gu(t,e),null;t.memoizedState={baseLanes:0},gu(t,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,gu(t,r);return La(e,t,o,n),t.child}function Fa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ba(e,t,n,r,o){var i=mo(n)?po:co.current;return i=ho(t,i),ri(t,o),n=oa(e,t,n,r,i,o),null===e||Za?(t.flags|=1,La(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,nl(e,t,o))}function Ua(e,t,n,r,o){if(mo(n)){var i=!0;bo(t)}else i=!1;if(ri(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yi(t,n,r),bi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;"object"==typeof s&&null!==s?s=oi(s):s=ho(t,s=mo(n)?po:co.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&gi(t,a,r,s),ii=!1;var d=t.memoizedState;a.state=d,fi(t,r,a,o),u=t.memoizedState,l!==r||d!==u||fo.current||ii?("function"==typeof c&&(hi(t,n,c,r),u=t.memoizedState),(l=ii||vi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,li(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Qo(t.type,l),a.props=s,f=t.pendingProps,d=a.context,"object"==typeof(u=n.contextType)&&null!==u?u=oi(u):u=ho(t,u=mo(n)?po:co.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==u)&&gi(t,a,r,u),ii=!1,d=t.memoizedState,a.state=d,fi(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||fo.current||ii?("function"==typeof p&&(hi(t,n,p,r),h=t.memoizedState),(s=ii||vi(t,n,s,r,d,h,u))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return $a(e,t,n,r,i,o)}function $a(e,t,n,r,o,i){Fa(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&wo(t,n,!1),nl(e,t,i);r=t.stateNode,Ma.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Si(t,e.child,null,i),t.child=Si(t,null,l,i)):La(e,t,l,i),t.memoizedState=r.state,o&&wo(t,n,!0),t.child}function Va(e){var t=e.stateNode;t.pendingContext?yo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yo(0,t.context,!1),Ni(e,t.containerInfo)}var Wa,Ha,Ka,qa={dehydrated:null,retryLane:0};function Qa(e,t,n){var r,o=t.pendingProps,i=Li.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),uo(Li,1&i),null===e?(void 0!==o.fallback&&Ui(t),e=o.children,i=o.fallback,a?(e=Ya(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ya(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=qa,t.lanes=33554432,e):((n=Wu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=Ga(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=qa,o):(n=Xa(e,t,o.children,n),t.memoizedState=null,n))}function Ya(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Wu(t,o,0,null),n=Vu(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Xa(e,t,n,r){var o=e.child;return e=o.sibling,n=Uu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}function Ga(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Uu(a,l),null!==e?r=Uu(e,r):(r=Vu(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ni(e.return,t)}function el(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function tl(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(La(e,t,r.children,n),0!=(2&(r=Li.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(uo(Li,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===zi(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),el(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===zi(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}el(t,!0,n,null,i,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Il|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Uu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Uu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!ji)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ol(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return mo(t.type)&&vo(),null;case 3:return Ai(),lo(fo),lo(co),Ki(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Zi(t);var i=_i(Ti.current);if(n=t.type,null!==e&&null!=t.stateNode)Ha(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=_i(Pi.current),Vi(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Qr]=t,r[Yr]=l,n){case"dialog":Pr("cancel",r),Pr("close",r);break;case"iframe":case"object":case"embed":Pr("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)Pr(Er[e],r);break;case"source":Pr("error",r);break;case"img":case"image":case"link":Pr("error",r),Pr("load",r);break;case"details":Pr("toggle",r);break;case"input":ee(r,l),Pr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Pr("invalid",r);break;case"textarea":ue(r,l),Pr("invalid",r)}for(var s in Se(n,l),e=null,l)l.hasOwnProperty(s)&&(i=l[s],"children"===s?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):u.hasOwnProperty(s)&&null!=i&&"onScroll"===s&&Pr("scroll",r));switch(n){case"input":Y(r),re(r,l,!0);break;case"textarea":Y(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Ir)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=pe(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Qr]=t,e[Yr]=r,Wa(e,t),t.stateNode=e,s=Ce(n,r),n){case"dialog":Pr("cancel",e),Pr("close",e),i=r;break;case"iframe":case"object":case"embed":Pr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Er.length;i++)Pr(Er[i],e);i=r;break;case"source":Pr("error",e),i=r;break;case"img":case"image":case"link":Pr("error",e),Pr("load",e),i=r;break;case"details":Pr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Pr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Pr("invalid",e);break;case"textarea":ue(e,r),i=le(e,r),Pr("invalid",e);break;default:i=r}Se(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?xe(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ge(e,f):"number"==typeof f&&ge(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Pr("scroll",e):null!=f&&w(e,l,f,s))}switch(n){case"input":Y(e),re(e,r,!1);break;case"textarea":Y(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ae(e,!!r.multiple,l,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Ir)}Fr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ka(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=_i(Ti.current),_i(Pi.current),Vi(t)?(r=t.stateNode,n=t.memoizedProps,r[Qr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Qr]=t,t.stateNode=r)}return null;case 13:return lo(Li),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vi(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Li.current)?0===Zl&&(Zl=3):(0!==Zl&&3!==Zl||(Zl=4),null===Tl||0==(134217727&Il)&&0==(134217727&Dl)||hu(Tl,Nl))),(r||n)&&(t.flags|=4),null);case 4:return Ai(),null===e&&Tr(t.stateNode.containerInfo),null;case 10:return ti(t),null;case 17:return mo(t.type)&&vo(),null;case 19:if(lo(Li),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)rl(r,!1);else{if(0!==Zl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=zi(e))){for(t.flags|=64,rl(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return uo(Li,1&Li.current|2),t.child}e=e.sibling}null!==r.tail&&Bo()>Ul&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=zi(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!ji)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Bo()-r.renderingStartTime>Ul&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Bo(),n.sibling=null,t=Li.current,uo(Li,l?1&t|2:1&t),n):null;case 23:case 24:return bu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function il(e){switch(e.tag){case 1:mo(e.type)&&vo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ai(),lo(fo),lo(co),Ki(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Zi(e),null;case 13:return lo(Li),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(Li),null;case 4:return Ai(),null;case 10:return ti(e),null;case 23:case 24:return bu(),null;default:return null}}function al(e,t){try{var n="",r=t;do{n+=H(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ha=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,_i(Pi.current);var a,l=null;switch(n){case"input":i=J(e,i),r=J(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Ir)}for(f in Se(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var s=i[f];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(a in s)!s.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&s[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Pr("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===L?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Ka=function(e,t,n,r){n!==r&&(t.flags|=4)};var ll="function"==typeof WeakMap?WeakMap:Map;function ul(e,t,n){(n=ui(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Hl||(Hl=!0,Kl=r)},n}function sl(e,t,n){(n=ui(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===ql?ql=new Set([this]):ql.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var cl="function"==typeof WeakSet?WeakSet:Set;function fl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){zu(e,t)}else t.current=null}function dl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function pl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Mu(n,e),Au(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&di(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}di(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Fr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function hl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=ke("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ml(e,t){if(xo&&"function"==typeof xo.onCommitFiberUnmount)try{xo.onCommitFiberUnmount(ko,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Mu(t,n);else{r=t;try{o()}catch(e){zu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(fl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){zu(t,e)}break;case 5:fl(t);break;case 4:kl(e,t)}}function vl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function gl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ge(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?bl(e,n,t):wl(e,n,t)}function bl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Ir));else if(4!==r&&null!==(e=e.child))for(bl(e,t,n),e=e.sibling;null!==e;)bl(e,t,n),e=e.sibling}function wl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(wl(e,t,n),e=e.sibling;null!==e;)wl(e,t,n),e=e.sibling}function kl(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(ml(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(ml(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function xl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Yr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ce(e,o),t=Ce(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?xe(n,u):"dangerouslySetInnerHTML"===l?ye(n,u):"children"===l?ge(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=Bo(),hl(t.child,!0)),void El(t);case 19:return void El(t);case 17:return;case 23:case 24:return void hl(t,null!==t.memoizedState)}throw Error(a(163))}function El(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new cl),t.forEach((function(t){var r=Du.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Sl(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&(null!==(t=t.memoizedState)&&null===t.dehydrated)}var Cl=Math.ceil,Rl=k.ReactCurrentDispatcher,Pl=k.ReactCurrentOwner,Ol=0,Tl=null,_l=null,Nl=0,Al=0,Ml=ao(0),Zl=0,Ll=null,zl=0,Il=0,Dl=0,jl=0,Fl=null,Bl=0,Ul=1/0;function $l(){Ul=Bo()+500}var Vl,Wl=null,Hl=!1,Kl=null,ql=null,Ql=!1,Yl=null,Xl=90,Gl=[],Jl=[],eu=null,tu=0,nu=null,ru=-1,ou=0,iu=0,au=null,lu=!1;function uu(){return 0!=(48&Ol)?Bo():-1!==ru?ru:ru=Bo()}function su(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Uo()?1:2;if(0===ou&&(ou=zl),0!==qo.transition){0!==iu&&(iu=null!==Fl?Fl.pendingLanes:0),e=ou;var t=4186112&~iu;return 0===(t&=-t)&&(0===(t=(e=4186112&~e)&-e)&&(t=8192)),t}return e=Uo(),0!=(4&Ol)&&98===e?e=Ft(12,ou):e=Ft(e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ou),e}function cu(e,t,n){if(50<tu)throw tu=0,nu=null,Error(a(185));if(null===(e=fu(e,t)))return null;$t(e,t,n),e===Tl&&(Dl|=t,4===Zl&&hu(e,Nl));var r=Uo();1===t?0!=(8&Ol)&&0==(48&Ol)?mu(e):(du(e,n),0===Ol&&($l(),Ho())):(0==(4&Ol)||98!==r&&99!==r||(null===eu?eu=new Set([e]):eu.add(e)),du(e,n)),Fl=e}function fu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function du(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Vt(l),s=1<<u,c=i[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,It(s);var f=zt;i[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=Dt(e,e===Tl?Nl:0),t=zt,0===r)null!==n&&(n!==Lo&&Co(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Lo&&Co(n)}15===t?(n=mu.bind(null,e),null===Io?(Io=[n],Do=So(_o,Ko)):Io.push(n),n=Lo):14===t?n=Wo(99,mu.bind(null,e)):n=Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),pu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function pu(e){if(ru=-1,iu=ou=0,0!=(48&Ol))throw Error(a(327));var t=e.callbackNode;if(Nu()&&e.callbackNode!==t)return null;var n=Dt(e,e===Tl?Nl:0);if(0===n)return null;var r=n,o=Ol;Ol|=16;var i=xu();for(Tl===e&&Nl===r||($l(),wu(e,r));;)try{Cu();break}catch(t){ku(e,t)}if(ei(),Rl.current=i,Ol=o,null!==_l?r=0:(Tl=null,Nl=0,r=Zl),0!=(zl&Dl))wu(e,0);else if(0!==r){if(2===r&&(Ol|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=jt(e))&&(r=Eu(e,n))),1===r)throw t=Ll,wu(e,0),hu(e,n),du(e,Bo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ou(e);break;case 3:if(hu(e,n),(62914560&n)===n&&10<(r=Bl+500-Bo())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){uu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ur(Ou.bind(null,e),r);break}Ou(e);break;case 4:if(hu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Vt(n);i=1<<l,(l=r[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=Bo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Cl(n/1960))-n)){e.timeoutHandle=Ur(Ou.bind(null,e),n);break}Ou(e);break;case 5:Ou(e);break;default:throw Error(a(329))}}return du(e,Bo()),e.callbackNode===t?pu.bind(null,e):null}function hu(e,t){for(t&=~jl,t&=~Dl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Vt(t),r=1<<n;e[n]=-1,t&=~r}}function mu(e){if(0!=(48&Ol))throw Error(a(327));if(Nu(),e===Tl&&0!=(e.expiredLanes&Nl)){var t=Nl,n=Eu(e,t);0!=(zl&Dl)&&(n=Eu(e,t=Dt(e,t)))}else n=Eu(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Ol|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=jt(e))&&(n=Eu(e,t))),1===n)throw n=Ll,wu(e,0),hu(e,t),du(e,Bo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ou(e),du(e,Bo()),null}function vu(e,t){var n=Ol;Ol|=1;try{return e(t)}finally{0===(Ol=n)&&($l(),Ho())}}function yu(e,t){var n=Ol;Ol&=-2,Ol|=8;try{return e(t)}finally{0===(Ol=n)&&($l(),Ho())}}function gu(e,t){uo(Ml,Al),Al|=t,zl|=t}function bu(){Al=Ml.current,lo(Ml)}function wu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,$r(n)),null!==_l)for(n=_l.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vo();break;case 3:Ai(),lo(fo),lo(co),Ki();break;case 5:Zi(r);break;case 4:Ai();break;case 13:case 19:lo(Li);break;case 10:ti(r);break;case 23:case 24:bu()}n=n.return}Tl=e,_l=Uu(e.current,null),Nl=Al=zl=t,Zl=0,Ll=null,jl=Dl=Il=0}function ku(e,t){for(;;){var n=_l;try{if(ei(),qi.current=Ta,ea){for(var r=Xi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ea=!1}if(Yi=0,Ji=Gi=Xi=null,ta=!1,Pl.current=null,null===n||null===n.return){Zl=1,Ll=t,_l=null;break}e:{var i=e,a=n.return,l=n,u=t;if(t=Nl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Li.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var y=new Set;y.add(s),d.updateQueue=y}else v.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=ui(-1,1);g.tag=2,si(l,g)}l.lanes|=1;break e}u=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new ll,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Iu.bind(null,i,s,l);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((K(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Zl&&(Zl=2),u=al(u,l),d=a;do{switch(d.tag){case 3:i=u,d.flags|=4096,t&=-t,d.lanes|=t,ci(d,ul(0,i,t));break e;case 1:i=u;var k=d.type,x=d.stateNode;if(0==(64&d.flags)&&("function"==typeof k.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===ql||!ql.has(x)))){d.flags|=4096,t&=-t,d.lanes|=t,ci(d,sl(d,i,t));break e}}d=d.return}while(null!==d)}Pu(n)}catch(e){t=e,_l===n&&null!==n&&(_l=n=n.return);continue}break}}function xu(){var e=Rl.current;return Rl.current=Ta,null===e?Ta:e}function Eu(e,t){var n=Ol;Ol|=16;var r=xu();for(Tl===e&&Nl===t||wu(e,t);;)try{Su();break}catch(t){ku(e,t)}if(ei(),Ol=n,Rl.current=r,null!==_l)throw Error(a(261));return Tl=null,Nl=0,Zl}function Su(){for(;null!==_l;)Ru(_l)}function Cu(){for(;null!==_l&&!Ro();)Ru(_l)}function Ru(e){var t=Vl(e.alternate,e,Al);e.memoizedProps=e.pendingProps,null===t?Pu(e):_l=t,Pl.current=null}function Pu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=ol(n,t,Al)))return void(_l=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Al)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=il(t)))return n.flags&=2047,void(_l=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(_l=t);_l=t=e}while(null!==t);0===Zl&&(Zl=5)}function Ou(e){var t=Uo();return Vo(99,Tu.bind(null,e,t)),null}function Tu(e,t){do{Nu()}while(null!==Yl);if(0!=(48&Ol))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<i;){var s=31-Vt(i),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,i&=~c}if(null!==eu&&0==(24&r)&&eu.has(e)&&eu.delete(e),e===Tl&&(_l=Tl=null,Nl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ol,Ol|=32,Pl.current=null,Dr=Qt,hr(l=pr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,i=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=l,y=null;t:for(;;){for(var g;v!==u||0!==i&&3!==v.nodeType||(d=f+i),v!==s||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(g=v.firstChild);)y=v,v=g;for(;;){if(v===l)break t;if(y===u&&++h===i&&(d=f),y===s&&++m===c&&(p=f),null!==(g=v.nextSibling))break;y=(v=y).parentNode}v=g}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;jr={focusedElem:l,selectionRange:u},Qt=!1,au=null,lu=!1,Wl=r;do{try{_u()}catch(e){if(null===Wl)throw Error(a(330));zu(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);au=null,Wl=r;do{try{for(l=e;null!==Wl;){var b=Wl.flags;if(16&b&&ge(Wl.stateNode,""),128&b){var w=Wl.alternate;if(null!==w){var k=w.ref;null!==k&&("function"==typeof k?k(null):k.current=null)}}switch(1038&b){case 2:gl(Wl),Wl.flags&=-3;break;case 6:gl(Wl),Wl.flags&=-3,xl(Wl.alternate,Wl);break;case 1024:Wl.flags&=-1025;break;case 1028:Wl.flags&=-1025,xl(Wl.alternate,Wl);break;case 4:xl(Wl.alternate,Wl);break;case 8:kl(l,u=Wl);var x=u.alternate;vl(u),null!==x&&vl(x)}Wl=Wl.nextEffect}}catch(e){if(null===Wl)throw Error(a(330));zu(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);if(k=jr,w=pr(),b=k.focusedElem,l=k.selectionRange,w!==b&&b&&b.ownerDocument&&dr(b.ownerDocument.documentElement,b)){null!==l&&hr(b)&&(w=l.start,void 0===(k=l.end)&&(k=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(k,b.value.length)):(k=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(k=k.getSelection(),u=b.textContent.length,x=Math.min(l.start,u),l=void 0===l.end?x:Math.min(l.end,u),!k.extend&&x>l&&(u=l,l=x,x=u),u=fr(b,x),i=fr(b,l),u&&i&&(1!==k.rangeCount||k.anchorNode!==u.node||k.anchorOffset!==u.offset||k.focusNode!==i.node||k.focusOffset!==i.offset)&&((w=w.createRange()).setStart(u.node,u.offset),k.removeAllRanges(),x>l?(k.addRange(w),k.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),k.addRange(w))))),w=[];for(k=b;k=k.parentNode;)1===k.nodeType&&w.push({element:k,left:k.scrollLeft,top:k.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(k=w[b]).element.scrollLeft=k.left,k.element.scrollTop=k.top}Qt=!!Dr,jr=Dr=null,e.current=n,Wl=r;do{try{for(b=e;null!==Wl;){var E=Wl.flags;if(36&E&&pl(b,Wl.alternate,Wl),128&E){w=void 0;var S=Wl.ref;if(null!==S){var C=Wl.stateNode;switch(Wl.tag){case 5:w=C;break;default:w=C}"function"==typeof S?S(w):S.current=w}}Wl=Wl.nextEffect}}catch(e){if(null===Wl)throw Error(a(330));zu(Wl,e),Wl=Wl.nextEffect}}while(null!==Wl);Wl=null,zo(),Ol=o}else e.current=n;if(Ql)Ql=!1,Yl=e,Xl=t;else for(Wl=r;null!==Wl;)t=Wl.nextEffect,Wl.nextEffect=null,8&Wl.flags&&((E=Wl).sibling=null,E.stateNode=null),Wl=t;if(0===(r=e.pendingLanes)&&(ql=null),1===r?e===nu?tu++:(tu=0,nu=e):tu=0,n=n.stateNode,xo&&"function"==typeof xo.onCommitFiberRoot)try{xo.onCommitFiberRoot(ko,n,void 0,64==(64&n.current.flags))}catch(e){}if(du(e,Bo()),Hl)throw Hl=!1,e=Kl,Kl=null,e;return 0!=(8&Ol)||Ho(),null}function _u(){for(;null!==Wl;){var e=Wl.alternate;lu||null===au||(0!=(8&Wl.flags)?et(Wl,au)&&(lu=!0):13===Wl.tag&&Sl(e,Wl)&&et(Wl,au)&&(lu=!0));var t=Wl.flags;0!=(256&t)&&dl(e,Wl),0==(512&t)||Ql||(Ql=!0,Wo(97,(function(){return Nu(),null}))),Wl=Wl.nextEffect}}function Nu(){if(90!==Xl){var e=97<Xl?97:Xl;return Xl=90,Vo(e,Zu)}return!1}function Au(e,t){Gl.push(t,e),Ql||(Ql=!0,Wo(97,(function(){return Nu(),null})))}function Mu(e,t){Jl.push(t,e),Ql||(Ql=!0,Wo(97,(function(){return Nu(),null})))}function Zu(){if(null===Yl)return!1;var e=Yl;if(Yl=null,0!=(48&Ol))throw Error(a(331));var t=Ol;Ol|=32;var n=Jl;Jl=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(a(330));zu(i,e)}}for(n=Gl,Gl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===i)throw Error(a(330));zu(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Ol=t,Ho(),!0}function Lu(e,t,n){si(e,t=ul(0,t=al(n,t),1)),t=uu(),null!==(e=fu(e,1))&&($t(e,1,t),du(e,t))}function zu(e,t){if(3===e.tag)Lu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Lu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r))){var o=sl(n,e=al(t,e),1);if(si(n,o),o=uu(),null!==(n=fu(n,1)))$t(n,1,o),du(n,o);else if("function"==typeof r.componentDidCatch&&(null===ql||!ql.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Iu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=uu(),e.pingedLanes|=e.suspendedLanes&n,Tl===e&&(Nl&n)===n&&(4===Zl||3===Zl&&(62914560&Nl)===Nl&&500>Bo()-Bl?wu(e,0):jl|=n),du(e,t)}function Du(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Uo()?1:2:(0===ou&&(ou=zl),0===(t=Bt(62914560&~ou))&&(t=4194304))),n=uu(),null!==(e=fu(e,t))&&($t(e,t,n),du(e,n))}function ju(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,n,r){return new ju(e,t,n,r)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Uu(e,t){var n=e.alternate;return null===n?((n=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function $u(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Bu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return Vu(n.children,o,i,t);case z:l=8,o|=16;break;case C:l=8,o|=1;break;case R:return(e=Fu(12,n,t,8|o)).elementType=R,e.type=R,e.lanes=i,e;case _:return(e=Fu(13,n,t,o)).type=_,e.elementType=_,e.lanes=i,e;case N:return(e=Fu(19,n,t,o)).elementType=N,e.lanes=i,e;case I:return Wu(n,o,i,t);case D:return(e=Fu(24,n,t,o)).elementType=D,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:l=10;break e;case O:l=9;break e;case T:l=11;break e;case A:l=14;break e;case M:l=16,r=null;break e;case Z:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Fu(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Vu(e,t,n,r){return(e=Fu(7,e,r,t)).lanes=n,e}function Wu(e,t,n,r){return(e=Fu(23,e,r,t)).elementType=I,e.lanes=n,e}function Hu(e,t,n){return(e=Fu(6,e,null,t)).lanes=n,e}function Ku(e,t,n){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function qu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ut(0),this.expirationTimes=Ut(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ut(0),this.mutableSourceEagerHydrationData=null}function Qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yu(e,t,n,r){var o=t.current,i=uu(),l=su(o);e:if(n){t:{if(Ye(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(mo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(mo(s)){n=go(n,s,u);break e}}n=u}else n=so;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),si(o,t),cu(o,l,i),l}function Xu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Gu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ju(e,t){Gu(e,t),(e=e.alternate)&&Gu(e,t)}function es(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new qu(e,t,null!=n&&!0===n.hydrate),t=Fu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ai(t),e[Xr]=n.current,Tr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function ts(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ns(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Xu(a);l.call(e)}}Yu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new es(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Xu(a);u.call(e)}}yu((function(){Yu(t,a,e,o)}))}return Xu(a)}function rs(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ts(t))throw Error(a(200));return Qu(e,t,null,n)}Vl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fo.current)Za=!0;else{if(0==(n&r)){switch(Za=!1,t.tag){case 3:Va(t),Wi();break;case 5:Mi(t);break;case 1:mo(t.type)&&bo(t);break;case 4:Ni(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;uo(Yo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Qa(e,t,n):(uo(Li,1&Li.current),null!==(t=nl(e,t,n))?t.sibling:null);uo(Li,1&Li.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),uo(Li,Li.current),r)break;return null;case 23:case 24:return t.lanes=0,ja(e,t,n)}return nl(e,t,n)}Za=0!=(16384&e.flags)}else Za=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=ho(t,co.current),ri(t,n),o=oa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mo(r)){var i=!0;bo(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ai(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&hi(t,r,l,e),o.updater=mi,t.stateNode=o,o._reactInternals=t,bi(t,r,e,n),t=$a(null,t,r,!0,i,n)}else t.tag=0,La(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Bu(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===A)return 14}return 2}(o),e=Qo(o,e),i){case 0:t=Ba(null,t,o,e,n);break e;case 1:t=Ua(null,t,o,e,n);break e;case 11:t=za(null,t,o,e,n);break e;case 14:t=Ia(null,t,o,Qo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ba(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Ua(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 3:if(Va(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),fi(t,r,null,n),(r=t.memoizedState.element)===o)Wi(),t=nl(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Di=Wr(t.stateNode.containerInfo.firstChild),Ii=t,i=ji=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Hi.push(i);for(n=Ci(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else La(e,t,r,n),Wi();t=t.child}return t;case 5:return Mi(t),null===e&&Ui(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,Br(r,o)?l=null:null!==i&&Br(r,i)&&(t.flags|=16),Fa(e,t),La(e,t,l,n),t.child;case 6:return null===e&&Ui(t),null;case 13:return Qa(e,t,n);case 4:return Ni(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Si(t,null,r,n):La(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,za(e,t,r,o=t.elementType===r?o:Qo(r,o),n);case 7:return La(e,t,t.pendingProps,n),t.child;case 8:case 12:return La(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(uo(Yo,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0===(i=lr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!fo.current){t=nl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=ui(-1,n&-n)).tag=2,si(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ni(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}La(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(o=oi(o,i.unstable_observedBits)),t.flags|=1,La(e,t,r,n),t.child;case 14:return i=Qo(o=t.type,t.pendingProps),Ia(e,t,o,i=Qo(o.type,i),r,n);case 15:return Da(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Qo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,mo(r)?(e=!0,bo(t)):e=!1,ri(t,n),yi(t,r,o),bi(t,r,o,n),$a(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return ja(e,t,n)}throw Error(a(156,t.tag))},es.prototype.render=function(e){Yu(e,this._internalRoot,null,null)},es.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Yu(null,e,null,(function(){t[Xr]=null}))},tt=function(e){13===e.tag&&(cu(e,4,uu()),Ju(e,4))},nt=function(e){13===e.tag&&(cu(e,67108864,uu()),Ju(e,67108864))},rt=function(e){if(13===e.tag){var t=uu(),n=su(e);cu(e,n,t),Ju(e,n)}},ot=function(e,t){return t()},Pe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=no(r);if(!o)throw Error(a(90));X(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Me=vu,Ze=function(e,t,n,r,o){var i=Ol;Ol|=4;try{return Vo(98,e.bind(null,t,n,r,o))}finally{0===(Ol=i)&&($l(),Ho())}},Le=function(){0==(49&Ol)&&(function(){if(null!==eu){var e=eu;eu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,du(e,Bo())}))}Ho()}(),Nu())},ze=function(e,t){var n=Ol;Ol|=2;try{return e(t)}finally{0===(Ol=n)&&($l(),Ho())}};var os={Events:[eo,to,no,Ne,Ae,Nu,{current:!1}]},is={findFiberByHostInstance:Jr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},as={bundleType:is.bundleType,version:is.version,rendererPackageName:is.rendererPackageName,rendererConfig:is.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:k.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:is.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ls=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ls.isDisabled&&ls.supportsFiber)try{ko=ls.inject(as),xo=ls}catch(ve){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=os,t.createPortal=rs,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ol;if(0!=(48&n))return e(t);Ol|=1;try{if(e)return Vo(99,e.bind(null,t))}finally{Ol=n,Ho()}},t.hydrate=function(e,t,n){if(!ts(t))throw Error(a(200));return ns(null,e,t,!0,n)},t.render=function(e,t,n){if(!ts(t))throw Error(a(200));return ns(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!ts(e))throw Error(a(40));return!!e._reactRootContainer&&(yu((function(){ns(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xr]=null}))})),!0)},t.unstable_batchedUpdates=vu,t.unstable_createPortal=function(e,t){return rs(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!ts(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ns(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function k(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case l:case a:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function x(e){return k(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||k(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return k(e)===s},t.isContextProvider=function(e){return k(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return k(e)===d},t.isFragment=function(e){return k(e)===i},t.isLazy=function(e){return k(e)===v},t.isMemo=function(e){return k(e)===m},t.isPortal=function(e){return k(e)===o},t.isProfiler=function(e){return k(e)===l},t.isStrictMode=function(e){return k(e)===a},t.isSuspense=function(e){return k(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===l||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=k},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},5977:(e,t,n)=>{"use strict";n.d(t,{AW:()=>E,F0:()=>b,rs:()=>T,s6:()=>g,LX:()=>x,k6:()=>N});var r=n(1721),o=n(7294),i=n(5697),a=n.n(i),l=n(7531),u=1073741823,s="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const f=o.createContext||function(e,t){var n,i,l="__create-react-context-"+function(){var e="__global_unique_id__";return s[e]=(s[e]||0)+1}()+"__",f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}(0,r.Z)(n,e);var o=n.prototype;return o.getChildContext=function(){var e;return(e={})[l]=this.emitter,e},o.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,o=e.value;((i=r)===(a=o)?0!==i||1/i==1/a:i!=i&&a!=a)?n=0:(n="function"==typeof t?t(r,o):u,0!==(n|=0)&&this.emitter.set(e.value,n))}var i,a},o.render=function(){return this.props.children},n}(o.Component);f.childContextTypes=((n={})[l]=a().object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}(0,r.Z)(n,t);var o=n.prototype;return o.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?u:t},o.componentDidMount=function(){this.context[l]&&this.context[l].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?u:e},o.componentWillUnmount=function(){this.context[l]&&this.context[l].off(this.onUpdate)},o.getValue=function(){return this.context[l]?this.context[l].get():e},o.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(o.Component);return d.contextTypes=((i={})[l]=a().object,i),{Provider:f,Consumer:d}};var d=n(2177),p=n(7462),h=n(9658),m=n.n(h),v=(n(9864),n(3366)),y=(n(8679),function(e){var t=f();return t.displayName=e,t}("Router-History")),g=function(e){var t=f();return t.displayName=e,t}("Router"),b=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}(0,r.Z)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.createElement(g.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},o.createElement(y.Provider,{children:this.props.children||null,value:this.props.history}))},t}(o.Component);o.Component;o.Component;var w={},k=0;function x(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,o=n.exact,i=void 0!==o&&o,a=n.strict,l=void 0!==a&&a,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=w[n]||(w[n]={});if(r[e])return r[e];var o=[],i={regexp:m()(e,o,t),keys:o};return k<1e4&&(r[e]=i,k++),i}(n,{end:i,strict:l,sensitive:s}),o=r.regexp,a=r.keys,u=o.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),d=e===c;return i&&!d?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var E=function(e){function t(){return e.apply(this,arguments)||this}return(0,r.Z)(t,e),t.prototype.render=function(){var e=this;return o.createElement(g.Consumer,null,(function(t){t||(0,d.Z)(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?x(n.pathname,e.props):t.match,i=(0,p.Z)({},t,{location:n,match:r}),a=e.props,l=a.children,u=a.component,s=a.render;return Array.isArray(l)&&0===l.length&&(l=null),o.createElement(g.Provider,{value:i},i.match?l?"function"==typeof l?l(i):l:u?o.createElement(u,i):s?s(i):null:"function"==typeof l?l(i):null)}))},t}(o.Component);function S(e){return"/"===e.charAt(0)?e:"/"+e}function C(e,t){if(!e)return t;var n=S(e);return 0!==t.pathname.indexOf(n)?t:(0,p.Z)({},t,{pathname:t.pathname.substr(n.length)})}function R(e){return"string"==typeof e?e:(0,l.Ep)(e)}function P(e){return function(){(0,d.Z)(!1)}}function O(){}o.Component;var T=function(e){function t(){return e.apply(this,arguments)||this}return(0,r.Z)(t,e),t.prototype.render=function(){var e=this;return o.createElement(g.Consumer,null,(function(t){t||(0,d.Z)(!1);var n,r,i=e.props.location||t.location;return o.Children.forEach(e.props.children,(function(e){if(null==r&&o.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?x(i.pathname,(0,p.Z)({},e.props,{path:a})):t.match}})),r?o.cloneElement(n,{location:i,computedMatch:r}):null}))},t}(o.Component);var _=o.useContext;function N(){return _(y)}},6585:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},9658:(e,t,n)=>{var r=n(6585);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return l(i(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,l="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(l+=e.slice(a,p),a=p+f.length,d)l+=d[1];else{var h=e[a],m=n[2],v=n[3],y=n[4],g=n[5],b=n[6],w=n[7];l&&(r.push(l),l="");var k=null!=m&&null!=h&&h!==m,x="+"===b||"*"===b,E="?"===b||"*"===b,S=n[2]||c,C=y||g;r.push({name:v||i++,prefix:m||"",delimiter:S,optional:E,repeat:x,partial:k,asterisk:!!w,pattern:C?s(C):w?".*":"[^"+u(S)+"]+?"})}}return a<e.length&&(l+=e.substr(a)),l&&r.push(l),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),o=0;o<e.length;o++)"object"==typeof e[o]&&(n[o]=new RegExp("^(?:"+e[o].pattern+")$",f(t)));return function(t,o){for(var i="",l=t||{},u=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=l[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=u(d[p]),!n[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(d),!n[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)a+=u(s);else{var d=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),a+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=u(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},5251:(e,t,n)=>{"use strict";n(7418);var r=n(7294),o=60103;if(t.Fragment=60107,"function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),t.Fragment=i("react.fragment")}var a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l=Object.prototype.hasOwnProperty,u={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,i={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)l.call(t,r)&&!u.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:c,props:i,_owner:a.current}}t.jsx=s,t.jsxs=s},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var b=g.prototype=new y;b.constructor=g,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},k=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!x.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case i:u=!0}}if(u)return a=a(u=e),e=""===r?"."+R(u,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),P(a,t,n,"",(function(e){return e}))):null!=a&&(S(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+R(l=e[s],s);u+=P(l,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=P(l=l.value,t,n,c=r+R(l,s++),a);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var _={current:null};function N(){var e=_.current;if(null===e)throw Error(p(321));return e}var A={ReactCurrentDispatcher:_,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)k.call(t,c)&&!x.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},5893:(e,t,n)=>{"use strict";e.exports=n(5251)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){window.cancelAnimationFrame;window.requestAnimationFrame}var h=!1,m=null,v=-1,y=5,g=0;t.unstable_shouldYield=function(){return t.unstable_now()>=g},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e||(y=0<e?Math.floor(1e3/e):5)};var b=new MessageChannel,w=b.port2;b.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();g=e+y;try{m(!0,e)?w.postMessage(null):(h=!1,m=null)}catch(e){throw w.postMessage(null),e}}else h=!1},n=function(e){m=e,h||(h=!0,w.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},o=function(){p(v),v=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<S(o,t)))break e;e[r]=t,e[n]=o,n=r}}function x(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>S(a,n))void 0!==u&&0>S(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>S(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],R=[],P=1,O=null,T=3,_=!1,N=!1,A=!1;function M(e){for(var t=x(R);null!==t;){if(null===t.callback)E(R);else{if(!(t.startTime<=e))break;E(R),t.sortIndex=t.expirationTime,k(C,t)}t=x(R)}}function Z(e){if(A=!1,M(e),!N)if(null!==x(C))N=!0,n(L);else{var t=x(R);null!==t&&r(Z,t.startTime-e)}}function L(e,n){N=!1,A&&(A=!1,o()),_=!0;var i=T;try{for(M(n),O=x(C);null!==O&&(!(O.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=O.callback;if("function"==typeof a){O.callback=null,T=O.priorityLevel;var l=a(O.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?O.callback=l:O===x(C)&&E(C),M(n)}else E(C);O=x(C)}if(null!==O)var u=!0;else{var s=x(R);null!==s&&r(Z,s.startTime-n),u=!1}return u}finally{O=null,T=i,_=!1}}var z=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){N||_||(N=!0,n(L))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return x(C)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=z,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch("object"==typeof a&&null!==a?a="number"==typeof(a=a.delay)&&0<a?l+a:l:a=l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:P++,callback:i,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>l?(e.sortIndex=a,k(R,e),null===x(C)&&e===x(R)&&(A?o():A=!0,r(Z,a-l))):(e.sortIndex=u,k(C,e),N||_||(N=!0,n(L))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3379:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],l=0;l<e.length;l++){var u=e[l],s=r.base?u[0]+r.base:u[0],c=i[s]||0,f="".concat(s," ").concat(c);i[s]=c+1;var d=n(f),p={css:u[1],media:u[2],sourceMap:u[3]};-1!==d?(t[d].references++,t[d].updater(p)):t.push({identifier:f,updater:o(p,r),references:1}),a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var l=n(i[a]);t[l].references--}for(var u=r(e,o),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=u}}},569:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},9216:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t),t}},3565:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7795:e=>{"use strict";e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r=n.css,o=n.media,i=n.sourceMap;o?e.setAttribute("media",o):e.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},4589:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},2177:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r="Invariant failed";const o=function(e,t){if(!e)throw new Error(r)}},7220:(e,t,n)=>{"use strict";e.exports=n.p+"85a7c6699bc91205dce5.png"},7749:(e,t,n)=>{"use strict";e.exports=n.p+"bbb4ca5df6c6540f4af8.otf"},9283:(e,t,n)=>{"use strict";e.exports=n.p+"bccfd5fe964d7e12ae44.woff"},4325:(e,t,n)=>{"use strict";e.exports=n.p+"a4ecc3f7a43f7d43ce24.woff2"},3976:(e,t,n)=>{"use strict";e.exports=n.p+"7d4ce2f6f92cffc70600.otf"},2708:(e,t,n)=>{"use strict";e.exports=n.p+"45736342560b8c933202.woff"},6931:(e,t,n)=>{"use strict";e.exports=n.p+"e2557c2be18ddd169ee9.woff2"},5844:(e,t,n)=>{"use strict";e.exports=n.p+"7def03a7e5e60c5e0704.otf"},812:(e,t,n)=>{"use strict";e.exports=n.p+"865a70c3c4af55e98eb5.woff"},822:(e,t,n)=>{"use strict";e.exports=n.p+"e5d0c16f11ebac0c56d2.woff2"},7804:(e,t,n)=>{"use strict";e.exports=n.p+"bf54b090356010039bab.otf"},9652:(e,t,n)=>{"use strict";e.exports=n.p+"957d49ad23632e4a9349.woff"},8404:(e,t,n)=>{"use strict";e.exports=n.p+"e95adf0e9aeddac43f42.woff2"},907:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}n.d(t,{Z:()=>r})},3144:(e,t,n)=>{"use strict";function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function o(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e}n.d(t,{Z:()=>o})},4942:(e,t,n)=>{"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}n.d(t,{Z:()=>r})},7462:(e,t,n)=>{"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,{Z:()=>r})},1721:(e,t,n)=>{"use strict";function r(e,t){return(r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}n.d(t,{Z:()=>o})},5987:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(3366);function o(e,t){if(null==e)return{};var n,o,i=(0,r.Z)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}},3366:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}n.d(t,{Z:()=>r})},885:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(181);function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(e,t)||(0,r.Z)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},2982:(e,t,n)=>{"use strict";n.d(t,{Z:()=>i});var r=n(907);var o=n(181);function i(e){return function(e){if(Array.isArray(e))return(0,r.Z)(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||(0,o.Z)(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},1002:(e,t,n)=>{"use strict";function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}n.d(t,{Z:()=>r})},181:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=n(907);function o(e,t){if(e){if("string"==typeof e)return(0,r.Z)(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?(0,r.Z)(e,t):void 0}}}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.m=n,o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.f={},o.e=e=>Promise.all(Object.keys(o.f).reduce(((t,n)=>(o.f[n](e,t),t)),[])),o.u=e=>e+".bundle.js",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),e={},t="roundin_homepage:",o.l=(n,r,i,a)=>{if(e[n])e[n].push(r);else{var l,u;if(void 0!==i)for(var s=document.getElementsByTagName("script"),c=0;c<s.length;c++){var f=s[c];if(f.getAttribute("src")==n||f.getAttribute("data-webpack")==t+i){l=f;break}}l||(u=!0,(l=document.createElement("script")).charset="utf-8",l.timeout=120,o.nc&&l.setAttribute("nonce",o.nc),l.setAttribute("data-webpack",t+i),l.src=n),e[n]=[r];var d=(t,r)=>{l.onerror=l.onload=null,clearTimeout(p);var o=e[n];if(delete e[n],l.parentNode&&l.parentNode.removeChild(l),o&&o.forEach((e=>e(r))),t)return t(r)},p=setTimeout(d.bind(null,void 0,{type:"timeout",target:l}),12e4);l.onerror=d.bind(null,l.onerror),l.onload=d.bind(null,l.onload),u&&document.head.appendChild(l)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={179:0};o.f.j=(t,n)=>{var r=o.o(e,t)?e[t]:void 0;if(0!==r)if(r)n.push(r[2]);else{var i=new Promise(((n,o)=>r=e[t]=[n,o]));n.push(r[2]=i);var a=o.p+o.u(t),l=new Error;o.l(a,(n=>{if(o.o(e,t)&&(0!==(r=e[t])&&(e[t]=void 0),r)){var i=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;l.message="Loading chunk "+t+" failed.\n("+i+": "+a+")",l.name="ChunkLoadError",l.type=i,l.request=a,r[1](l)}}),"chunk-"+t,t)}};var t=(t,n)=>{var r,i,[a,l,u]=n,s=0;if(a.some((t=>0!==e[t]))){for(r in l)o.o(l,r)&&(o.m[r]=l[r]);if(u)u(o)}for(t&&t(n);s<a.length;s++)i=a[s],o.o(e,i)&&e[i]&&e[i][0](),e[a[s]]=0},n=self.webpackChunkroundin_homepage=self.webpackChunkroundin_homepage||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})(),(()=>{"use strict";var e=o(7294),t=o(3935),n=o(3379),r=o.n(n),i=o(7795),a=o.n(i),l=o(569),u=o.n(l),s=o(3565),c=o.n(s),f=o(9216),d=o.n(f),p=o(4589),h=o.n(p),m=o(1424),v={};v.styleTagTransform=h(),v.setAttributes=c(),v.insert=u().bind(null,"head"),v.domAPI=a(),v.insertStyleElement=d();r()(m.Z,v);m.Z&&m.Z.locals&&m.Z.locals;var y=o(5977),g=o(1120),b=o(7462),w=o(5987),k=(o(5697),o(6010)),x=o(4670),E=o(3871),S=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,a=void 0===i?"div":i,l=t.square,u=void 0!==l&&l,s=t.elevation,c=void 0===s?1:s,f=t.variant,d=void 0===f?"elevation":f,p=(0,w.Z)(t,["classes","className","component","square","elevation","variant"]);return e.createElement(a,(0,b.Z)({className:(0,k.Z)(r.root,o,"outlined"===d?r.outlined:r["elevation".concat(c)],!u&&r.rounded),ref:n},p))}));const C=(0,x.Z)((function(e){var t={};return e.shadows.forEach((function(e,n){t["elevation".concat(n)]={boxShadow:e}})),(0,b.Z)({root:{backgroundColor:e.palette.background.paper,color:e.palette.text.primary,transition:e.transitions.create("box-shadow")},rounded:{borderRadius:e.shape.borderRadius},outlined:{border:"1px solid ".concat(e.palette.divider)}},t)}),{name:"MuiPaper"})(S);var R=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.color,a=void 0===i?"primary":i,l=t.position,u=void 0===l?"fixed":l,s=(0,w.Z)(t,["classes","className","color","position"]);return e.createElement(C,(0,b.Z)({square:!0,component:"header",elevation:4,className:(0,k.Z)(r.root,r["position".concat((0,E.Z)(u))],r["color".concat((0,E.Z)(a))],o,"fixed"===u&&"mui-fixed"),ref:n},s))}));const P=(0,x.Z)((function(e){var t="light"===e.palette.type?e.palette.grey[100]:e.palette.grey[900];return{root:{display:"flex",flexDirection:"column",width:"100%",boxSizing:"border-box",zIndex:e.zIndex.appBar,flexShrink:0},positionFixed:{position:"fixed",top:0,left:"auto",right:0,"@media print":{position:"absolute"}},positionAbsolute:{position:"absolute",top:0,left:"auto",right:0},positionSticky:{position:"sticky",top:0,left:"auto",right:0},positionStatic:{position:"static"},positionRelative:{position:"relative"},colorDefault:{backgroundColor:t,color:e.palette.getContrastText(t)},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorInherit:{color:"inherit"},colorTransparent:{backgroundColor:"transparent",color:"inherit"}}}),{name:"MuiAppBar"})(R);var O=o(4942),T=e.forwardRef((function(t,n){var r=t.classes,o=t.className,i=t.component,a=void 0===i?"div":i,l=t.disableGutters,u=void 0!==l&&l,s=t.variant,c=void 0===s?"regular":s,f=(0,w.Z)(t,["classes","className","component","disableGutters","variant"]);return e.createElement(a,(0,b.Z)({className:(0,k.Z)(r.root,r[c],o,!u&&r.gutters),ref:n},f))}));const _=(0,x.Z)((function(e){return{root:{position:"relative",display:"flex",alignItems:"center"},gutters:(0,O.Z)({paddingLeft:e.spacing(2),paddingRight:e.spacing(2)},e.breakpoints.up("sm"),{paddingLeft:e.spacing(3),paddingRight:e.spacing(3)}),regular:e.mixins.toolbar,dense:{minHeight:48}}}),{name:"MuiToolbar"})(T);var N=o(2318),A=o(9693),M=o(3834),Z=o(5192),L=o(4896),z=o(2982);function I(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function D(){return(D=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function j(e,t){return(j=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function F(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,j(e,t)}const B=e.createContext(null);function U(t,n){var r=Object.create(null);return t&&e.Children.map(t,(function(e){return e})).forEach((function(t){r[t.key]=function(t){return n&&(0,e.isValidElement)(t)?n(t):t}(t)})),r}function $(e,t,n){return null!=n[t]?n[t]:e.props[t]}function V(t,n,r){var o=U(t.children),i=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),i=[];for(var a in e)a in t?i.length&&(o[a]=i,i=[]):i.push(a);var l={};for(var u in t){if(o[u])for(r=0;r<o[u].length;r++){var s=o[u][r];l[o[u][r]]=n(s)}l[u]=n(u)}for(r=0;r<i.length;r++)l[i[r]]=n(i[r]);return l}(n,o);return Object.keys(i).forEach((function(a){var l=i[a];if((0,e.isValidElement)(l)){var u=a in n,s=a in o,c=n[a],f=(0,e.isValidElement)(c)&&!c.props.in;!s||u&&!f?s||!u||f?s&&u&&(0,e.isValidElement)(c)&&(i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:c.props.in,exit:$(l,"exit",t),enter:$(l,"enter",t)})):i[a]=(0,e.cloneElement)(l,{in:!1}):i[a]=(0,e.cloneElement)(l,{onExited:r.bind(null,l),in:!0,exit:$(l,"exit",t),enter:$(l,"enter",t)})}})),i}var W=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},H=function(t){function n(e,n){var r,o=(r=t.call(this,e,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}F(n,t);var r=n.prototype;return r.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},r.componentWillUnmount=function(){this.mounted=!1},n.getDerivedStateFromProps=function(t,n){var r,o,i=n.children,a=n.handleExited;return{children:n.firstRender?(r=t,o=a,U(r.children,(function(t){return(0,e.cloneElement)(t,{onExited:o.bind(null,t),in:!0,appear:$(t,"appear",r),enter:$(t,"enter",r),exit:$(t,"exit",r)})}))):V(t,i,a),firstRender:!1}},r.handleExited=function(e,t){var n=U(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=D({},t.children);return delete n[e.key],{children:n}})))},r.render=function(){var t=this.props,n=t.component,r=t.childFactory,o=I(t,["component","childFactory"]),i=this.state.contextValue,a=W(this.state.children).map(r);return delete o.appear,delete o.enter,delete o.exit,null===n?e.createElement(B.Provider,{value:i},a):e.createElement(B.Provider,{value:i},e.createElement(n,o,a))},n}(e.Component);H.propTypes={},H.defaultProps={component:"div",childFactory:function(e){return e}};const K=H;var q="undefined"==typeof window?e.useEffect:e.useLayoutEffect;const Q=function(t){var n=t.classes,r=t.pulsate,o=void 0!==r&&r,i=t.rippleX,a=t.rippleY,l=t.rippleSize,u=t.in,s=t.onExited,c=void 0===s?function(){}:s,f=t.timeout,d=e.useState(!1),p=d[0],h=d[1],m=(0,k.Z)(n.ripple,n.rippleVisible,o&&n.ripplePulsate),v={width:l,height:l,top:-l/2+a,left:-l/2+i},y=(0,k.Z)(n.child,p&&n.childLeaving,o&&n.childPulsate),g=(0,Z.Z)(c);return q((function(){if(!u){h(!0);var e=setTimeout(g,f);return function(){clearTimeout(e)}}}),[g,u,f]),e.createElement("span",{className:m,style:v},e.createElement("span",{className:y}))};var Y=e.forwardRef((function(t,n){var r=t.center,o=void 0!==r&&r,i=t.classes,a=t.className,l=(0,w.Z)(t,["center","classes","className"]),u=e.useState([]),s=u[0],c=u[1],f=e.useRef(0),d=e.useRef(null);e.useEffect((function(){d.current&&(d.current(),d.current=null)}),[s]);var p=e.useRef(!1),h=e.useRef(null),m=e.useRef(null),v=e.useRef(null);e.useEffect((function(){return function(){clearTimeout(h.current)}}),[]);var y=e.useCallback((function(t){var n=t.pulsate,r=t.rippleX,o=t.rippleY,a=t.rippleSize,l=t.cb;c((function(t){return[].concat((0,z.Z)(t),[e.createElement(Q,{key:f.current,classes:i,timeout:550,pulsate:n,rippleX:r,rippleY:o,rippleSize:a})])})),f.current+=1,d.current=l}),[i]),g=e.useCallback((function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2?arguments[2]:void 0,r=t.pulsate,i=void 0!==r&&r,a=t.center,l=void 0===a?o||t.pulsate:a,u=t.fakeElement,s=void 0!==u&&u;if("mousedown"===e.type&&p.current)p.current=!1;else{"touchstart"===e.type&&(p.current=!0);var c,f,d,g=s?null:v.current,b=g?g.getBoundingClientRect():{width:0,height:0,left:0,top:0};if(l||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)c=Math.round(b.width/2),f=Math.round(b.height/2);else{var w=e.touches?e.touches[0]:e,k=w.clientX,x=w.clientY;c=Math.round(k-b.left),f=Math.round(x-b.top)}if(l)(d=Math.sqrt((2*Math.pow(b.width,2)+Math.pow(b.height,2))/3))%2==0&&(d+=1);else{var E=2*Math.max(Math.abs((g?g.clientWidth:0)-c),c)+2,S=2*Math.max(Math.abs((g?g.clientHeight:0)-f),f)+2;d=Math.sqrt(Math.pow(E,2)+Math.pow(S,2))}e.touches?null===m.current&&(m.current=function(){y({pulsate:i,rippleX:c,rippleY:f,rippleSize:d,cb:n})},h.current=setTimeout((function(){m.current&&(m.current(),m.current=null)}),80)):y({pulsate:i,rippleX:c,rippleY:f,rippleSize:d,cb:n})}}),[o,y]),x=e.useCallback((function(){g({},{pulsate:!0})}),[g]),E=e.useCallback((function(e,t){if(clearTimeout(h.current),"touchend"===e.type&&m.current)return e.persist(),m.current(),m.current=null,void(h.current=setTimeout((function(){E(e,t)})));m.current=null,c((function(e){return e.length>0?e.slice(1):e})),d.current=t}),[]);return e.useImperativeHandle(n,(function(){return{pulsate:x,start:g,stop:E}}),[x,g,E]),e.createElement("span",(0,b.Z)({className:(0,k.Z)(i.root,a),ref:v},l),e.createElement(K,{component:null,exit:!0},s))}));const X=(0,x.Z)((function(e){return{root:{overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"},ripple:{opacity:0,position:"absolute"},rippleVisible:{opacity:.3,transform:"scale(1)",animation:"$enter ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},ripplePulsate:{animationDuration:"".concat(e.transitions.duration.shorter,"ms")},child:{opacity:1,display:"block",width:"100%",height:"100%",borderRadius:"50%",backgroundColor:"currentColor"},childLeaving:{opacity:0,animation:"$exit ".concat(550,"ms ").concat(e.transitions.easing.easeInOut)},childPulsate:{position:"absolute",left:0,top:0,animation:"$pulsate 2500ms ".concat(e.transitions.easing.easeInOut," 200ms infinite")},"@keyframes enter":{"0%":{transform:"scale(0)",opacity:.1},"100%":{transform:"scale(1)",opacity:.3}},"@keyframes exit":{"0%":{opacity:1},"100%":{opacity:0}},"@keyframes pulsate":{"0%":{transform:"scale(1)"},"50%":{transform:"scale(0.92)"},"100%":{transform:"scale(1)"}}}}),{flip:!1,name:"MuiTouchRipple"})(e.memo(Y));var G=e.forwardRef((function(n,r){var o=n.action,i=n.buttonRef,a=n.centerRipple,l=void 0!==a&&a,u=n.children,s=n.classes,c=n.className,f=n.component,d=void 0===f?"button":f,p=n.disabled,h=void 0!==p&&p,m=n.disableRipple,v=void 0!==m&&m,y=n.disableTouchRipple,g=void 0!==y&&y,x=n.focusRipple,E=void 0!==x&&x,S=n.focusVisibleClassName,C=n.onBlur,R=n.onClick,P=n.onFocus,O=n.onFocusVisible,T=n.onKeyDown,_=n.onKeyUp,N=n.onMouseDown,A=n.onMouseLeave,z=n.onMouseUp,I=n.onTouchEnd,D=n.onTouchMove,j=n.onTouchStart,F=n.onDragLeave,B=n.tabIndex,U=void 0===B?0:B,$=n.TouchRippleProps,V=n.type,W=void 0===V?"button":V,H=(0,w.Z)(n,["action","buttonRef","centerRipple","children","classes","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","onBlur","onClick","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","onDragLeave","tabIndex","TouchRippleProps","type"]),K=e.useRef(null);var q=e.useRef(null),Q=e.useState(!1),Y=Q[0],G=Q[1];h&&Y&&G(!1);var J=(0,L.Z)(),ee=J.isFocusVisible,te=J.onBlurVisible,ne=J.ref;function re(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:g;return(0,Z.Z)((function(r){return t&&t(r),!n&&q.current&&q.current[e](r),!0}))}e.useImperativeHandle(o,(function(){return{focusVisible:function(){G(!0),K.current.focus()}}}),[]),e.useEffect((function(){Y&&E&&!v&&q.current.pulsate()}),[v,E,Y]);var oe=re("start",N),ie=re("stop",F),ae=re("stop",z),le=re("stop",(function(e){Y&&e.preventDefault(),A&&A(e)})),ue=re("start",j),se=re("stop",I),ce=re("stop",D),fe=re("stop",(function(e){Y&&(te(e),G(!1)),C&&C(e)}),!1),de=(0,Z.Z)((function(e){K.current||(K.current=e.currentTarget),ee(e)&&(G(!0),O&&O(e)),P&&P(e)})),pe=function(){var e=t.findDOMNode(K.current);return d&&"button"!==d&&!("A"===e.tagName&&e.href)},he=e.useRef(!1),me=(0,Z.Z)((function(e){E&&!he.current&&Y&&q.current&&" "===e.key&&(he.current=!0,e.persist(),q.current.stop(e,(function(){q.current.start(e)}))),e.target===e.currentTarget&&pe()&&" "===e.key&&e.preventDefault(),T&&T(e),e.target===e.currentTarget&&pe()&&"Enter"===e.key&&!h&&(e.preventDefault(),R&&R(e))})),ve=(0,Z.Z)((function(e){E&&" "===e.key&&q.current&&Y&&!e.defaultPrevented&&(he.current=!1,e.persist(),q.current.stop(e,(function(){q.current.pulsate(e)}))),_&&_(e),R&&e.target===e.currentTarget&&pe()&&" "===e.key&&!e.defaultPrevented&&R(e)})),ye=d;"button"===ye&&H.href&&(ye="a");var ge={};"button"===ye?(ge.type=W,ge.disabled=h):("a"===ye&&H.href||(ge.role="button"),ge["aria-disabled"]=h);var be=(0,M.Z)(i,r),we=(0,M.Z)(ne,K),ke=(0,M.Z)(be,we),xe=e.useState(!1),Ee=xe[0],Se=xe[1];e.useEffect((function(){Se(!0)}),[]);var Ce=Ee&&!v&&!h;return e.createElement(ye,(0,b.Z)({className:(0,k.Z)(s.root,c,Y&&[s.focusVisible,S],h&&s.disabled),onBlur:fe,onClick:R,onFocus:de,onKeyDown:me,onKeyUp:ve,onMouseDown:oe,onMouseLeave:le,onMouseUp:ae,onDragLeave:ie,onTouchEnd:se,onTouchMove:ce,onTouchStart:ue,ref:ke,tabIndex:h?-1:U},ge,H),u,Ce?e.createElement(X,(0,b.Z)({ref:q,center:l},$)):null)}));const J=(0,x.Z)({root:{display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle","-moz-appearance":"none","-webkit-appearance":"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},"&$disabled":{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}},disabled:{},focusVisible:{}},{name:"MuiButtonBase"})(G);var ee=e.forwardRef((function(t,n){var r=t.edge,o=void 0!==r&&r,i=t.children,a=t.classes,l=t.className,u=t.color,s=void 0===u?"default":u,c=t.disabled,f=void 0!==c&&c,d=t.disableFocusRipple,p=void 0!==d&&d,h=t.size,m=void 0===h?"medium":h,v=(0,w.Z)(t,["edge","children","classes","className","color","disabled","disableFocusRipple","size"]);return e.createElement(J,(0,b.Z)({className:(0,k.Z)(a.root,l,"default"!==s&&a["color".concat((0,E.Z)(s))],f&&a.disabled,"small"===m&&a["size".concat((0,E.Z)(m))],{start:a.edgeStart,end:a.edgeEnd}[o]),centerRipple:!0,focusRipple:!p,disabled:f,ref:n},v),e.createElement("span",{className:a.label},i))}));const te=(0,x.Z)((function(e){return{root:{textAlign:"center",flex:"0 0 auto",fontSize:e.typography.pxToRem(24),padding:12,borderRadius:"50%",overflow:"visible",color:e.palette.action.active,transition:e.transitions.create("background-color",{duration:e.transitions.duration.shortest}),"&:hover":{backgroundColor:(0,A.Fq)(e.palette.action.active,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}},"&$disabled":{backgroundColor:"transparent",color:e.palette.action.disabled}},edgeStart:{marginLeft:-12,"$sizeSmall&":{marginLeft:-3}},edgeEnd:{marginRight:-12,"$sizeSmall&":{marginRight:-3}},colorInherit:{color:"inherit"},colorPrimary:{color:e.palette.primary.main,"&:hover":{backgroundColor:(0,A.Fq)(e.palette.primary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},colorSecondary:{color:e.palette.secondary.main,"&:hover":{backgroundColor:(0,A.Fq)(e.palette.secondary.main,e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:"transparent"}}},disabled:{},sizeSmall:{padding:3,fontSize:e.typography.pxToRem(18)},label:{width:"100%",display:"flex",alignItems:"inherit",justifyContent:"inherit"}}}),{name:"MuiIconButton"})(ee);var ne=o(8884),re=o(8825),oe=e.forwardRef((function(t,n){var r=t.anchorOrigin,o=void 0===r?{vertical:"top",horizontal:"right"}:r,i=t.badgeContent,a=t.children,l=t.classes,u=t.className,s=t.color,c=void 0===s?"default":s,f=t.component,d=void 0===f?"span":f,p=t.invisible,h=t.max,m=void 0===h?99:h,v=t.overlap,y=void 0===v?"rectangle":v,g=t.showZero,x=void 0!==g&&g,S=t.variant,C=void 0===S?"standard":S,R=(0,w.Z)(t,["anchorOrigin","badgeContent","children","classes","className","color","component","invisible","max","overlap","showZero","variant"]),P=p;null==p&&(0===i&&!x||null==i&&"dot"!==C)&&(P=!0);var O="";return"dot"!==C&&(O=i>m?"".concat(m,"+"):i),e.createElement(d,(0,b.Z)({className:(0,k.Z)(l.root,u),ref:n},R),a,e.createElement("span",{className:(0,k.Z)(l.badge,l["".concat(o.horizontal).concat((0,E.Z)(o.vertical),"}")],l["anchorOrigin".concat((0,E.Z)(o.vertical)).concat((0,E.Z)(o.horizontal)).concat((0,E.Z)(y))],"default"!==c&&l["color".concat((0,E.Z)(c))],P&&l.invisible,"dot"===C&&l.dot)},O))}));const ie=(0,x.Z)((function(e){return{root:{position:"relative",display:"inline-flex",verticalAlign:"middle",flexShrink:0},badge:{display:"flex",flexDirection:"row",flexWrap:"wrap",justifyContent:"center",alignContent:"center",alignItems:"center",position:"absolute",boxSizing:"border-box",fontFamily:e.typography.fontFamily,fontWeight:e.typography.fontWeightMedium,fontSize:e.typography.pxToRem(12),minWidth:20,lineHeight:1,padding:"0 6px",height:20,borderRadius:10,zIndex:1,transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.enteringScreen})},colorPrimary:{backgroundColor:e.palette.primary.main,color:e.palette.primary.contrastText},colorSecondary:{backgroundColor:e.palette.secondary.main,color:e.palette.secondary.contrastText},colorError:{backgroundColor:e.palette.error.main,color:e.palette.error.contrastText},dot:{borderRadius:4,height:8,minWidth:8,padding:0},anchorOriginTopRightRectangle:{top:0,right:0,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%","&$invisible":{transform:"scale(0) translate(50%, -50%)"}},anchorOriginTopRightRectangular:{top:0,right:0,transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%","&$invisible":{transform:"scale(0) translate(50%, -50%)"}},anchorOriginBottomRightRectangle:{bottom:0,right:0,transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%","&$invisible":{transform:"scale(0) translate(50%, 50%)"}},anchorOriginBottomRightRectangular:{bottom:0,right:0,transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%","&$invisible":{transform:"scale(0) translate(50%, 50%)"}},anchorOriginTopLeftRectangle:{top:0,left:0,transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%","&$invisible":{transform:"scale(0) translate(-50%, -50%)"}},anchorOriginTopLeftRectangular:{top:0,left:0,transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%","&$invisible":{transform:"scale(0) translate(-50%, -50%)"}},anchorOriginBottomLeftRectangle:{bottom:0,left:0,transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%","&$invisible":{transform:"scale(0) translate(-50%, 50%)"}},anchorOriginBottomLeftRectangular:{bottom:0,left:0,transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%","&$invisible":{transform:"scale(0) translate(-50%, 50%)"}},anchorOriginTopRightCircle:{top:"14%",right:"14%",transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%","&$invisible":{transform:"scale(0) translate(50%, -50%)"}},anchorOriginTopRightCircular:{top:"14%",right:"14%",transform:"scale(1) translate(50%, -50%)",transformOrigin:"100% 0%","&$invisible":{transform:"scale(0) translate(50%, -50%)"}},anchorOriginBottomRightCircle:{bottom:"14%",right:"14%",transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%","&$invisible":{transform:"scale(0) translate(50%, 50%)"}},anchorOriginBottomRightCircular:{bottom:"14%",right:"14%",transform:"scale(1) translate(50%, 50%)",transformOrigin:"100% 100%","&$invisible":{transform:"scale(0) translate(50%, 50%)"}},anchorOriginTopLeftCircle:{top:"14%",left:"14%",transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%","&$invisible":{transform:"scale(0) translate(-50%, -50%)"}},anchorOriginTopLeftCircular:{top:"14%",left:"14%",transform:"scale(1) translate(-50%, -50%)",transformOrigin:"0% 0%","&$invisible":{transform:"scale(0) translate(-50%, -50%)"}},anchorOriginBottomLeftCircle:{bottom:"14%",left:"14%",transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%","&$invisible":{transform:"scale(0) translate(-50%, 50%)"}},anchorOriginBottomLeftCircular:{bottom:"14%",left:"14%",transform:"scale(1) translate(-50%, 50%)",transformOrigin:"0% 100%","&$invisible":{transform:"scale(0) translate(-50%, 50%)"}},invisible:{transition:e.transitions.create("transform",{easing:e.transitions.easing.easeInOut,duration:e.transitions.duration.leavingScreen})}}}),{name:"MuiBadge"})(oe);var ae=o(159),le=o(3869),ue=o(626),se=o(4236);var ce="undefined"!=typeof window?e.useLayoutEffect:e.useEffect;const fe=e.forwardRef((function(n,r){var o=n.children,i=n.container,a=n.disablePortal,l=void 0!==a&&a,u=n.onRendered,s=e.useState(null),c=s[0],f=s[1],d=(0,M.Z)(e.isValidElement(o)?o.ref:null,r);return ce((function(){l||f(function(e){return e="function"==typeof e?e():e,t.findDOMNode(e)}(i)||document.body)}),[i,l]),ce((function(){if(c&&!l)return(0,se.Z)(r,c),function(){(0,se.Z)(r,null)}}),[r,c,l]),ce((function(){u&&(c||l)&&u()}),[u,c,l]),l?e.isValidElement(o)?e.cloneElement(o,{ref:d}):o:c?t.createPortal(o,c):c}));var de=o(2568),pe=o(2781);var he=o(3144);var me=o(713);function ve(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function ye(e){return parseInt(window.getComputedStyle(e)["padding-right"],10)||0}function ge(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],o=arguments.length>4?arguments[4]:void 0,i=[t,n].concat((0,z.Z)(r)),a=["TEMPLATE","SCRIPT","STYLE"];[].forEach.call(e.children,(function(e){1===e.nodeType&&-1===i.indexOf(e)&&-1===a.indexOf(e.tagName)&&ve(e,o)}))}function be(e,t){var n=-1;return e.some((function(e,r){return!!t(e)&&(n=r,!0)})),n}function we(e,t){var n,r=[],o=[],i=e.container;if(!t.disableScrollLock){if(function(e){var t=(0,ue.Z)(e);return t.body===e?(0,me.Z)(t).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(i)){var a=function(){var e=document.createElement("div");e.style.width="99px",e.style.height="99px",e.style.position="absolute",e.style.top="-9999px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}();r.push({value:i.style.paddingRight,key:"padding-right",el:i}),i.style["padding-right"]="".concat(ye(i)+a,"px"),n=(0,ue.Z)(i).querySelectorAll(".mui-fixed"),[].forEach.call(n,(function(e){o.push(e.style.paddingRight),e.style.paddingRight="".concat(ye(e)+a,"px")}))}var l=i.parentElement,u="HTML"===l.nodeName&&"scroll"===window.getComputedStyle(l)["overflow-y"]?l:i;r.push({value:u.style.overflow,key:"overflow",el:u}),u.style.overflow="hidden"}return function(){n&&[].forEach.call(n,(function(e,t){o[t]?e.style.paddingRight=o[t]:e.style.removeProperty("padding-right")})),r.forEach((function(e){var t=e.value,n=e.el,r=e.key;t?n.style.setProperty(r,t):n.style.removeProperty(r)}))}}var ke=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modals=[],this.containers=[]}return(0,he.Z)(e,[{key:"add",value:function(e,t){var n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&ve(e.modalRef,!1);var r=function(e){var t=[];return[].forEach.call(e.children,(function(e){e.getAttribute&&"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);ge(t,e.mountNode,e.modalRef,r,!0);var o=be(this.containers,(function(e){return e.container===t}));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblingNodes:r}),n)}},{key:"mount",value:function(e,t){var n=be(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];r.restore||(r.restore=we(r,t))}},{key:"remove",value:function(e){var t=this.modals.indexOf(e);if(-1===t)return t;var n=be(this.containers,(function(t){return-1!==t.modals.indexOf(e)})),r=this.containers[n];if(r.modals.splice(r.modals.indexOf(e),1),this.modals.splice(t,1),0===r.modals.length)r.restore&&r.restore(),e.modalRef&&ve(e.modalRef,!0),ge(r.container,e.mountNode,e.modalRef,r.hiddenSiblingNodes,!1),this.containers.splice(n,1);else{var o=r.modals[r.modals.length-1];o.modalRef&&ve(o.modalRef,!1)}return t}},{key:"isTopModal",value:function(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}}]),e}();const xe=function(n){var r=n.children,o=n.disableAutoFocus,i=void 0!==o&&o,a=n.disableEnforceFocus,l=void 0!==a&&a,u=n.disableRestoreFocus,s=void 0!==u&&u,c=n.getDoc,f=n.isEnabled,d=n.open,p=e.useRef(),h=e.useRef(null),m=e.useRef(null),v=e.useRef(),y=e.useRef(null),g=e.useCallback((function(e){y.current=t.findDOMNode(e)}),[]),b=(0,M.Z)(r.ref,g),w=e.useRef();return e.useEffect((function(){w.current=d}),[d]),!w.current&&d&&"undefined"!=typeof window&&(v.current=c().activeElement),e.useEffect((function(){if(d){var e=(0,ue.Z)(y.current);i||!y.current||y.current.contains(e.activeElement)||(y.current.hasAttribute("tabIndex")||y.current.setAttribute("tabIndex",-1),y.current.focus());var t=function(){null!==y.current&&(e.hasFocus()&&!l&&f()&&!p.current?y.current&&!y.current.contains(e.activeElement)&&y.current.focus():p.current=!1)},n=function(t){!l&&f()&&9===t.keyCode&&e.activeElement===y.current&&(p.current=!0,t.shiftKey?m.current.focus():h.current.focus())};e.addEventListener("focus",t,!0),e.addEventListener("keydown",n,!0);var r=setInterval((function(){t()}),50);return function(){clearInterval(r),e.removeEventListener("focus",t,!0),e.removeEventListener("keydown",n,!0),s||(v.current&&v.current.focus&&v.current.focus(),v.current=null)}}}),[i,l,s,f,d]),e.createElement(e.Fragment,null,e.createElement("div",{tabIndex:0,ref:h,"data-test":"sentinelStart"}),e.cloneElement(r,{ref:b}),e.createElement("div",{tabIndex:0,ref:m,"data-test":"sentinelEnd"}))};var Ee={root:{zIndex:-1,position:"fixed",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}};const Se=e.forwardRef((function(t,n){var r=t.invisible,o=void 0!==r&&r,i=t.open,a=(0,w.Z)(t,["invisible","open"]);return i?e.createElement("div",(0,b.Z)({"aria-hidden":!0,ref:n},a,{style:(0,b.Z)({},Ee.root,o?Ee.invisible:{},a.style)})):null}));var Ce=new ke;const Re=e.forwardRef((function(n,r){var o=(0,ae.Z)(),i=(0,le.Z)({name:"MuiModal",props:(0,b.Z)({},n),theme:o}),a=i.BackdropComponent,l=void 0===a?Se:a,u=i.BackdropProps,s=i.children,c=i.closeAfterTransition,f=void 0!==c&&c,d=i.container,p=i.disableAutoFocus,h=void 0!==p&&p,m=i.disableBackdropClick,v=void 0!==m&&m,y=i.disableEnforceFocus,g=void 0!==y&&y,k=i.disableEscapeKeyDown,x=void 0!==k&&k,E=i.disablePortal,S=void 0!==E&&E,C=i.disableRestoreFocus,R=void 0!==C&&C,P=i.disableScrollLock,O=void 0!==P&&P,T=i.hideBackdrop,_=void 0!==T&&T,N=i.keepMounted,A=void 0!==N&&N,L=i.manager,z=void 0===L?Ce:L,I=i.onBackdropClick,D=i.onClose,j=i.onEscapeKeyDown,F=i.onRendered,B=i.open,U=(0,w.Z)(i,["BackdropComponent","BackdropProps","children","closeAfterTransition","container","disableAutoFocus","disableBackdropClick","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onEscapeKeyDown","onRendered","open"]),$=e.useState(!0),V=$[0],W=$[1],H=e.useRef({}),K=e.useRef(null),q=e.useRef(null),Q=(0,M.Z)(q,r),Y=function(e){return!!e.children&&e.children.props.hasOwnProperty("in")}(i),X=function(){return(0,ue.Z)(K.current)},G=function(){return H.current.modalRef=q.current,H.current.mountNode=K.current,H.current},J=function(){z.mount(G(),{disableScrollLock:O}),q.current.scrollTop=0},ee=(0,Z.Z)((function(){var e=function(e){return e="function"==typeof e?e():e,t.findDOMNode(e)}(d)||X().body;z.add(G(),e),q.current&&J()})),te=e.useCallback((function(){return z.isTopModal(G())}),[z]),ne=(0,Z.Z)((function(e){K.current=e,e&&(F&&F(),B&&te()?J():ve(q.current,!0))})),re=e.useCallback((function(){z.remove(G())}),[z]);if(e.useEffect((function(){return function(){re()}}),[re]),e.useEffect((function(){B?ee():Y&&f||re()}),[B,re,Y,f,ee]),!A&&!B&&(!Y||V))return null;var oe=function(e){return{root:{position:"fixed",zIndex:e.zIndex.modal,right:0,bottom:0,top:0,left:0},hidden:{visibility:"hidden"}}}(o||{zIndex:pe.Z}),ie={};return void 0===s.props.tabIndex&&(ie.tabIndex=s.props.tabIndex||"-1"),Y&&(ie.onEnter=(0,de.Z)((function(){W(!1)}),s.props.onEnter),ie.onExited=(0,de.Z)((function(){W(!0),f&&re()}),s.props.onExited)),e.createElement(fe,{ref:ne,container:d,disablePortal:S},e.createElement("div",(0,b.Z)({ref:Q,onKeyDown:function(e){"Escape"===e.key&&te()&&(j&&j(e),x||(e.stopPropagation(),D&&D(e,"escapeKeyDown")))},role:"presentation"},U,{style:(0,b.Z)({},oe.root,!B&&V?oe.hidden:{},U.style)}),_?null:e.createElement(l,(0,b.Z)({open:B,onClick:function(e){e.target===e.currentTarget&&(I&&I(e),!v&&D&&D(e,"backdropClick"))}},u)),e.createElement(xe,{disableEnforceFocus:g,disableAutoFocus:h,disableRestoreFocus:R,getDoc:X,isEnabled:te,open:B},e.cloneElement(s,ie))))}));var Pe=o(885);const Oe=!1;var Te="unmounted",_e="exited",Ne="entering",Ae="entered",Me="exiting",Ze=function(n){function r(e,t){var r;r=n.call(this,e,t)||this;var o,i=t&&!t.isMounting?e.enter:e.appear;return r.appearStatus=null,e.in?i?(o=_e,r.appearStatus=Ne):o=Ae:o=e.unmountOnExit||e.mountOnEnter?Te:_e,r.state={status:o},r.nextCallback=null,r}F(r,n),r.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Te?{status:_e}:null};var o=r.prototype;return o.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},o.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Ne&&n!==Ae&&(t=Ne):n!==Ne&&n!==Ae||(t=Me)}this.updateStatus(!1,t)},o.componentWillUnmount=function(){this.cancelNextCallback()},o.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},o.updateStatus=function(e,t){void 0===e&&(e=!1),null!==t?(this.cancelNextCallback(),t===Ne?this.performEnter(e):this.performExit()):this.props.unmountOnExit&&this.state.status===_e&&this.setState({status:Te})},o.performEnter=function(e){var n=this,r=this.props.enter,o=this.context?this.context.isMounting:e,i=this.props.nodeRef?[o]:[t.findDOMNode(this),o],a=i[0],l=i[1],u=this.getTimeouts(),s=o?u.appear:u.enter;!e&&!r||Oe?this.safeSetState({status:Ae},(function(){n.props.onEntered(a)})):(this.props.onEnter(a,l),this.safeSetState({status:Ne},(function(){n.props.onEntering(a,l),n.onTransitionEnd(s,(function(){n.safeSetState({status:Ae},(function(){n.props.onEntered(a,l)}))}))})))},o.performExit=function(){var e=this,n=this.props.exit,r=this.getTimeouts(),o=this.props.nodeRef?void 0:t.findDOMNode(this);n&&!Oe?(this.props.onExit(o),this.safeSetState({status:Me},(function(){e.props.onExiting(o),e.onTransitionEnd(r.exit,(function(){e.safeSetState({status:_e},(function(){e.props.onExited(o)}))}))}))):this.safeSetState({status:_e},(function(){e.props.onExited(o)}))},o.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},o.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},o.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},o.onTransitionEnd=function(e,n){this.setNextCallback(n);var r=this.props.nodeRef?this.props.nodeRef.current:t.findDOMNode(this),o=null==e&&!this.props.addEndListener;if(r&&!o){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[r,this.nextCallback],a=i[0],l=i[1];this.props.addEndListener(a,l)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},o.render=function(){var t=this.state.status;if(t===Te)return null;var n=this.props,r=n.children,o=(n.in,n.mountOnEnter,n.unmountOnExit,n.appear,n.enter,n.exit,n.timeout,n.addEndListener,n.onEnter,n.onEntering,n.onEntered,n.onExit,n.onExiting,n.onExited,n.nodeRef,I(n,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return e.createElement(B.Provider,{value:null},"function"==typeof r?r(t,o):e.cloneElement(e.Children.only(r),o))},r}(e.Component);function Le(){}Ze.contextType=B,Ze.propTypes={},Ze.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Le,onEntering:Le,onEntered:Le,onExit:Le,onExiting:Le,onExited:Le},Ze.UNMOUNTED=Te,Ze.EXITED=_e,Ze.ENTERING=Ne,Ze.ENTERED=Ae,Ze.EXITING=Me;const ze=Ze;var Ie=o(3291),De=o(9700);function je(){return(0,ae.Z)()||De.Z}var Fe=function(e){return e.scrollTop};function Be(e,t){var n=e.timeout,r=e.style,o=void 0===r?{}:r;return{duration:o.transitionDuration||"number"==typeof n?n:n[t.mode]||0,delay:o.transitionDelay}}var Ue={entering:{opacity:1},entered:{opacity:1}},$e={enter:Ie.x9.enteringScreen,exit:Ie.x9.leavingScreen};const Ve=e.forwardRef((function(t,n){var r=t.children,o=t.disableStrictModeCompat,i=void 0!==o&&o,a=t.in,l=t.onEnter,u=t.onEntered,s=t.onEntering,c=t.onExit,f=t.onExited,d=t.onExiting,p=t.style,h=t.TransitionComponent,m=void 0===h?ze:h,v=t.timeout,y=void 0===v?$e:v,g=(0,w.Z)(t,["children","disableStrictModeCompat","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","TransitionComponent","timeout"]),k=je(),x=k.unstable_strictMode&&!i,E=e.useRef(null),S=(0,M.Z)(r.ref,n),C=(0,M.Z)(x?E:void 0,S),R=function(e){return function(t,n){if(e){var r=x?[E.current,t]:[t,n],o=(0,Pe.Z)(r,2),i=o[0],a=o[1];void 0===a?e(i):e(i,a)}}},P=R(s),O=R((function(e,t){Fe(e);var n=Be({style:p,timeout:y},{mode:"enter"});e.style.webkitTransition=k.transitions.create("opacity",n),e.style.transition=k.transitions.create("opacity",n),l&&l(e,t)})),T=R(u),_=R(d),N=R((function(e){var t=Be({style:p,timeout:y},{mode:"exit"});e.style.webkitTransition=k.transitions.create("opacity",t),e.style.transition=k.transitions.create("opacity",t),c&&c(e)})),A=R(f);return e.createElement(m,(0,b.Z)({appear:!0,in:a,nodeRef:x?E:void 0,onEnter:O,onEntered:T,onEntering:P,onExit:N,onExited:A,onExiting:_,timeout:y},g),(function(t,n){return e.cloneElement(r,(0,b.Z)({style:(0,b.Z)({opacity:0,visibility:"exited"!==t||a?void 0:"hidden"},Ue[t],p,r.props.style),ref:C},n))}))}));var We=e.forwardRef((function(t,n){var r=t.children,o=t.classes,i=t.className,a=t.invisible,l=void 0!==a&&a,u=t.open,s=t.transitionDuration,c=t.TransitionComponent,f=void 0===c?Ve:c,d=(0,w.Z)(t,["children","classes","className","invisible","open","transitionDuration","TransitionComponent"]);return e.createElement(f,(0,b.Z)({in:u,timeout:s},d),e.createElement("div",{className:(0,k.Z)(o.root,i,l&&o.invisible),"aria-hidden":!0,ref:n},r))}));const He=(0,x.Z)({root:{zIndex:-1,position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},invisible:{backgroundColor:"transparent"}},{name:"MuiBackdrop"})(We);var Ke=o(9437);function qe(e,t){var n=function(e,t){var n,r=t.getBoundingClientRect();if(t.fakeTransform)n=t.fakeTransform;else{var o=window.getComputedStyle(t);n=o.getPropertyValue("-webkit-transform")||o.getPropertyValue("transform")}var i=0,a=0;if(n&&"none"!==n&&"string"==typeof n){var l=n.split("(")[1].split(")")[0].split(",");i=parseInt(l[4],10),a=parseInt(l[5],10)}return"left"===e?"translateX(".concat(window.innerWidth,"px) translateX(").concat(i-r.left,"px)"):"right"===e?"translateX(-".concat(r.left+r.width-i,"px)"):"up"===e?"translateY(".concat(window.innerHeight,"px) translateY(").concat(a-r.top,"px)"):"translateY(-".concat(r.top+r.height-a,"px)")}(e,t);n&&(t.style.webkitTransform=n,t.style.transform=n)}var Qe={enter:Ie.x9.enteringScreen,exit:Ie.x9.leavingScreen};const Ye=e.forwardRef((function(n,r){var o=n.children,i=n.direction,a=void 0===i?"down":i,l=n.in,u=n.onEnter,s=n.onEntered,c=n.onEntering,f=n.onExit,d=n.onExited,p=n.onExiting,h=n.style,m=n.timeout,v=void 0===m?Qe:m,y=n.TransitionComponent,g=void 0===y?ze:y,k=(0,w.Z)(n,["children","direction","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"]),x=je(),E=e.useRef(null),S=e.useCallback((function(e){E.current=t.findDOMNode(e)}),[]),C=(0,M.Z)(o.ref,S),R=(0,M.Z)(C,r),P=function(e){return function(t){e&&(void 0===t?e(E.current):e(E.current,t))}},O=P((function(e,t){qe(a,e),Fe(e),u&&u(e,t)})),T=P((function(e,t){var n=Be({timeout:v,style:h},{mode:"enter"});e.style.webkitTransition=x.transitions.create("-webkit-transform",(0,b.Z)({},n,{easing:x.transitions.easing.easeOut})),e.style.transition=x.transitions.create("transform",(0,b.Z)({},n,{easing:x.transitions.easing.easeOut})),e.style.webkitTransform="none",e.style.transform="none",c&&c(e,t)})),_=P(s),N=P(p),A=P((function(e){var t=Be({timeout:v,style:h},{mode:"exit"});e.style.webkitTransition=x.transitions.create("-webkit-transform",(0,b.Z)({},t,{easing:x.transitions.easing.sharp})),e.style.transition=x.transitions.create("transform",(0,b.Z)({},t,{easing:x.transitions.easing.sharp})),qe(a,e),f&&f(e)})),Z=P((function(e){e.style.webkitTransition="",e.style.transition="",d&&d(e)})),L=e.useCallback((function(){E.current&&qe(a,E.current)}),[a]);return e.useEffect((function(){if(!l&&"down"!==a&&"right"!==a){var e=(0,Ke.Z)((function(){E.current&&qe(a,E.current)}));return window.addEventListener("resize",e),function(){e.clear(),window.removeEventListener("resize",e)}}}),[a,l]),e.useEffect((function(){l||L()}),[l,L]),e.createElement(g,(0,b.Z)({nodeRef:E,onEnter:O,onEntered:_,onEntering:T,onExit:A,onExited:Z,onExiting:N,appear:!0,in:l,timeout:v},k),(function(t,n){return e.cloneElement(o,(0,b.Z)({ref:R,style:(0,b.Z)({visibility:"exited"!==t||l?void 0:"hidden"},h,o.props.style)},n))}))}));var Xe={left:"right",right:"left",top:"down",bottom:"up"};var Ge={enter:Ie.x9.enteringScreen,exit:Ie.x9.leavingScreen},Je=e.forwardRef((function(t,n){var r=t.anchor,o=void 0===r?"left":r,i=t.BackdropProps,a=t.children,l=t.classes,u=t.className,s=t.elevation,c=void 0===s?16:s,f=t.ModalProps,d=(f=void 0===f?{}:f).BackdropProps,p=(0,w.Z)(f,["BackdropProps"]),h=t.onClose,m=t.open,v=void 0!==m&&m,y=t.PaperProps,g=void 0===y?{}:y,x=t.SlideProps,S=t.TransitionComponent,R=void 0===S?Ye:S,P=t.transitionDuration,O=void 0===P?Ge:P,T=t.variant,_=void 0===T?"temporary":T,N=(0,w.Z)(t,["anchor","BackdropProps","children","classes","className","elevation","ModalProps","onClose","open","PaperProps","SlideProps","TransitionComponent","transitionDuration","variant"]),A=je(),M=e.useRef(!1);e.useEffect((function(){M.current=!0}),[]);var Z=function(e,t){return"rtl"===e.direction&&function(e){return-1!==["left","right"].indexOf(e)}(t)?Xe[t]:t}(A,o),L=e.createElement(C,(0,b.Z)({elevation:"temporary"===_?c:0,square:!0},g,{className:(0,k.Z)(l.paper,l["paperAnchor".concat((0,E.Z)(Z))],g.className,"temporary"!==_&&l["paperAnchorDocked".concat((0,E.Z)(Z))])}),a);if("permanent"===_)return e.createElement("div",(0,b.Z)({className:(0,k.Z)(l.root,l.docked,u),ref:n},N),L);var z=e.createElement(R,(0,b.Z)({in:v,direction:Xe[Z],timeout:O,appear:M.current},x),L);return"persistent"===_?e.createElement("div",(0,b.Z)({className:(0,k.Z)(l.root,l.docked,u),ref:n},N),z):e.createElement(Re,(0,b.Z)({BackdropProps:(0,b.Z)({},i,d,{transitionDuration:O}),BackdropComponent:He,className:(0,k.Z)(l.root,l.modal,u),open:v,onClose:h,ref:n},N,p),z)}));const et=(0,x.Z)((function(e){return{root:{},docked:{flex:"0 0 auto"},paper:{overflowY:"auto",display:"flex",flexDirection:"column",height:"100%",flex:"1 0 auto",zIndex:e.zIndex.drawer,WebkitOverflowScrolling:"touch",position:"fixed",top:0,outline:0},paperAnchorLeft:{left:0,right:"auto"},paperAnchorRight:{left:"auto",right:0},paperAnchorTop:{top:0,left:0,bottom:"auto",right:0,height:"auto",maxHeight:"100%"},paperAnchorBottom:{top:"auto",left:0,bottom:0,right:0,height:"auto",maxHeight:"100%"},paperAnchorDockedLeft:{borderRight:"1px solid ".concat(e.palette.divider)},paperAnchorDockedTop:{borderBottom:"1px solid ".concat(e.palette.divider)},paperAnchorDockedRight:{borderLeft:"1px solid ".concat(e.palette.divider)},paperAnchorDockedBottom:{borderTop:"1px solid ".concat(e.palette.divider)},modal:{}}}),{name:"MuiDrawer",flip:!1})(Je);var tt=o(1721),nt=o(7531),rt=o(3366),ot=o(2177),it=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];return(e=t.call.apply(t,[this].concat(r))||this).history=(0,nt.lX)(e.props),e}return(0,tt.Z)(n,t),n.prototype.render=function(){return e.createElement(y.F0,{history:this.history,children:this.props.children})},n}(e.Component);e.Component;var at=function(e,t){return"function"==typeof e?e(t):e},lt=function(e,t){return"string"==typeof e?(0,nt.ob)(e,null,null,t):e},ut=function(e){return e},st=e.forwardRef;void 0===st&&(st=ut);var ct=st((function(t,n){var r=t.innerRef,o=t.navigate,i=t.onClick,a=(0,rt.Z)(t,["innerRef","navigate","onClick"]),l=a.target,u=(0,b.Z)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||l&&"_self"!==l||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),o())}});return u.ref=ut!==st&&n||r,e.createElement("a",u)}));var ft=st((function(t,n){var r=t.component,o=void 0===r?ct:r,i=t.replace,a=t.to,l=t.innerRef,u=(0,rt.Z)(t,["component","replace","to","innerRef"]);return e.createElement(y.s6.Consumer,null,(function(t){t||(0,ot.Z)(!1);var r=t.history,s=lt(at(a,t.location),t.location),c=s?r.createHref(s):"",f=(0,b.Z)({},u,{href:c,navigate:function(){var e=at(a,t.location);(i?r.replace:r.push)(e)}});return ut!==st?f.ref=n||l:f.innerRef=l,e.createElement(o,f)}))})),dt=function(e){return e},pt=e.forwardRef;void 0===pt&&(pt=dt);pt((function(t,n){var r=t["aria-current"],o=void 0===r?"page":r,i=t.activeClassName,a=void 0===i?"active":i,l=t.activeStyle,u=t.className,s=t.exact,c=t.isActive,f=t.location,d=t.sensitive,p=t.strict,h=t.style,m=t.to,v=t.innerRef,g=(0,rt.Z)(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(y.s6.Consumer,null,(function(t){t||(0,ot.Z)(!1);var r=f||t.location,i=lt(at(m,r),r),w=i.pathname,k=w&&w.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=k?(0,y.LX)(r.pathname,{path:k,exact:s,sensitive:d,strict:p}):null,E=!!(c?c(x,r):x),S=E?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,a):u,C=E?(0,b.Z)({},h,{},l):h,R=(0,b.Z)({"aria-current":E&&o||null,className:S,style:C,to:i},g);return dt!==pt?R.ref=n||v:R.innerRef=v,e.createElement(ft,R)}))}));const ht=(0,g.Z)((e=>({root:{flexGrow:1,margin:"1rem 3rem 0rem 3rem",padding:"1rem 1rem 0rem 1rem",maxHeight:"50px"},link:{alignItems:"center",color:"black",textDecoration:"none","& .MuiSvgIcon-root":{fontSize:"2rem"}}}))),mt=({to:t,title:n})=>{const r=ht();return e.createElement("div",{className:r.root},e.createElement(ft,{className:r.link,to:t},e.createElement("div",null,n)))},vt=(0,g.Z)((e=>({root:{flexGrow:1},title:{flexGrow:1,textAlign:"start"},notiIcon:{margin:"0.25rem",padding:"0.25rem",borderRadius:"50%","&:hover":{backgroundColor:"red"}},sideMenu:{"& .MuiDrawer-paper":{borderRadius:"20px 0px 0px 20px / 20px 0px 0px 20px"}},menuButton:{margin:"0.25rem",padding:"0.25rem"},menuBottomItem:{position:"fixed",bottom:"10px",margin:"1rem",fontSize:"0.75rem"}}))),yt=()=>{const t=vt(),[n,r]=e.useState(!1);let o=(0,y.k6)();const i=e=>t=>{("keydown"!==t.type||"Tab"!==t.key&&"Shift"!==t.key)&&r(e)};return e.createElement("div",{className:t.root},e.createElement(P,{position:"static"},e.createElement(_,null,e.createElement(N.Z,{variant:"h6",className:t.title,onClick:()=>{o.push("/")}},"Roundin"),e.createElement(ie,{className:t.notiIcon,variant:"dot",color:"secondary"},e.createElement(re.Z,null)),e.createElement(te,{onClick:i(!0),edge:"start",className:t.menuButton,color:"inherit","aria-label":"menu"},e.createElement(ne.Z,null)))),e.createElement(et,{className:t.sideMenu,anchor:"right",open:n,onClose:i(!1)},e.createElement(mt,{to:"d",title:"내 레슨 목록"}),e.createElement(mt,{to:"d",title:"내 쿠폰"}),e.createElement(mt,{to:"d",title:"로그아웃"}),e.createElement("div",{className:t.menuBottomItem},e.createElement("div",null,"서비스 이용문의"),e.createElement("a",{href:"mailto: team.roundin@gmail.com"},"team.roundin@gmail.com"))))};var gt=o(7220);const bt=(0,g.Z)((e=>({root:{display:"flex",flexDirection:"column",alignItems:"center",justifyContent:"center",flexGrow:1,maxWidth:"500px",margin:"auto","& > div":{width:"100%",display:"flex",justifyContent:"flex-start"}},title:{fontSize:"1.25rem",flexGrow:1,textAlign:"start",fontWeight:"bold"}}))),wt=()=>{const t=bt();return e.createElement("div",{className:t.root},e.createElement("div",{className:t.title},"이용희 프로님 프로필"),e.createElement("img",{src:gt,alt:"brandLogo"}),e.createElement("div",null,"\n        안녕하세요~~  용아저씨 이용희프로입니다 ^^^\n\n투어경력 30년의 노하우를 가지고 유투브 채널(용아저씨)를 개설하였습니다\n용아저씨 채널은 금방 이해할수있고 필드에서 바로 적용할수 있는 내용을 모태로 만들어졌습니다\n용아저씨 채널을 통해서 여러분의 골프실력이 한발더 싱글로 가까이 가기를 기원합니다 ~~^^^\n        "),e.createElement("div",null,"SNS"),e.createElement("div",null,"유튜브 golfgoodtv용아저씨 채널 운영 (구독자수 10만)"))},kt=(0,g.Z)((e=>({root:{display:"flex",flexDirection:"column",alignItems:"center",flexGrow:1,height:"70vh",justifyContent:"center"}}))),xt=()=>{const t=kt();return e.createElement("div",{className:t.root},e.createElement("img",{src:gt,alt:"brandLogo"}),e.createElement("div",null,"페이지를 로딩중입니다..."))};const Et=function(){const t=e.lazy((()=>o.e(261).then(o.bind(o,4261))));return e.createElement(e.Suspense,{fallback:e.createElement(xt,null)},e.createElement(yt,null),e.createElement(y.rs,null,e.createElement(y.AW,{exact:!0,path:"/",component:t}),e.createElement(y.AW,{path:"/user",component:t}),e.createElement(y.AW,{path:"/pro",component:wt})))};var St=o(3800),Ct=o(7076);const Rt=function(t){var n=t.children,r=t.theme,o=(0,ae.Z)(),i=e.useMemo((function(){var e=null===o?r:function(e,t){return"function"==typeof t?t(e):(0,b.Z)({},e,t)}(o,r);return null!=e&&(e[Ct.Z]=null!==o),e}),[r,o]);return e.createElement(St.Z.Provider,{value:i},n)};const Pt=(0,o(2920).Z)({typography:{fontFamily:"Noto Sans CJK KR"},palette:{secondary:{main:"#17DC79"}}});t.render(e.createElement(e.StrictMode,null,e.createElement(it,null,e.createElement(Rt,{theme:Pt},e.createElement(Et,null)))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsRUFBRyxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJQSxFQUFhLEVBQUcsR0FBSSxJQUFLLEVBQUcsRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVB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L2xvYWQgc2NyaXB0Iiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHQuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vVHlwb2dyYXBoeS9UeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jb2xvck1hbmlwdWxhdG9yLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVCcmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlTWl4aW5zLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9jb21tb24uanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZXkuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2luZGlnby5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcGluay5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9jb2xvcnMvcmVkLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL2NvbG9ycy9vcmFuZ2UuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2JsdWUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vY29sb3JzL2dyZWVuLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVQYWxldHRlLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9jcmVhdGVUeXBvZ3JhcGh5LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFkb3dzLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3N0eWxlcy9zaGFwZS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zeXN0ZW0vZXNtL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3lzdGVtL2VzbS9zcGFjaW5nLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N5c3RlbS9lc20vbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlU3BhY2luZy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvY3JlYXRlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL2RlZmF1bHRUaGVtZS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvbWFrZVN0eWxlcy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvdHJhbnNpdGlvbnMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS93aXRoU3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3dpdGhTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vc3R5bGVzL3pJbmRleC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9kZWJvdW5jZS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9TdmdJY29uL1N2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvY3JlYXRlU3ZnSWNvbi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvaXNNdWlFbGVtZW50LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3JlcXVpcmVQcm9wRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91bnN1cHBvcnRlZFByb3AuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlQ29udHJvbGxlZC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91bnN0YWJsZV91c2VJZC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy9vd25lckRvY3VtZW50LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL293bmVyV2luZG93LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3NldFJlZi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS91dGlscy91c2VFdmVudENhbGxiYWNrLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL3VzZUZvcmtSZWYuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvaWNvbnMvTWVudS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9pY29ucy9Ob3RpZmljYXRpb25zLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2ljb25zL3V0aWxzL2NyZWF0ZVN2Z0ljb24uanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9UaGVtZVByb3ZpZGVyL25lc3RlZC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2dldFRoZW1lUHJvcHMvZ2V0VGhlbWVQcm9wcy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL2lzLWluLWJyb3dzZXIvZGlzdC9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9qc3MvZGlzdC9qc3MuZXNtLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vbWVyZ2VDbGFzc2VzL21lcmdlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvbXVsdGlLZXlTdG9yZS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lL2NyZWF0ZUdlbmVyYXRlQ2xhc3NOYW1lLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uL2Rpc3QvanNzLXBsdWdpbi1ydWxlLXZhbHVlLWZ1bmN0aW9uLmVzbS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tZ2xvYmFsL2Rpc3QvanNzLXBsdWdpbi1nbG9iYWwuZXNtLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1uZXN0ZWQvZGlzdC9qc3MtcGx1Z2luLW5lc3RlZC5lc20uanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9oeXBoZW5hdGUtc3R5bGUtbmFtZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tY2FtZWwtY2FzZS9kaXN0L2pzcy1wbHVnaW4tY2FtZWwtY2FzZS5lc20uanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9qc3MtcGx1Z2luLWRlZmF1bHQtdW5pdC9kaXN0L2pzcy1wbHVnaW4tZGVmYXVsdC11bml0LmVzbS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL2Nzcy12ZW5kb3IvZGlzdC9jc3MtdmVuZG9yLmVzbS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL2pzcy1wbHVnaW4tdmVuZG9yLXByZWZpeGVyL2Rpc3QvanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXIuZXNtLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvanNzLXBsdWdpbi1wcm9wcy1zb3J0L2Rpc3QvanNzLXBsdWdpbi1wcm9wcy1zb3J0LmVzbS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL1N0eWxlc1Byb3ZpZGVyL1N0eWxlc1Byb3ZpZGVyLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vanNzUHJlc2V0L2pzc1ByZXNldC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9zdHlsZXMvZXNtL21ha2VTdHlsZXMvaW5kZXhDb3VudGVyLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9nZXRTdHlsZXNDcmVhdG9yLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vZ2V0U3R5bGVzQ3JlYXRvci9ub29wVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS9tYWtlU3R5bGVzL21ha2VTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS9UaGVtZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvc3R5bGVzL2VzbS91c2VUaGVtZS91c2VUaGVtZS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS91dGlscy9lc20vZGVlcG1lcmdlLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3V0aWxzL2VzbS9mb3JtYXRNdWlFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9zcmMvaW5kZXguY3NzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2dldFVybC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvbWluaS1jcmVhdGUtcmVhY3QtY29udGV4dC9kaXN0L2VzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lc20vcmVhY3Qtcm91dGVyLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hcnJheUxpa2VUb0FycmF5LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRoSG9sZXMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXJyYXlXaXRob3V0SG9sZXMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pdGVyYWJsZVRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9ub25JdGVyYWJsZVNwcmVhZC5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2Uvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlL3dlYnBhY2svcnVudGltZS9lbnN1cmUgY2h1bmsiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS93ZWJwYWNrL3J1bnRpbWUvZ2V0IGphdmFzY3JpcHQgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9zcmMvaW5kZXguY3NzP2NmZTQiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vUGFwZXIvUGFwZXIuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQXBwQmFyL0FwcEJhci5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9Ub29sYmFyL1Rvb2xiYXIuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAvZXNtL1RyYW5zaXRpb25Hcm91cENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS91dGlscy9DaGlsZE1hcHBpbmcuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9UcmFuc2l0aW9uR3JvdXAuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9SaXBwbGUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vQnV0dG9uQmFzZS9Ub3VjaFJpcHBsZS5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9CdXR0b25CYXNlL0J1dHRvbkJhc2UuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vSWNvbkJ1dHRvbi9JY29uQnV0dG9uLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0JhZGdlL0JhZGdlLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1BvcnRhbC9Qb3J0YWwuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vTW9kYWwvTW9kYWxNYW5hZ2VyLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL3V0aWxzL2dldFNjcm9sbGJhclNpemUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9VbnN0YWJsZV9UcmFwRm9jdXMvVW5zdGFibGVfVHJhcEZvY3VzLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL1NpbXBsZUJhY2tkcm9wLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL01vZGFsL01vZGFsLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vY29uZmlnLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vVHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC11aS9jb3JlL2VzbS9zdHlsZXMvdXNlVGhlbWUuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vdHJhbnNpdGlvbnMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwtdWkvY29yZS9lc20vRmFkZS9GYWRlLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0JhY2tkcm9wL0JhY2tkcm9wLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL1NsaWRlL1NsaWRlLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL2NvcmUvZXNtL0RyYXdlci9EcmF3ZXIuanMiLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzbS9yZWFjdC1yb3V0ZXItZG9tLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9zcmMvY29tcG9uZW50L3RvcE1lbnViYXIvY29tcG9uZW50L01lbnVJdGVtLnRzeCIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vc3JjL2NvbXBvbmVudC90b3BNZW51YmFyL1RvcE1lbnVCYXIudHN4Iiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9zcmMvdXRpbHMvY29tcG9uZW50L1Byb1Byb2ZpbGVQYWdlLnRzeCIsIndlYnBhY2s6Ly9yb3VuZGluX2hvbWVwYWdlLy4vc3JjL3V0aWxzL2NvbXBvbmVudC9SZW5kaW5nUGFnZS50c3giLCJ3ZWJwYWNrOi8vcm91bmRpbl9ob21lcGFnZS8uL3NyYy9BcHAudHN4Iiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsLXVpL3N0eWxlcy9lc20vVGhlbWVQcm92aWRlci9UaGVtZVByb3ZpZGVyLmpzIiwid2VicGFjazovL3JvdW5kaW5faG9tZXBhZ2UvLi9zcmMvaW5kZXgudHN4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBpblByb2dyZXNzID0ge307XG52YXIgZGF0YVdlYnBhY2tQcmVmaXggPSBcInJvdW5kaW5faG9tZXBhZ2U6XCI7XG4vLyBsb2FkU2NyaXB0IGZ1bmN0aW9uIHRvIGxvYWQgYSBzY3JpcHQgdmlhIHNjcmlwdCB0YWdcbl9fd2VicGFja19yZXF1aXJlX18ubCA9ICh1cmwsIGRvbmUsIGtleSwgY2h1bmtJZCkgPT4ge1xuXHRpZihpblByb2dyZXNzW3VybF0pIHsgaW5Qcm9ncmVzc1t1cmxdLnB1c2goZG9uZSk7IHJldHVybjsgfVxuXHR2YXIgc2NyaXB0LCBuZWVkQXR0YWNoO1xuXHRpZihrZXkgIT09IHVuZGVmaW5lZCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHNjcmlwdHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBzID0gc2NyaXB0c1tpXTtcblx0XHRcdGlmKHMuZ2V0QXR0cmlidXRlKFwic3JjXCIpID09IHVybCB8fCBzLmdldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiKSA9PSBkYXRhV2VicGFja1ByZWZpeCArIGtleSkgeyBzY3JpcHQgPSBzOyBicmVhazsgfVxuXHRcdH1cblx0fVxuXHRpZighc2NyaXB0KSB7XG5cdFx0bmVlZEF0dGFjaCA9IHRydWU7XG5cdFx0c2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cblx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG5cdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubmMpIHtcblx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcblx0XHR9XG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImRhdGEtd2VicGFja1wiLCBkYXRhV2VicGFja1ByZWZpeCArIGtleSk7XG5cdFx0c2NyaXB0LnNyYyA9IHVybDtcblx0fVxuXHRpblByb2dyZXNzW3VybF0gPSBbZG9uZV07XG5cdHZhciBvblNjcmlwdENvbXBsZXRlID0gKHByZXYsIGV2ZW50KSA9PiB7XG5cdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuXHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG5cdFx0Y2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuXHRcdHZhciBkb25lRm5zID0gaW5Qcm9ncmVzc1t1cmxdO1xuXHRcdGRlbGV0ZSBpblByb2dyZXNzW3VybF07XG5cdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRkb25lRm5zICYmIGRvbmVGbnMuZm9yRWFjaCgoZm4pID0+IChmbihldmVudCkpKTtcblx0XHRpZihwcmV2KSByZXR1cm4gcHJldihldmVudCk7XG5cdH1cblx0O1xuXHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQob25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHVuZGVmaW5lZCwgeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pLCAxMjAwMDApO1xuXHRzY3JpcHQub25lcnJvciA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25lcnJvcik7XG5cdHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgc2NyaXB0Lm9ubG9hZCk7XG5cdG5lZWRBdHRhY2ggJiYgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xufTsiLCJmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDoge1xuICAgIFwiZGVmYXVsdFwiOiBvYmpcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0O1xubW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHMsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG1hcmdpbjogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTJcImAuICovXG4gICAgYm9keTI6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYm9keTFcImAuICovXG4gICAgYm9keTE6IHRoZW1lLnR5cG9ncmFwaHkuYm9keTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiY2FwdGlvblwiYC4gKi9cbiAgICBjYXB0aW9uOiB0aGVtZS50eXBvZ3JhcGh5LmNhcHRpb24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiYnV0dG9uXCJgLiAqL1xuICAgIGJ1dHRvbjogdGhlbWUudHlwb2dyYXBoeS5idXR0b24sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDFcImAuICovXG4gICAgaDE6IHRoZW1lLnR5cG9ncmFwaHkuaDEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDJcImAuICovXG4gICAgaDI6IHRoZW1lLnR5cG9ncmFwaHkuaDIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDNcImAuICovXG4gICAgaDM6IHRoZW1lLnR5cG9ncmFwaHkuaDMsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDRcImAuICovXG4gICAgaDQ6IHRoZW1lLnR5cG9ncmFwaHkuaDQsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDVcImAuICovXG4gICAgaDU6IHRoZW1lLnR5cG9ncmFwaHkuaDUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiaDZcImAuICovXG4gICAgaDY6IHRoZW1lLnR5cG9ncmFwaHkuaDYsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUxXCJgLiAqL1xuICAgIHN1YnRpdGxlMTogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTEsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3VidGl0bGUyXCJgLiAqL1xuICAgIHN1YnRpdGxlMjogdGhlbWUudHlwb2dyYXBoeS5zdWJ0aXRsZTIsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwib3ZlcmxpbmVcImAuICovXG4gICAgb3ZlcmxpbmU6IHRoZW1lLnR5cG9ncmFwaHkub3ZlcmxpbmUsXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwic3JPbmx5XCJgLiBPbmx5IGFjY2Vzc2libGUgdG8gc2NyZWVuIHJlYWRlcnMuICovXG4gICAgc3JPbmx5OiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIGhlaWdodDogMSxcbiAgICAgIHdpZHRoOiAxLFxuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwibGVmdFwiYC4gKi9cbiAgICBhbGlnbkxlZnQ6IHtcbiAgICAgIHRleHRBbGlnbjogJ2xlZnQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwiY2VudGVyXCJgLiAqL1xuICAgIGFsaWduQ2VudGVyOiB7XG4gICAgICB0ZXh0QWxpZ246ICdjZW50ZXInXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwicmlnaHRcImAuICovXG4gICAgYWxpZ25SaWdodDoge1xuICAgICAgdGV4dEFsaWduOiAncmlnaHQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFsaWduPVwianVzdGlmeVwiYC4gKi9cbiAgICBhbGlnbkp1c3RpZnk6IHtcbiAgICAgIHRleHRBbGlnbjogJ2p1c3RpZnknXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYG5vd3JhcD17dHJ1ZX1gLiAqL1xuICAgIG5vV3JhcDoge1xuICAgICAgb3ZlcmZsb3c6ICdoaWRkZW4nLFxuICAgICAgdGV4dE92ZXJmbG93OiAnZWxsaXBzaXMnLFxuICAgICAgd2hpdGVTcGFjZTogJ25vd3JhcCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZ3V0dGVyQm90dG9tPXt0cnVlfWAuICovXG4gICAgZ3V0dGVyQm90dG9tOiB7XG4gICAgICBtYXJnaW5Cb3R0b206ICcwLjM1ZW0nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBhcmFncmFwaD17dHJ1ZX1gLiAqL1xuICAgIHBhcmFncmFwaDoge1xuICAgICAgbWFyZ2luQm90dG9tOiAxNlxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5Lm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0UHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclRleHRQcmltYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJ0ZXh0U2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yVGV4dFNlY29uZGFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUudGV4dC5zZWNvbmRhcnlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5lcnJvci5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc3BsYXk9XCJpbmxpbmVcImAuICovXG4gICAgZGlzcGxheUlubGluZToge1xuICAgICAgZGlzcGxheTogJ2lubGluZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzcGxheT1cImJsb2NrXCJgLiAqL1xuICAgIGRpc3BsYXlCbG9jazoge1xuICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgIH1cbiAgfTtcbn07XG52YXIgZGVmYXVsdFZhcmlhbnRNYXBwaW5nID0ge1xuICBoMTogJ2gxJyxcbiAgaDI6ICdoMicsXG4gIGgzOiAnaDMnLFxuICBoNDogJ2g0JyxcbiAgaDU6ICdoNScsXG4gIGg2OiAnaDYnLFxuICBzdWJ0aXRsZTE6ICdoNicsXG4gIHN1YnRpdGxlMjogJ2g2JyxcbiAgYm9keTE6ICdwJyxcbiAgYm9keTI6ICdwJ1xufTtcbnZhciBUeXBvZ3JhcGh5ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVHlwb2dyYXBoeShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYWxpZ24gPSBwcm9wcy5hbGlnbixcbiAgICAgIGFsaWduID0gX3Byb3BzJGFsaWduID09PSB2b2lkIDAgPyAnaW5oZXJpdCcgOiBfcHJvcHMkYWxpZ24sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbml0aWFsJyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNwbGF5ID0gcHJvcHMuZGlzcGxheSxcbiAgICAgIGRpc3BsYXkgPSBfcHJvcHMkZGlzcGxheSA9PT0gdm9pZCAwID8gJ2luaXRpYWwnIDogX3Byb3BzJGRpc3BsYXksXG4gICAgICBfcHJvcHMkZ3V0dGVyQm90dG9tID0gcHJvcHMuZ3V0dGVyQm90dG9tLFxuICAgICAgZ3V0dGVyQm90dG9tID0gX3Byb3BzJGd1dHRlckJvdHRvbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZ3V0dGVyQm90dG9tLFxuICAgICAgX3Byb3BzJG5vV3JhcCA9IHByb3BzLm5vV3JhcCxcbiAgICAgIG5vV3JhcCA9IF9wcm9wcyRub1dyYXAgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJG5vV3JhcCxcbiAgICAgIF9wcm9wcyRwYXJhZ3JhcGggPSBwcm9wcy5wYXJhZ3JhcGgsXG4gICAgICBwYXJhZ3JhcGggPSBfcHJvcHMkcGFyYWdyYXBoID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRwYXJhZ3JhcGgsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICdib2R5MScgOiBfcHJvcHMkdmFyaWFudCxcbiAgICAgIF9wcm9wcyR2YXJpYW50TWFwcGluZyA9IHByb3BzLnZhcmlhbnRNYXBwaW5nLFxuICAgICAgdmFyaWFudE1hcHBpbmcgPSBfcHJvcHMkdmFyaWFudE1hcHBpbmcgPT09IHZvaWQgMCA/IGRlZmF1bHRWYXJpYW50TWFwcGluZyA6IF9wcm9wcyR2YXJpYW50TWFwcGluZyxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJhbGlnblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNvbXBvbmVudFwiLCBcImRpc3BsYXlcIiwgXCJndXR0ZXJCb3R0b21cIiwgXCJub1dyYXBcIiwgXCJwYXJhZ3JhcGhcIiwgXCJ2YXJpYW50XCIsIFwidmFyaWFudE1hcHBpbmdcIl0pO1xuXG4gIHZhciBDb21wb25lbnQgPSBjb21wb25lbnQgfHwgKHBhcmFncmFwaCA/ICdwJyA6IHZhcmlhbnRNYXBwaW5nW3ZhcmlhbnRdIHx8IGRlZmF1bHRWYXJpYW50TWFwcGluZ1t2YXJpYW50XSkgfHwgJ3NwYW4nO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB2YXJpYW50ICE9PSAnaW5oZXJpdCcgJiYgY2xhc3Nlc1t2YXJpYW50XSwgY29sb3IgIT09ICdpbml0aWFsJyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgbm9XcmFwICYmIGNsYXNzZXMubm9XcmFwLCBndXR0ZXJCb3R0b20gJiYgY2xhc3Nlcy5ndXR0ZXJCb3R0b20sIHBhcmFncmFwaCAmJiBjbGFzc2VzLnBhcmFncmFwaCwgYWxpZ24gIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiYWxpZ25cIi5jb25jYXQoY2FwaXRhbGl6ZShhbGlnbikpXSwgZGlzcGxheSAhPT0gJ2luaXRpYWwnICYmIGNsYXNzZXNbXCJkaXNwbGF5XCIuY29uY2F0KGNhcGl0YWxpemUoZGlzcGxheSkpXSksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVHlwb2dyYXBoeS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBTZXQgdGhlIHRleHQtYWxpZ24gb24gdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGFsaWduOiBQcm9wVHlwZXMub25lT2YoWydpbmhlcml0JywgJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0JywgJ2p1c3RpZnknXSksXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50IG9mIHRoZSBjb21wb25lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydpbml0aWFsJywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndGV4dFByaW1hcnknLCAndGV4dFNlY29uZGFyeScsICdlcnJvciddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKiBPdmVycmlkZXMgdGhlIGJlaGF2aW9yIG9mIHRoZSBgdmFyaWFudE1hcHBpbmdgIHByb3AuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogQ29udHJvbHMgdGhlIGRpc3BsYXkgdHlwZVxuICAgKi9cbiAgZGlzcGxheTogUHJvcFR5cGVzLm9uZU9mKFsnaW5pdGlhbCcsICdibG9jaycsICdpbmxpbmUnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBoYXZlIGEgYm90dG9tIG1hcmdpbi5cbiAgICovXG4gIGd1dHRlckJvdHRvbTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRleHQgd2lsbCBub3Qgd3JhcCwgYnV0IGluc3RlYWQgd2lsbCB0cnVuY2F0ZSB3aXRoIGEgdGV4dCBvdmVyZmxvdyBlbGxpcHNpcy5cbiAgICpcbiAgICogTm90ZSB0aGF0IHRleHQgb3ZlcmZsb3cgY2FuIG9ubHkgaGFwcGVuIHdpdGggYmxvY2sgb3IgaW5saW5lLWJsb2NrIGxldmVsIGVsZW1lbnRzXG4gICAqICh0aGUgZWxlbWVudCBuZWVkcyB0byBoYXZlIGEgd2lkdGggaW4gb3JkZXIgdG8gb3ZlcmZsb3cpLlxuICAgKi9cbiAgbm9XcmFwOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdGV4dCB3aWxsIGhhdmUgYSBib3R0b20gbWFyZ2luLlxuICAgKi9cbiAgcGFyYWdyYXBoOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQXBwbGllcyB0aGUgdGhlbWUgdHlwb2dyYXBoeSBzdHlsZXMuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydoMScsICdoMicsICdoMycsICdoNCcsICdoNScsICdoNicsICdzdWJ0aXRsZTEnLCAnc3VidGl0bGUyJywgJ2JvZHkxJywgJ2JvZHkyJywgJ2NhcHRpb24nLCAnYnV0dG9uJywgJ292ZXJsaW5lJywgJ3NyT25seScsICdpbmhlcml0J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IG1hcHMgdGhlIHZhcmlhbnQgcHJvcCB0byBhIHJhbmdlIG9mIGRpZmZlcmVudCBIVE1MIGVsZW1lbnQgdHlwZXMuXG4gICAqIEZvciBpbnN0YW5jZSwgc3VidGl0bGUxIHRvIGA8aDY+YC5cbiAgICogSWYgeW91IHdpc2ggdG8gY2hhbmdlIHRoYXQgbWFwcGluZywgeW91IGNhbiBwcm92aWRlIHlvdXIgb3duLlxuICAgKiBBbHRlcm5hdGl2ZWx5LCB5b3UgY2FuIHVzZSB0aGUgYGNvbXBvbmVudGAgcHJvcC5cbiAgICovXG4gIHZhcmlhbnRNYXBwaW5nOiBQcm9wVHlwZXMub2JqZWN0XG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVR5cG9ncmFwaHknXG59KShUeXBvZ3JhcGh5KTsiLCJpbXBvcnQgeyBmb3JtYXRNdWlFcnJvck1lc3NhZ2UgYXMgX2Zvcm1hdE11aUVycm9yTWVzc2FnZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvdXRpbHNcIjtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdXNlLWJlZm9yZS1kZWZpbmUgKi9cblxuLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIHdob3NlIHZhbHVlIGlzIGxpbWl0ZWQgdG8gdGhlIGdpdmVuIHJhbmdlLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYmUgY2xhbXBlZFxuICogQHBhcmFtIHtudW1iZXJ9IG1pbiBUaGUgbG93ZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBUaGUgdXBwZXIgYm91bmRhcnkgb2YgdGhlIG91dHB1dCByYW5nZVxuICogQHJldHVybnMge251bWJlcn0gQSBudW1iZXIgaW4gdGhlIHJhbmdlIFttaW4sIG1heF1cbiAqL1xuZnVuY3Rpb24gY2xhbXAodmFsdWUpIHtcbiAgdmFyIG1pbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgdmFyIG1heCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgcHJvdmlkZWQgXCIuY29uY2F0KHZhbHVlLCBcIiBpcyBvdXQgb2YgcmFuZ2UgW1wiKS5jb25jYXQobWluLCBcIiwgXCIpLmNvbmNhdChtYXgsIFwiXS5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIHZhbHVlKSwgbWF4KTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIENTUyBoZXggZm9ybWF0IHRvIENTUyByZ2IgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIEhleCBjb2xvciwgaS5lLiAjbm5uIG9yICNubm5ubm5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIHJnYiBjb2xvciBzdHJpbmdcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBoZXhUb1JnYihjb2xvcikge1xuICBjb2xvciA9IGNvbG9yLnN1YnN0cigxKTtcbiAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIi57MSxcIi5jb25jYXQoY29sb3IubGVuZ3RoID49IDYgPyAyIDogMSwgXCJ9XCIpLCAnZycpO1xuICB2YXIgY29sb3JzID0gY29sb3IubWF0Y2gocmUpO1xuXG4gIGlmIChjb2xvcnMgJiYgY29sb3JzWzBdLmxlbmd0aCA9PT0gMSkge1xuICAgIGNvbG9ycyA9IGNvbG9ycy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICAgIHJldHVybiBuICsgbjtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjb2xvcnMgPyBcInJnYlwiLmNvbmNhdChjb2xvcnMubGVuZ3RoID09PSA0ID8gJ2EnIDogJycsIFwiKFwiKS5jb25jYXQoY29sb3JzLm1hcChmdW5jdGlvbiAobiwgaW5kZXgpIHtcbiAgICByZXR1cm4gaW5kZXggPCAzID8gcGFyc2VJbnQobiwgMTYpIDogTWF0aC5yb3VuZChwYXJzZUludChuLCAxNikgLyAyNTUgKiAxMDAwKSAvIDEwMDA7XG4gIH0pLmpvaW4oJywgJyksIFwiKVwiKSA6ICcnO1xufVxuXG5mdW5jdGlvbiBpbnRUb0hleChpbnQpIHtcbiAgdmFyIGhleCA9IGludC50b1N0cmluZygxNik7XG4gIHJldHVybiBoZXgubGVuZ3RoID09PSAxID8gXCIwXCIuY29uY2F0KGhleCkgOiBoZXg7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgY29sb3IgZnJvbSBDU1MgcmdiIGZvcm1hdCB0byBDU1MgaGV4IGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBSR0IgY29sb3IsIGkuZS4gcmdiKG4sIG4sIG4pXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyByZ2IgY29sb3Igc3RyaW5nLCBpLmUuICNubm5ubm5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JUb0hleChjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci5pbmRleE9mKCcjJykgPT09IDApIHtcbiAgICByZXR1cm4gY29sb3I7XG4gIH1cblxuICB2YXIgX2RlY29tcG9zZUNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpLFxuICAgICAgdmFsdWVzID0gX2RlY29tcG9zZUNvbG9yLnZhbHVlcztcblxuICByZXR1cm4gXCIjXCIuY29uY2F0KHZhbHVlcy5tYXAoZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gaW50VG9IZXgobik7XG4gIH0pLmpvaW4oJycpKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBmcm9tIGhzbCBmb3JtYXQgdG8gcmdiIGZvcm1hdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBIU0wgY29sb3IgdmFsdWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSByZ2IgY29sb3IgdmFsdWVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbFRvUmdiKGNvbG9yKSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICB2YXIgX2NvbG9yID0gY29sb3IsXG4gICAgICB2YWx1ZXMgPSBfY29sb3IudmFsdWVzO1xuICB2YXIgaCA9IHZhbHVlc1swXTtcbiAgdmFyIHMgPSB2YWx1ZXNbMV0gLyAxMDA7XG4gIHZhciBsID0gdmFsdWVzWzJdIC8gMTAwO1xuICB2YXIgYSA9IHMgKiBNYXRoLm1pbihsLCAxIC0gbCk7XG5cbiAgdmFyIGYgPSBmdW5jdGlvbiBmKG4pIHtcbiAgICB2YXIgayA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogKG4gKyBoIC8gMzApICUgMTI7XG4gICAgcmV0dXJuIGwgLSBhICogTWF0aC5tYXgoTWF0aC5taW4oayAtIDMsIDkgLSBrLCAxKSwgLTEpO1xuICB9O1xuXG4gIHZhciB0eXBlID0gJ3JnYic7XG4gIHZhciByZ2IgPSBbTWF0aC5yb3VuZChmKDApICogMjU1KSwgTWF0aC5yb3VuZChmKDgpICogMjU1KSwgTWF0aC5yb3VuZChmKDQpICogMjU1KV07XG5cbiAgaWYgKGNvbG9yLnR5cGUgPT09ICdoc2xhJykge1xuICAgIHR5cGUgKz0gJ2EnO1xuICAgIHJnYi5wdXNoKHZhbHVlc1szXSk7XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3Ioe1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiByZ2JcbiAgfSk7XG59XG4vKipcbiAqIFJldHVybnMgYW4gb2JqZWN0IHdpdGggdGhlIHR5cGUgYW5kIHZhbHVlcyBvZiBhIGNvbG9yLlxuICpcbiAqIE5vdGU6IERvZXMgbm90IHN1cHBvcnQgcmdiICUgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gQSBNVUkgY29sb3Igb2JqZWN0OiB7dHlwZTogc3RyaW5nLCB2YWx1ZXM6IG51bWJlcltdfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXBvc2VDb2xvcihjb2xvcikge1xuICAvLyBJZGVtcG90ZW50XG4gIGlmIChjb2xvci50eXBlKSB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgaWYgKGNvbG9yLmNoYXJBdCgwKSA9PT0gJyMnKSB7XG4gICAgcmV0dXJuIGRlY29tcG9zZUNvbG9yKGhleFRvUmdiKGNvbG9yKSk7XG4gIH1cblxuICB2YXIgbWFya2VyID0gY29sb3IuaW5kZXhPZignKCcpO1xuICB2YXIgdHlwZSA9IGNvbG9yLnN1YnN0cmluZygwLCBtYXJrZXIpO1xuXG4gIGlmIChbJ3JnYicsICdyZ2JhJywgJ2hzbCcsICdoc2xhJ10uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVW5zdXBwb3J0ZWQgYFwiLmNvbmNhdChjb2xvciwgXCJgIGNvbG9yLlxcbldlIHN1cHBvcnQgdGhlIGZvbGxvd2luZyBmb3JtYXRzOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpLlwiKSA6IF9mb3JtYXRNdWlFcnJvck1lc3NhZ2UoMywgY29sb3IpKTtcbiAgfVxuXG4gIHZhciB2YWx1ZXMgPSBjb2xvci5zdWJzdHJpbmcobWFya2VyICsgMSwgY29sb3IubGVuZ3RoIC0gMSkuc3BsaXQoJywnKTtcbiAgdmFsdWVzID0gdmFsdWVzLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdmFsdWVzOiB2YWx1ZXNcbiAgfTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBjb2xvciBvYmplY3Qgd2l0aCB0eXBlIGFuZCB2YWx1ZXMgdG8gYSBzdHJpbmcuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbG9yIC0gRGVjb21wb3NlZCBjb2xvclxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yLnR5cGUgLSBPbmUgb2Y6ICdyZ2InLCAncmdiYScsICdoc2wnLCAnaHNsYSdcbiAqIEBwYXJhbSB7YXJyYXl9IGNvbG9yLnZhbHVlcyAtIFtuLG4sbl0gb3IgW24sbixuLG5dXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmdcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcmVjb21wb3NlQ29sb3IoY29sb3IpIHtcbiAgdmFyIHR5cGUgPSBjb2xvci50eXBlO1xuICB2YXIgdmFsdWVzID0gY29sb3IudmFsdWVzO1xuXG4gIGlmICh0eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIC8vIE9ubHkgY29udmVydCB0aGUgZmlyc3QgMyB2YWx1ZXMgdG8gaW50IChpLmUuIG5vdCBhbHBoYSlcbiAgICB2YWx1ZXMgPSB2YWx1ZXMubWFwKGZ1bmN0aW9uIChuLCBpKSB7XG4gICAgICByZXR1cm4gaSA8IDMgPyBwYXJzZUludChuLCAxMCkgOiBuO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKHR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgdmFsdWVzWzFdID0gXCJcIi5jb25jYXQodmFsdWVzWzFdLCBcIiVcIik7XG4gICAgdmFsdWVzWzJdID0gXCJcIi5jb25jYXQodmFsdWVzWzJdLCBcIiVcIik7XG4gIH1cblxuICByZXR1cm4gXCJcIi5jb25jYXQodHlwZSwgXCIoXCIpLmNvbmNhdCh2YWx1ZXMuam9pbignLCAnKSwgXCIpXCIpO1xufVxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb250cmFzdCByYXRpbyBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gKlxuICogRm9ybXVsYTogaHR0cHM6Ly93d3cudzMub3JnL1RSL1dDQUcyMC1URUNIUy9HMTcuaHRtbCNHMTctdGVzdHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9yZWdyb3VuZCAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gQSBjb250cmFzdCByYXRpbyB2YWx1ZSBpbiB0aGUgcmFuZ2UgMCAtIDIxLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb250cmFzdFJhdGlvKGZvcmVncm91bmQsIGJhY2tncm91bmQpIHtcbiAgdmFyIGx1bUEgPSBnZXRMdW1pbmFuY2UoZm9yZWdyb3VuZCk7XG4gIHZhciBsdW1CID0gZ2V0THVtaW5hbmNlKGJhY2tncm91bmQpO1xuICByZXR1cm4gKE1hdGgubWF4KGx1bUEsIGx1bUIpICsgMC4wNSkgLyAoTWF0aC5taW4obHVtQSwgbHVtQikgKyAwLjA1KTtcbn1cbi8qKlxuICogVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgYW55IHBvaW50IGluIGEgY29sb3Igc3BhY2UsXG4gKiBub3JtYWxpemVkIHRvIDAgZm9yIGRhcmtlc3QgYmxhY2sgYW5kIDEgZm9yIGxpZ2h0ZXN0IHdoaXRlLlxuICpcbiAqIEZvcm11bGE6IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE3Lmh0bWwjRzE3LXRlc3RzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHJldHVybnMge251bWJlcn0gVGhlIHJlbGF0aXZlIGJyaWdodG5lc3Mgb2YgdGhlIGNvbG9yIGluIHRoZSByYW5nZSAwIC0gMVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMdW1pbmFuY2UoY29sb3IpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhciByZ2IgPSBjb2xvci50eXBlID09PSAnaHNsJyA/IGRlY29tcG9zZUNvbG9yKGhzbFRvUmdiKGNvbG9yKSkudmFsdWVzIDogY29sb3IudmFsdWVzO1xuICByZ2IgPSByZ2IubWFwKGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YWwgLz0gMjU1OyAvLyBub3JtYWxpemVkXG5cbiAgICByZXR1cm4gdmFsIDw9IDAuMDM5MjggPyB2YWwgLyAxMi45MiA6IE1hdGgucG93KCh2YWwgKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgfSk7IC8vIFRydW5jYXRlIGF0IDMgZGlnaXRzXG5cbiAgcmV0dXJuIE51bWJlcigoMC4yMTI2ICogcmdiWzBdICsgMC43MTUyICogcmdiWzFdICsgMC4wNzIyICogcmdiWzJdKS50b0ZpeGVkKDMpKTtcbn1cbi8qKlxuICogRGFya2VuIG9yIGxpZ2h0ZW4gYSBjb2xvciwgZGVwZW5kaW5nIG9uIGl0cyBsdW1pbmFuY2UuXG4gKiBMaWdodCBjb2xvcnMgYXJlIGRhcmtlbmVkLCBkYXJrIGNvbG9ycyBhcmUgbGlnaHRlbmVkLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2VmZmljaWVudD0wLjE1IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcGhhc2l6ZShjb2xvcikge1xuICB2YXIgY29lZmZpY2llbnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDAuMTU7XG4gIHJldHVybiBnZXRMdW1pbmFuY2UoY29sb3IpID4gMC41ID8gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkgOiBsaWdodGVuKGNvbG9yLCBjb2VmZmljaWVudCk7XG59XG52YXIgd2FybmVkT25jZSA9IGZhbHNlO1xuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlcyBhcmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gdmFsdWUgdG8gc2V0IHRoZSBhbHBoYSBjaGFubmVsIHRvIGluIHRoZSByYW5nZSAwIC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICpcbiAqIEBkZXByZWNhdGVkXG4gKiBVc2UgYGltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ2AgaW5zdGVhZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmFkZShjb2xvciwgdmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIHdhcm5lZE9uY2UgPSB0cnVlO1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYGZhZGVgIGNvbG9yIHV0aWxpdHkgd2FzIHJlbmFtZWQgdG8gYGFscGhhYCB0byBiZXR0ZXIgZGVzY3JpYmUgaXRzIGZ1bmN0aW9uYWxpdHkuJywgJycsIFwiWW91IHNob3VsZCB1c2UgYGltcG9ydCB7IGFscGhhIH0gZnJvbSAnQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzJ2BcIl0uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhbHBoYShjb2xvciwgdmFsdWUpO1xufVxuLyoqXG4gKiBTZXQgdGhlIGFic29sdXRlIHRyYW5zcGFyZW5jeSBvZiBhIGNvbG9yLlxuICogQW55IGV4aXN0aW5nIGFscGhhIHZhbHVlIGlzIG92ZXJ3cml0dGVuLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb2xvciAtIENTUyBjb2xvciwgaS5lLiBvbmUgb2Y6ICNubm4sICNubm5ubm4sIHJnYigpLCByZ2JhKCksIGhzbCgpLCBoc2xhKClcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIHNldCB0aGUgYWxwaGEgY2hhbm5lbCB0byBpbiB0aGUgcmFuZ2UgMC0xXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIENTUyBjb2xvciBzdHJpbmcuIEhleCBpbnB1dCB2YWx1ZXMgYXJlIHJldHVybmVkIGFzIHJnYlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhbHBoYShjb2xvciwgdmFsdWUpIHtcbiAgY29sb3IgPSBkZWNvbXBvc2VDb2xvcihjb2xvcik7XG4gIHZhbHVlID0gY2xhbXAodmFsdWUpO1xuXG4gIGlmIChjb2xvci50eXBlID09PSAncmdiJyB8fCBjb2xvci50eXBlID09PSAnaHNsJykge1xuICAgIGNvbG9yLnR5cGUgKz0gJ2EnO1xuICB9XG5cbiAgY29sb3IudmFsdWVzWzNdID0gdmFsdWU7XG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIERhcmtlbnMgYSBjb2xvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29sb3IgLSBDU1MgY29sb3IsIGkuZS4gb25lIG9mOiAjbm5uLCAjbm5ubm5uLCByZ2IoKSwgcmdiYSgpLCBoc2woKSwgaHNsYSgpXG4gKiBAcGFyYW0ge251bWJlcn0gY29lZmZpY2llbnQgLSBtdWx0aXBsaWVyIGluIHRoZSByYW5nZSAwIC0gMVxuICogQHJldHVybnMge3N0cmluZ30gQSBDU1MgY29sb3Igc3RyaW5nLiBIZXggaW5wdXQgdmFsdWVzIGFyZSByZXR1cm5lZCBhcyByZ2JcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZGFya2VuKGNvbG9yLCBjb2VmZmljaWVudCkge1xuICBjb2xvciA9IGRlY29tcG9zZUNvbG9yKGNvbG9yKTtcbiAgY29lZmZpY2llbnQgPSBjbGFtcChjb2VmZmljaWVudCk7XG5cbiAgaWYgKGNvbG9yLnR5cGUuaW5kZXhPZignaHNsJykgIT09IC0xKSB7XG4gICAgY29sb3IudmFsdWVzWzJdICo9IDEgLSBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKj0gMSAtIGNvZWZmaWNpZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZWNvbXBvc2VDb2xvcihjb2xvcik7XG59XG4vKipcbiAqIExpZ2h0ZW5zIGEgY29sb3IuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yIC0gQ1NTIGNvbG9yLCBpLmUuIG9uZSBvZjogI25ubiwgI25ubm5ubiwgcmdiKCksIHJnYmEoKSwgaHNsKCksIGhzbGEoKVxuICogQHBhcmFtIHtudW1iZXJ9IGNvZWZmaWNpZW50IC0gbXVsdGlwbGllciBpbiB0aGUgcmFuZ2UgMCAtIDFcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgQ1NTIGNvbG9yIHN0cmluZy4gSGV4IGlucHV0IHZhbHVlcyBhcmUgcmV0dXJuZWQgYXMgcmdiXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxpZ2h0ZW4oY29sb3IsIGNvZWZmaWNpZW50KSB7XG4gIGNvbG9yID0gZGVjb21wb3NlQ29sb3IoY29sb3IpO1xuICBjb2VmZmljaWVudCA9IGNsYW1wKGNvZWZmaWNpZW50KTtcblxuICBpZiAoY29sb3IudHlwZS5pbmRleE9mKCdoc2wnKSAhPT0gLTEpIHtcbiAgICBjb2xvci52YWx1ZXNbMl0gKz0gKDEwMCAtIGNvbG9yLnZhbHVlc1syXSkgKiBjb2VmZmljaWVudDtcbiAgfSBlbHNlIGlmIChjb2xvci50eXBlLmluZGV4T2YoJ3JnYicpICE9PSAtMSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSArPSAxKSB7XG4gICAgICBjb2xvci52YWx1ZXNbaV0gKz0gKDI1NSAtIGNvbG9yLnZhbHVlc1tpXSkgKiBjb2VmZmljaWVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVjb21wb3NlQ29sb3IoY29sb3IpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbi8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbi8vIEl0IGNhbid0IGJlIGNvbmZpZ3VyZWQgYXMgaXQncyB1c2VkIHN0YXRpY2FsbHkgZm9yIHByb3BUeXBlcy5cbmV4cG9ydCB2YXIga2V5cyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXTsgLy8gS2VlcCBpbiBtaW5kIHRoYXQgQG1lZGlhIGlzIGluY2x1c2l2ZSBieSB0aGUgQ1NTIHNwZWNpZmljYXRpb24uXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUJyZWFrcG9pbnRzKGJyZWFrcG9pbnRzKSB7XG4gIHZhciBfYnJlYWtwb2ludHMkdmFsdWVzID0gYnJlYWtwb2ludHMudmFsdWVzLFxuICAgICAgdmFsdWVzID0gX2JyZWFrcG9pbnRzJHZhbHVlcyA9PT0gdm9pZCAwID8ge1xuICAgIHhzOiAwLFxuICAgIHNtOiA2MDAsXG4gICAgbWQ6IDk2MCxcbiAgICBsZzogMTI4MCxcbiAgICB4bDogMTkyMFxuICB9IDogX2JyZWFrcG9pbnRzJHZhbHVlcyxcbiAgICAgIF9icmVha3BvaW50cyR1bml0ID0gYnJlYWtwb2ludHMudW5pdCxcbiAgICAgIHVuaXQgPSBfYnJlYWtwb2ludHMkdW5pdCA9PT0gdm9pZCAwID8gJ3B4JyA6IF9icmVha3BvaW50cyR1bml0LFxuICAgICAgX2JyZWFrcG9pbnRzJHN0ZXAgPSBicmVha3BvaW50cy5zdGVwLFxuICAgICAgc3RlcCA9IF9icmVha3BvaW50cyRzdGVwID09PSB2b2lkIDAgPyA1IDogX2JyZWFrcG9pbnRzJHN0ZXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhicmVha3BvaW50cywgW1widmFsdWVzXCIsIFwidW5pdFwiLCBcInN0ZXBcIl0pO1xuXG4gIGZ1bmN0aW9uIHVwKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IHR5cGVvZiB2YWx1ZXNba2V5XSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5XSA6IGtleTtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWUpLmNvbmNhdCh1bml0LCBcIilcIik7XG4gIH1cblxuICBmdW5jdGlvbiBkb3duKGtleSkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihrZXkpICsgMTtcbiAgICB2YXIgdXBwZXJib3VuZCA9IHZhbHVlc1trZXlzW2VuZEluZGV4XV07XG5cbiAgICBpZiAoZW5kSW5kZXggPT09IGtleXMubGVuZ3RoKSB7XG4gICAgICAvLyB4bCBkb3duIGFwcGxpZXMgdG8gYWxsIHNpemVzXG4gICAgICByZXR1cm4gdXAoJ3hzJyk7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gdHlwZW9mIHVwcGVyYm91bmQgPT09ICdudW1iZXInICYmIGVuZEluZGV4ID4gMCA/IHVwcGVyYm91bmQgOiBrZXk7XG4gICAgcmV0dXJuIFwiQG1lZGlhIChtYXgtd2lkdGg6XCIuY29uY2F0KHZhbHVlIC0gc3RlcCAvIDEwMCkuY29uY2F0KHVuaXQsIFwiKVwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJldHdlZW4oc3RhcnQsIGVuZCkge1xuICAgIHZhciBlbmRJbmRleCA9IGtleXMuaW5kZXhPZihlbmQpO1xuXG4gICAgaWYgKGVuZEluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgIHJldHVybiB1cChzdGFydCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiQG1lZGlhIChtaW4td2lkdGg6XCIuY29uY2F0KHR5cGVvZiB2YWx1ZXNbc3RhcnRdID09PSAnbnVtYmVyJyA/IHZhbHVlc1tzdGFydF0gOiBzdGFydCkuY29uY2F0KHVuaXQsIFwiKSBhbmQgXCIpICsgXCIobWF4LXdpZHRoOlwiLmNvbmNhdCgoZW5kSW5kZXggIT09IC0xICYmIHR5cGVvZiB2YWx1ZXNba2V5c1tlbmRJbmRleCArIDFdXSA9PT0gJ251bWJlcicgPyB2YWx1ZXNba2V5c1tlbmRJbmRleCArIDFdXSA6IGVuZCkgLSBzdGVwIC8gMTAwKS5jb25jYXQodW5pdCwgXCIpXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25seShrZXkpIHtcbiAgICByZXR1cm4gYmV0d2VlbihrZXksIGtleSk7XG4gIH1cblxuICB2YXIgd2FybmVkT25jZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHdpZHRoKGtleSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUud2FybihbXCJNYXRlcmlhbC1VSTogVGhlIGB0aGVtZS5icmVha3BvaW50cy53aWR0aGAgdXRpbGl0eSBpcyBkZXByZWNhdGVkIGJlY2F1c2UgaXQncyByZWR1bmRhbnQuXCIsICdVc2UgdGhlIGB0aGVtZS5icmVha3BvaW50cy52YWx1ZXNgIGluc3RlYWQuJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXNba2V5XTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7XG4gICAga2V5czoga2V5cyxcbiAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICB1cDogdXAsXG4gICAgZG93bjogZG93bixcbiAgICBiZXR3ZWVuOiBiZXR3ZWVuLFxuICAgIG9ubHk6IG9ubHksXG4gICAgd2lkdGg6IHdpZHRoXG4gIH0sIG90aGVyKTtcbn0iLCJpbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGlucykge1xuICB2YXIgX3Rvb2xiYXI7XG5cbiAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICBndXR0ZXJzOiBmdW5jdGlvbiBndXR0ZXJzKCkge1xuICAgICAgdmFyIHN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgICBjb25zb2xlLndhcm4oWydNYXRlcmlhbC1VSTogdGhlbWUubWl4aW5zLmd1dHRlcnMoKSBpcyBkZXByZWNhdGVkLicsICdZb3UgY2FuIHVzZSB0aGUgc291cmNlIG9mIHRoZSBtaXhpbiBkaXJlY3RseTonLCBcIlxcbiAgICAgIHBhZGRpbmdMZWZ0OiB0aGVtZS5zcGFjaW5nKDIpLFxcbiAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygyKSxcXG4gICAgICBbdGhlbWUuYnJlYWtwb2ludHMudXAoJ3NtJyldOiB7XFxuICAgICAgICBwYWRkaW5nTGVmdDogdGhlbWUuc3BhY2luZygzKSxcXG4gICAgICAgIHBhZGRpbmdSaWdodDogdGhlbWUuc3BhY2luZygzKSxcXG4gICAgICB9LFxcbiAgICAgIFwiXS5qb2luKCdcXG4nKSk7XG4gICAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgICBwYWRkaW5nTGVmdDogc3BhY2luZygyKSxcbiAgICAgICAgcGFkZGluZ1JpZ2h0OiBzcGFjaW5nKDIpXG4gICAgICB9LCBzdHlsZXMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYnJlYWtwb2ludHMudXAoJ3NtJyksIF9leHRlbmRzKHtcbiAgICAgICAgcGFkZGluZ0xlZnQ6IHNwYWNpbmcoMyksXG4gICAgICAgIHBhZGRpbmdSaWdodDogc3BhY2luZygzKVxuICAgICAgfSwgc3R5bGVzW2JyZWFrcG9pbnRzLnVwKCdzbScpXSkpKTtcbiAgICB9LFxuICAgIHRvb2xiYXI6IChfdG9vbGJhciA9IHtcbiAgICAgIG1pbkhlaWdodDogNTZcbiAgICB9LCBfZGVmaW5lUHJvcGVydHkoX3Rvb2xiYXIsIFwiXCIuY29uY2F0KGJyZWFrcG9pbnRzLnVwKCd4cycpLCBcIiBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXCIpLCB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfSksIF9kZWZpbmVQcm9wZXJ0eShfdG9vbGJhciwgYnJlYWtwb2ludHMudXAoJ3NtJyksIHtcbiAgICAgIG1pbkhlaWdodDogNjRcbiAgICB9KSwgX3Rvb2xiYXIpXG4gIH0sIG1peGlucyk7XG59IiwidmFyIGNvbW1vbiA9IHtcbiAgYmxhY2s6ICcjMDAwJyxcbiAgd2hpdGU6ICcjZmZmJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1vbjsiLCJ2YXIgZ3JleSA9IHtcbiAgNTA6ICcjZmFmYWZhJyxcbiAgMTAwOiAnI2Y1ZjVmNScsXG4gIDIwMDogJyNlZWVlZWUnLFxuICAzMDA6ICcjZTBlMGUwJyxcbiAgNDAwOiAnI2JkYmRiZCcsXG4gIDUwMDogJyM5ZTllOWUnLFxuICA2MDA6ICcjNzU3NTc1JyxcbiAgNzAwOiAnIzYxNjE2MScsXG4gIDgwMDogJyM0MjQyNDInLFxuICA5MDA6ICcjMjEyMTIxJyxcbiAgQTEwMDogJyNkNWQ1ZDUnLFxuICBBMjAwOiAnI2FhYWFhYScsXG4gIEE0MDA6ICcjMzAzMDMwJyxcbiAgQTcwMDogJyM2MTYxNjEnXG59O1xuZXhwb3J0IGRlZmF1bHQgZ3JleTsiLCJ2YXIgaW5kaWdvID0ge1xuICA1MDogJyNlOGVhZjYnLFxuICAxMDA6ICcjYzVjYWU5JyxcbiAgMjAwOiAnIzlmYThkYScsXG4gIDMwMDogJyM3OTg2Y2InLFxuICA0MDA6ICcjNWM2YmMwJyxcbiAgNTAwOiAnIzNmNTFiNScsXG4gIDYwMDogJyMzOTQ5YWInLFxuICA3MDA6ICcjMzAzZjlmJyxcbiAgODAwOiAnIzI4MzU5MycsXG4gIDkwMDogJyMxYTIzN2UnLFxuICBBMTAwOiAnIzhjOWVmZicsXG4gIEEyMDA6ICcjNTM2ZGZlJyxcbiAgQTQwMDogJyMzZDVhZmUnLFxuICBBNzAwOiAnIzMwNGZmZSdcbn07XG5leHBvcnQgZGVmYXVsdCBpbmRpZ287IiwidmFyIHBpbmsgPSB7XG4gIDUwOiAnI2ZjZTRlYycsXG4gIDEwMDogJyNmOGJiZDAnLFxuICAyMDA6ICcjZjQ4ZmIxJyxcbiAgMzAwOiAnI2YwNjI5MicsXG4gIDQwMDogJyNlYzQwN2EnLFxuICA1MDA6ICcjZTkxZTYzJyxcbiAgNjAwOiAnI2Q4MWI2MCcsXG4gIDcwMDogJyNjMjE4NWInLFxuICA4MDA6ICcjYWQxNDU3JyxcbiAgOTAwOiAnIzg4MGU0ZicsXG4gIEExMDA6ICcjZmY4MGFiJyxcbiAgQTIwMDogJyNmZjQwODEnLFxuICBBNDAwOiAnI2Y1MDA1NycsXG4gIEE3MDA6ICcjYzUxMTYyJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHBpbms7IiwidmFyIHJlZCA9IHtcbiAgNTA6ICcjZmZlYmVlJyxcbiAgMTAwOiAnI2ZmY2RkMicsXG4gIDIwMDogJyNlZjlhOWEnLFxuICAzMDA6ICcjZTU3MzczJyxcbiAgNDAwOiAnI2VmNTM1MCcsXG4gIDUwMDogJyNmNDQzMzYnLFxuICA2MDA6ICcjZTUzOTM1JyxcbiAgNzAwOiAnI2QzMmYyZicsXG4gIDgwMDogJyNjNjI4MjgnLFxuICA5MDA6ICcjYjcxYzFjJyxcbiAgQTEwMDogJyNmZjhhODAnLFxuICBBMjAwOiAnI2ZmNTI1MicsXG4gIEE0MDA6ICcjZmYxNzQ0JyxcbiAgQTcwMDogJyNkNTAwMDAnXG59O1xuZXhwb3J0IGRlZmF1bHQgcmVkOyIsInZhciBvcmFuZ2UgPSB7XG4gIDUwOiAnI2ZmZjNlMCcsXG4gIDEwMDogJyNmZmUwYjInLFxuICAyMDA6ICcjZmZjYzgwJyxcbiAgMzAwOiAnI2ZmYjc0ZCcsXG4gIDQwMDogJyNmZmE3MjYnLFxuICA1MDA6ICcjZmY5ODAwJyxcbiAgNjAwOiAnI2ZiOGMwMCcsXG4gIDcwMDogJyNmNTdjMDAnLFxuICA4MDA6ICcjZWY2YzAwJyxcbiAgOTAwOiAnI2U2NTEwMCcsXG4gIEExMDA6ICcjZmZkMTgwJyxcbiAgQTIwMDogJyNmZmFiNDAnLFxuICBBNDAwOiAnI2ZmOTEwMCcsXG4gIEE3MDA6ICcjZmY2ZDAwJ1xufTtcbmV4cG9ydCBkZWZhdWx0IG9yYW5nZTsiLCJ2YXIgYmx1ZSA9IHtcbiAgNTA6ICcjZTNmMmZkJyxcbiAgMTAwOiAnI2JiZGVmYicsXG4gIDIwMDogJyM5MGNhZjknLFxuICAzMDA6ICcjNjRiNWY2JyxcbiAgNDAwOiAnIzQyYTVmNScsXG4gIDUwMDogJyMyMTk2ZjMnLFxuICA2MDA6ICcjMWU4OGU1JyxcbiAgNzAwOiAnIzE5NzZkMicsXG4gIDgwMDogJyMxNTY1YzAnLFxuICA5MDA6ICcjMGQ0N2ExJyxcbiAgQTEwMDogJyM4MmIxZmYnLFxuICBBMjAwOiAnIzQ0OGFmZicsXG4gIEE0MDA6ICcjMjk3OWZmJyxcbiAgQTcwMDogJyMyOTYyZmYnXG59O1xuZXhwb3J0IGRlZmF1bHQgYmx1ZTsiLCJ2YXIgZ3JlZW4gPSB7XG4gIDUwOiAnI2U4ZjVlOScsXG4gIDEwMDogJyNjOGU2YzknLFxuICAyMDA6ICcjYTVkNmE3JyxcbiAgMzAwOiAnIzgxYzc4NCcsXG4gIDQwMDogJyM2NmJiNmEnLFxuICA1MDA6ICcjNGNhZjUwJyxcbiAgNjAwOiAnIzQzYTA0NycsXG4gIDcwMDogJyMzODhlM2MnLFxuICA4MDA6ICcjMmU3ZDMyJyxcbiAgOTAwOiAnIzFiNWUyMCcsXG4gIEExMDA6ICcjYjlmNmNhJyxcbiAgQTIwMDogJyM2OWYwYWUnLFxuICBBNDAwOiAnIzAwZTY3NicsXG4gIEE3MDA6ICcjMDBjODUzJ1xufTtcbmV4cG9ydCBkZWZhdWx0IGdyZWVuOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjb21tb24gZnJvbSAnLi4vY29sb3JzL2NvbW1vbic7XG5pbXBvcnQgZ3JleSBmcm9tICcuLi9jb2xvcnMvZ3JleSc7XG5pbXBvcnQgaW5kaWdvIGZyb20gJy4uL2NvbG9ycy9pbmRpZ28nO1xuaW1wb3J0IHBpbmsgZnJvbSAnLi4vY29sb3JzL3BpbmsnO1xuaW1wb3J0IHJlZCBmcm9tICcuLi9jb2xvcnMvcmVkJztcbmltcG9ydCBvcmFuZ2UgZnJvbSAnLi4vY29sb3JzL29yYW5nZSc7XG5pbXBvcnQgYmx1ZSBmcm9tICcuLi9jb2xvcnMvYmx1ZSc7XG5pbXBvcnQgZ3JlZW4gZnJvbSAnLi4vY29sb3JzL2dyZWVuJztcbmltcG9ydCB7IGRhcmtlbiwgZ2V0Q29udHJhc3RSYXRpbywgbGlnaHRlbiB9IGZyb20gJy4vY29sb3JNYW5pcHVsYXRvcic7XG5leHBvcnQgdmFyIGxpZ2h0ID0ge1xuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIHRleHQuXG4gIHRleHQ6IHtcbiAgICAvLyBUaGUgbW9zdCBpbXBvcnRhbnQgdGV4dC5cbiAgICBwcmltYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjg3KScsXG4gICAgLy8gU2Vjb25kYXJ5IHRleHQuXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgwLCAwLCAwLCAwLjU0KScsXG4gICAgLy8gRGlzYWJsZWQgdGV4dCBoYXZlIGV2ZW4gbG93ZXIgdmlzdWFsIHByb21pbmVuY2UuXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJyxcbiAgICAvLyBUZXh0IGhpbnRzLlxuICAgIGhpbnQ6ICdyZ2JhKDAsIDAsIDAsIDAuMzgpJ1xuICB9LFxuICAvLyBUaGUgY29sb3IgdXNlZCB0byBkaXZpZGUgZGlmZmVyZW50IGVsZW1lbnRzLlxuICBkaXZpZGVyOiAncmdiYSgwLCAwLCAwLCAwLjEyKScsXG4gIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9ycyB1c2VkIHRvIHN0eWxlIHRoZSBzdXJmYWNlcy5cbiAgLy8gQ29uc2lzdGVuY3kgYmV0d2VlbiB0aGVzZSB2YWx1ZXMgaXMgaW1wb3J0YW50LlxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGNvbW1vbi53aGl0ZSxcbiAgICBkZWZhdWx0OiBncmV5WzUwXVxuICB9LFxuICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gc3R5bGUgdGhlIGFjdGlvbiBlbGVtZW50cy5cbiAgYWN0aW9uOiB7XG4gICAgLy8gVGhlIGNvbG9yIG9mIGFuIGFjdGl2ZSBhY3Rpb24gbGlrZSBhbiBpY29uIGJ1dHRvbi5cbiAgICBhY3RpdmU6ICdyZ2JhKDAsIDAsIDAsIDAuNTQpJyxcbiAgICAvLyBUaGUgY29sb3Igb2YgYW4gaG92ZXJlZCBhY3Rpb24uXG4gICAgaG92ZXI6ICdyZ2JhKDAsIDAsIDAsIDAuMDQpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDQsXG4gICAgLy8gVGhlIGNvbG9yIG9mIGEgc2VsZWN0ZWQgYWN0aW9uLlxuICAgIHNlbGVjdGVkOiAncmdiYSgwLCAwLCAwLCAwLjA4KScsXG4gICAgc2VsZWN0ZWRPcGFjaXR5OiAwLjA4LFxuICAgIC8vIFRoZSBjb2xvciBvZiBhIGRpc2FibGVkIGFjdGlvbi5cbiAgICBkaXNhYmxlZDogJ3JnYmEoMCwgMCwgMCwgMC4yNiknLFxuICAgIC8vIFRoZSBiYWNrZ3JvdW5kIGNvbG9yIG9mIGEgZGlzYWJsZWQgYWN0aW9uLlxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMCwgMCwgMCwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjEyXG4gIH1cbn07XG5leHBvcnQgdmFyIGRhcmsgPSB7XG4gIHRleHQ6IHtcbiAgICBwcmltYXJ5OiBjb21tb24ud2hpdGUsXG4gICAgc2Vjb25kYXJ5OiAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjcpJyxcbiAgICBkaXNhYmxlZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaGludDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KScsXG4gICAgaWNvbjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC41KSdcbiAgfSxcbiAgZGl2aWRlcjogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICBiYWNrZ3JvdW5kOiB7XG4gICAgcGFwZXI6IGdyZXlbODAwXSxcbiAgICBkZWZhdWx0OiAnIzMwMzAzMCdcbiAgfSxcbiAgYWN0aW9uOiB7XG4gICAgYWN0aXZlOiBjb21tb24ud2hpdGUsXG4gICAgaG92ZXI6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMDgpJyxcbiAgICBob3Zlck9wYWNpdHk6IDAuMDgsXG4gICAgc2VsZWN0ZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMTYpJyxcbiAgICBzZWxlY3RlZE9wYWNpdHk6IDAuMTYsXG4gICAgZGlzYWJsZWQ6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMyknLFxuICAgIGRpc2FibGVkQmFja2dyb3VuZDogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGRpc2FibGVkT3BhY2l0eTogMC4zOCxcbiAgICBmb2N1czogJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4xMiknLFxuICAgIGZvY3VzT3BhY2l0eTogMC4xMixcbiAgICBhY3RpdmF0ZWRPcGFjaXR5OiAwLjI0XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFkZExpZ2h0T3JEYXJrKGludGVudCwgZGlyZWN0aW9uLCBzaGFkZSwgdG9uYWxPZmZzZXQpIHtcbiAgdmFyIHRvbmFsT2Zmc2V0TGlnaHQgPSB0b25hbE9mZnNldC5saWdodCB8fCB0b25hbE9mZnNldDtcbiAgdmFyIHRvbmFsT2Zmc2V0RGFyayA9IHRvbmFsT2Zmc2V0LmRhcmsgfHwgdG9uYWxPZmZzZXQgKiAxLjU7XG5cbiAgaWYgKCFpbnRlbnRbZGlyZWN0aW9uXSkge1xuICAgIGlmIChpbnRlbnQuaGFzT3duUHJvcGVydHkoc2hhZGUpKSB7XG4gICAgICBpbnRlbnRbZGlyZWN0aW9uXSA9IGludGVudFtzaGFkZV07XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT09ICdsaWdodCcpIHtcbiAgICAgIGludGVudC5saWdodCA9IGxpZ2h0ZW4oaW50ZW50Lm1haW4sIHRvbmFsT2Zmc2V0TGlnaHQpO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09PSAnZGFyaycpIHtcbiAgICAgIGludGVudC5kYXJrID0gZGFya2VuKGludGVudC5tYWluLCB0b25hbE9mZnNldERhcmspO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVQYWxldHRlKHBhbGV0dGUpIHtcbiAgdmFyIF9wYWxldHRlJHByaW1hcnkgPSBwYWxldHRlLnByaW1hcnksXG4gICAgICBwcmltYXJ5ID0gX3BhbGV0dGUkcHJpbWFyeSA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBpbmRpZ29bMzAwXSxcbiAgICBtYWluOiBpbmRpZ29bNTAwXSxcbiAgICBkYXJrOiBpbmRpZ29bNzAwXVxuICB9IDogX3BhbGV0dGUkcHJpbWFyeSxcbiAgICAgIF9wYWxldHRlJHNlY29uZGFyeSA9IHBhbGV0dGUuc2Vjb25kYXJ5LFxuICAgICAgc2Vjb25kYXJ5ID0gX3BhbGV0dGUkc2Vjb25kYXJ5ID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IHBpbmsuQTIwMCxcbiAgICBtYWluOiBwaW5rLkE0MDAsXG4gICAgZGFyazogcGluay5BNzAwXG4gIH0gOiBfcGFsZXR0ZSRzZWNvbmRhcnksXG4gICAgICBfcGFsZXR0ZSRlcnJvciA9IHBhbGV0dGUuZXJyb3IsXG4gICAgICBlcnJvciA9IF9wYWxldHRlJGVycm9yID09PSB2b2lkIDAgPyB7XG4gICAgbGlnaHQ6IHJlZFszMDBdLFxuICAgIG1haW46IHJlZFs1MDBdLFxuICAgIGRhcms6IHJlZFs3MDBdXG4gIH0gOiBfcGFsZXR0ZSRlcnJvcixcbiAgICAgIF9wYWxldHRlJHdhcm5pbmcgPSBwYWxldHRlLndhcm5pbmcsXG4gICAgICB3YXJuaW5nID0gX3BhbGV0dGUkd2FybmluZyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBvcmFuZ2VbMzAwXSxcbiAgICBtYWluOiBvcmFuZ2VbNTAwXSxcbiAgICBkYXJrOiBvcmFuZ2VbNzAwXVxuICB9IDogX3BhbGV0dGUkd2FybmluZyxcbiAgICAgIF9wYWxldHRlJGluZm8gPSBwYWxldHRlLmluZm8sXG4gICAgICBpbmZvID0gX3BhbGV0dGUkaW5mbyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBibHVlWzMwMF0sXG4gICAgbWFpbjogYmx1ZVs1MDBdLFxuICAgIGRhcms6IGJsdWVbNzAwXVxuICB9IDogX3BhbGV0dGUkaW5mbyxcbiAgICAgIF9wYWxldHRlJHN1Y2Nlc3MgPSBwYWxldHRlLnN1Y2Nlc3MsXG4gICAgICBzdWNjZXNzID0gX3BhbGV0dGUkc3VjY2VzcyA9PT0gdm9pZCAwID8ge1xuICAgIGxpZ2h0OiBncmVlblszMDBdLFxuICAgIG1haW46IGdyZWVuWzUwMF0sXG4gICAgZGFyazogZ3JlZW5bNzAwXVxuICB9IDogX3BhbGV0dGUkc3VjY2VzcyxcbiAgICAgIF9wYWxldHRlJHR5cGUgPSBwYWxldHRlLnR5cGUsXG4gICAgICB0eXBlID0gX3BhbGV0dGUkdHlwZSA9PT0gdm9pZCAwID8gJ2xpZ2h0JyA6IF9wYWxldHRlJHR5cGUsXG4gICAgICBfcGFsZXR0ZSRjb250cmFzdFRocmUgPSBwYWxldHRlLmNvbnRyYXN0VGhyZXNob2xkLFxuICAgICAgY29udHJhc3RUaHJlc2hvbGQgPSBfcGFsZXR0ZSRjb250cmFzdFRocmUgPT09IHZvaWQgMCA/IDMgOiBfcGFsZXR0ZSRjb250cmFzdFRocmUsXG4gICAgICBfcGFsZXR0ZSR0b25hbE9mZnNldCA9IHBhbGV0dGUudG9uYWxPZmZzZXQsXG4gICAgICB0b25hbE9mZnNldCA9IF9wYWxldHRlJHRvbmFsT2Zmc2V0ID09PSB2b2lkIDAgPyAwLjIgOiBfcGFsZXR0ZSR0b25hbE9mZnNldCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHBhbGV0dGUsIFtcInByaW1hcnlcIiwgXCJzZWNvbmRhcnlcIiwgXCJlcnJvclwiLCBcIndhcm5pbmdcIiwgXCJpbmZvXCIsIFwic3VjY2Vzc1wiLCBcInR5cGVcIiwgXCJjb250cmFzdFRocmVzaG9sZFwiLCBcInRvbmFsT2Zmc2V0XCJdKTsgLy8gVXNlIHRoZSBzYW1lIGxvZ2ljIGFzXG4gIC8vIEJvb3RzdHJhcDogaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvMWQ2ZTM3MTBkZDQ0N2RlMWEyMDBmMjllOGZhNTIxZjhhMDkwOGY3MC9zY3NzL19mdW5jdGlvbnMuc2NzcyNMNTlcbiAgLy8gYW5kIG1hdGVyaWFsLWNvbXBvbmVudHMtd2ViIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2Jsb2IvYWM0NmI4ODYzYzRkYWI5ZmMyMmM0YzY2MmRjNmJkMWI2NWRkNjUyZi9wYWNrYWdlcy9tZGMtdGhlbWUvX2Z1bmN0aW9ucy5zY3NzI0w1NFxuXG5cbiAgZnVuY3Rpb24gZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmQpIHtcbiAgICB2YXIgY29udHJhc3RUZXh0ID0gZ2V0Q29udHJhc3RSYXRpbyhiYWNrZ3JvdW5kLCBkYXJrLnRleHQucHJpbWFyeSkgPj0gY29udHJhc3RUaHJlc2hvbGQgPyBkYXJrLnRleHQucHJpbWFyeSA6IGxpZ2h0LnRleHQucHJpbWFyeTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgY29udHJhc3QgPSBnZXRDb250cmFzdFJhdGlvKGJhY2tncm91bmQsIGNvbnRyYXN0VGV4dCk7XG5cbiAgICAgIGlmIChjb250cmFzdCA8IDMpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogVGhlIGNvbnRyYXN0IHJhdGlvIG9mIFwiLmNvbmNhdChjb250cmFzdCwgXCI6MSBmb3IgXCIpLmNvbmNhdChjb250cmFzdFRleHQsIFwiIG9uIFwiKS5jb25jYXQoYmFja2dyb3VuZCksICdmYWxscyBiZWxvdyB0aGUgV0NBRyByZWNvbW1lbmRlZCBhYnNvbHV0ZSBtaW5pbXVtIGNvbnRyYXN0IHJhdGlvIG9mIDM6MS4nLCAnaHR0cHM6Ly93d3cudzMub3JnL1RSLzIwMDgvUkVDLVdDQUcyMC0yMDA4MTIxMS8jdmlzdWFsLWF1ZGlvLWNvbnRyYXN0LWNvbnRyYXN0J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb250cmFzdFRleHQ7XG4gIH1cblxuICB2YXIgYXVnbWVudENvbG9yID0gZnVuY3Rpb24gYXVnbWVudENvbG9yKGNvbG9yKSB7XG4gICAgdmFyIG1haW5TaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNTAwO1xuICAgIHZhciBsaWdodFNoYWRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAzMDA7XG4gICAgdmFyIGRhcmtTaGFkZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogNzAwO1xuICAgIGNvbG9yID0gX2V4dGVuZHMoe30sIGNvbG9yKTtcblxuICAgIGlmICghY29sb3IubWFpbiAmJiBjb2xvclttYWluU2hhZGVdKSB7XG4gICAgICBjb2xvci5tYWluID0gY29sb3JbbWFpblNoYWRlXTtcbiAgICB9XG5cbiAgICBpZiAoIWNvbG9yLm1haW4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBcIk1hdGVyaWFsLVVJOiBUaGUgY29sb3IgcHJvdmlkZWQgdG8gYXVnbWVudENvbG9yKGNvbG9yKSBpcyBpbnZhbGlkLlxcblRoZSBjb2xvciBvYmplY3QgbmVlZHMgdG8gaGF2ZSBhIGBtYWluYCBwcm9wZXJ0eSBvciBhIGBcIi5jb25jYXQobWFpblNoYWRlLCBcImAgcHJvcGVydHkuXCIpIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg0LCBtYWluU2hhZGUpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9yLm1haW4gIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gXCJNYXRlcmlhbC1VSTogVGhlIGNvbG9yIHByb3ZpZGVkIHRvIGF1Z21lbnRDb2xvcihjb2xvcikgaXMgaW52YWxpZC5cXG5gY29sb3IubWFpbmAgc2hvdWxkIGJlIGEgc3RyaW5nLCBidXQgYFwiLmNvbmNhdChKU09OLnN0cmluZ2lmeShjb2xvci5tYWluKSwgXCJgIHdhcyBwcm92aWRlZCBpbnN0ZWFkLlxcblxcbkRpZCB5b3UgaW50ZW5kIHRvIHVzZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBhcHByb2FjaGVzP1xcblxcbmltcG9ydCB7XFx4QTBncmVlbiB9IGZyb20gXFxcIkBtYXRlcmlhbC11aS9jb3JlL2NvbG9yc1xcXCI7XFxuXFxuY29uc3QgdGhlbWUxID0gY3JlYXRlVGhlbWUoeyBwYWxldHRlOiB7XFxuICBwcmltYXJ5OiBncmVlbixcXG59IH0pO1xcblxcbmNvbnN0IHRoZW1lMiA9IGNyZWF0ZVRoZW1lKHsgcGFsZXR0ZToge1xcbiAgcHJpbWFyeTogeyBtYWluOiBncmVlbls1MDBdIH0sXFxufSB9KTtcIikgOiBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlKDUsIEpTT04uc3RyaW5naWZ5KGNvbG9yLm1haW4pKSk7XG4gICAgfVxuXG4gICAgYWRkTGlnaHRPckRhcmsoY29sb3IsICdsaWdodCcsIGxpZ2h0U2hhZGUsIHRvbmFsT2Zmc2V0KTtcbiAgICBhZGRMaWdodE9yRGFyayhjb2xvciwgJ2RhcmsnLCBkYXJrU2hhZGUsIHRvbmFsT2Zmc2V0KTtcblxuICAgIGlmICghY29sb3IuY29udHJhc3RUZXh0KSB7XG4gICAgICBjb2xvci5jb250cmFzdFRleHQgPSBnZXRDb250cmFzdFRleHQoY29sb3IubWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbG9yO1xuICB9O1xuXG4gIHZhciB0eXBlcyA9IHtcbiAgICBkYXJrOiBkYXJrLFxuICAgIGxpZ2h0OiBsaWdodFxuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKCF0eXBlc1t0eXBlXSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgcGFsZXR0ZSB0eXBlIGBcIi5jb25jYXQodHlwZSwgXCJgIGlzIG5vdCBzdXBwb3J0ZWQuXCIpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcGFsZXR0ZU91dHB1dCA9IGRlZXBtZXJnZShfZXh0ZW5kcyh7XG4gICAgLy8gQSBjb2xsZWN0aW9uIG9mIGNvbW1vbiBjb2xvcnMuXG4gICAgY29tbW9uOiBjb21tb24sXG4gICAgLy8gVGhlIHBhbGV0dGUgdHlwZSwgY2FuIGJlIGxpZ2h0IG9yIGRhcmsuXG4gICAgdHlwZTogdHlwZSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHByaW1hcnkgaW50ZXJmYWNlIGVsZW1lbnRzIGZvciBhIHVzZXIuXG4gICAgcHJpbWFyeTogYXVnbWVudENvbG9yKHByaW1hcnkpLFxuICAgIC8vIFRoZSBjb2xvcnMgdXNlZCB0byByZXByZXNlbnQgc2Vjb25kYXJ5IGludGVyZmFjZSBlbGVtZW50cyBmb3IgYSB1c2VyLlxuICAgIHNlY29uZGFyeTogYXVnbWVudENvbG9yKHNlY29uZGFyeSwgJ0E0MDAnLCAnQTIwMCcsICdBNzAwJyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHJlcHJlc2VudCBpbnRlcmZhY2UgZWxlbWVudHMgdGhhdCB0aGUgdXNlciBzaG91bGQgYmUgbWFkZSBhd2FyZSBvZi5cbiAgICBlcnJvcjogYXVnbWVudENvbG9yKGVycm9yKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gcmVwcmVzZW50IHBvdGVudGlhbGx5IGRhbmdlcm91cyBhY3Rpb25zIG9yIGltcG9ydGFudCBtZXNzYWdlcy5cbiAgICB3YXJuaW5nOiBhdWdtZW50Q29sb3Iod2FybmluZyksXG4gICAgLy8gVGhlIGNvbG9ycyB1c2VkIHRvIHByZXNlbnQgaW5mb3JtYXRpb24gdG8gdGhlIHVzZXIgdGhhdCBpcyBuZXV0cmFsIGFuZCBub3QgbmVjZXNzYXJpbHkgaW1wb3J0YW50LlxuICAgIGluZm86IGF1Z21lbnRDb2xvcihpbmZvKSxcbiAgICAvLyBUaGUgY29sb3JzIHVzZWQgdG8gaW5kaWNhdGUgdGhlIHN1Y2Nlc3NmdWwgY29tcGxldGlvbiBvZiBhbiBhY3Rpb24gdGhhdCB1c2VyIHRyaWdnZXJlZC5cbiAgICBzdWNjZXNzOiBhdWdtZW50Q29sb3Ioc3VjY2VzcyksXG4gICAgLy8gVGhlIGdyZXkgY29sb3JzLlxuICAgIGdyZXk6IGdyZXksXG4gICAgLy8gVXNlZCBieSBgZ2V0Q29udHJhc3RUZXh0KClgIHRvIG1heGltaXplIHRoZSBjb250cmFzdCBiZXR3ZWVuXG4gICAgLy8gdGhlIGJhY2tncm91bmQgYW5kIHRoZSB0ZXh0LlxuICAgIGNvbnRyYXN0VGhyZXNob2xkOiBjb250cmFzdFRocmVzaG9sZCxcbiAgICAvLyBUYWtlcyBhIGJhY2tncm91bmQgY29sb3IgYW5kIHJldHVybnMgdGhlIHRleHQgY29sb3IgdGhhdCBtYXhpbWl6ZXMgdGhlIGNvbnRyYXN0LlxuICAgIGdldENvbnRyYXN0VGV4dDogZ2V0Q29udHJhc3RUZXh0LFxuICAgIC8vIEdlbmVyYXRlIGEgcmljaCBjb2xvciBvYmplY3QuXG4gICAgYXVnbWVudENvbG9yOiBhdWdtZW50Q29sb3IsXG4gICAgLy8gVXNlZCBieSB0aGUgZnVuY3Rpb25zIGJlbG93IHRvIHNoaWZ0IGEgY29sb3IncyBsdW1pbmFuY2UgYnkgYXBwcm94aW1hdGVseVxuICAgIC8vIHR3byBpbmRleGVzIHdpdGhpbiBpdHMgdG9uYWwgcGFsZXR0ZS5cbiAgICAvLyBFLmcuLCBzaGlmdCBmcm9tIFJlZCA1MDAgdG8gUmVkIDMwMCBvciBSZWQgNzAwLlxuICAgIHRvbmFsT2Zmc2V0OiB0b25hbE9mZnNldFxuICB9LCB0eXBlc1t0eXBlXSksIG90aGVyKTtcbiAgcmV0dXJuIHBhbGV0dGVPdXRwdXQ7XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcblxuZnVuY3Rpb24gcm91bmQodmFsdWUpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgKiAxZTUpIC8gMWU1O1xufVxuXG52YXIgd2FybmVkT25jZSA9IGZhbHNlO1xuXG5mdW5jdGlvbiByb3VuZFdpdGhEZXByZWNhdGlvbldhcm5pbmcodmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoIXdhcm5lZE9uY2UpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBUaGUgYHRoZW1lLnR5cG9ncmFwaHkucm91bmRgIGhlbHBlciBpcyBkZXByZWNhdGVkLicsICdIZWFkIHRvIGh0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3IvbWlncmF0aW9uLXY0LyN0aGVtZSBmb3IgYSBtaWdyYXRpb24gcGF0aC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB3YXJuZWRPbmNlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcm91bmQodmFsdWUpO1xufVxuXG52YXIgY2FzZUFsbENhcHMgPSB7XG4gIHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnXG59O1xudmFyIGRlZmF1bHRGb250RmFtaWx5ID0gJ1wiUm9ib3RvXCIsIFwiSGVsdmV0aWNhXCIsIFwiQXJpYWxcIiwgc2Fucy1zZXJpZic7XG4vKipcbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS90aGUtdHlwZS1zeXN0ZW0uaHRtbH1cbiAqIEBzZWUgQGxpbmt7aHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vdHlwb2dyYXBoeS91bmRlcnN0YW5kaW5nLXR5cG9ncmFwaHkuaHRtbH1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHkpIHtcbiAgdmFyIF9yZWYgPSB0eXBlb2YgdHlwb2dyYXBoeSA9PT0gJ2Z1bmN0aW9uJyA/IHR5cG9ncmFwaHkocGFsZXR0ZSkgOiB0eXBvZ3JhcGh5LFxuICAgICAgX3JlZiRmb250RmFtaWx5ID0gX3JlZi5mb250RmFtaWx5LFxuICAgICAgZm9udEZhbWlseSA9IF9yZWYkZm9udEZhbWlseSA9PT0gdm9pZCAwID8gZGVmYXVsdEZvbnRGYW1pbHkgOiBfcmVmJGZvbnRGYW1pbHksXG4gICAgICBfcmVmJGZvbnRTaXplID0gX3JlZi5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3JlZiRmb250U2l6ZSA9PT0gdm9pZCAwID8gMTQgOiBfcmVmJGZvbnRTaXplLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TGlnaHQgPSBfcmVmLmZvbnRXZWlnaHRMaWdodCxcbiAgICAgIGZvbnRXZWlnaHRMaWdodCA9IF9yZWYkZm9udFdlaWdodExpZ2h0ID09PSB2b2lkIDAgPyAzMDAgOiBfcmVmJGZvbnRXZWlnaHRMaWdodCxcbiAgICAgIF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9IF9yZWYuZm9udFdlaWdodFJlZ3VsYXIsXG4gICAgICBmb250V2VpZ2h0UmVndWxhciA9IF9yZWYkZm9udFdlaWdodFJlZ3VsYSA9PT0gdm9pZCAwID8gNDAwIDogX3JlZiRmb250V2VpZ2h0UmVndWxhLFxuICAgICAgX3JlZiRmb250V2VpZ2h0TWVkaXVtID0gX3JlZi5mb250V2VpZ2h0TWVkaXVtLFxuICAgICAgZm9udFdlaWdodE1lZGl1bSA9IF9yZWYkZm9udFdlaWdodE1lZGl1bSA9PT0gdm9pZCAwID8gNTAwIDogX3JlZiRmb250V2VpZ2h0TWVkaXVtLFxuICAgICAgX3JlZiRmb250V2VpZ2h0Qm9sZCA9IF9yZWYuZm9udFdlaWdodEJvbGQsXG4gICAgICBmb250V2VpZ2h0Qm9sZCA9IF9yZWYkZm9udFdlaWdodEJvbGQgPT09IHZvaWQgMCA/IDcwMCA6IF9yZWYkZm9udFdlaWdodEJvbGQsXG4gICAgICBfcmVmJGh0bWxGb250U2l6ZSA9IF9yZWYuaHRtbEZvbnRTaXplLFxuICAgICAgaHRtbEZvbnRTaXplID0gX3JlZiRodG1sRm9udFNpemUgPT09IHZvaWQgMCA/IDE2IDogX3JlZiRodG1sRm9udFNpemUsXG4gICAgICBhbGxWYXJpYW50cyA9IF9yZWYuYWxsVmFyaWFudHMsXG4gICAgICBweFRvUmVtMiA9IF9yZWYucHhUb1JlbSxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9yZWYsIFtcImZvbnRGYW1pbHlcIiwgXCJmb250U2l6ZVwiLCBcImZvbnRXZWlnaHRMaWdodFwiLCBcImZvbnRXZWlnaHRSZWd1bGFyXCIsIFwiZm9udFdlaWdodE1lZGl1bVwiLCBcImZvbnRXZWlnaHRCb2xkXCIsIFwiaHRtbEZvbnRTaXplXCIsIFwiYWxsVmFyaWFudHNcIiwgXCJweFRvUmVtXCJdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICh0eXBlb2YgZm9udFNpemUgIT09ICdudW1iZXInKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogYGZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGh0bWxGb250U2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBgaHRtbEZvbnRTaXplYCBpcyByZXF1aXJlZCB0byBiZSBhIG51bWJlci4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29lZiA9IGZvbnRTaXplIC8gMTQ7XG5cbiAgdmFyIHB4VG9SZW0gPSBweFRvUmVtMiB8fCBmdW5jdGlvbiAoc2l6ZSkge1xuICAgIHJldHVybiBcIlwiLmNvbmNhdChzaXplIC8gaHRtbEZvbnRTaXplICogY29lZiwgXCJyZW1cIik7XG4gIH07XG5cbiAgdmFyIGJ1aWxkVmFyaWFudCA9IGZ1bmN0aW9uIGJ1aWxkVmFyaWFudChmb250V2VpZ2h0LCBzaXplLCBsaW5lSGVpZ2h0LCBsZXR0ZXJTcGFjaW5nLCBjYXNpbmcpIHtcbiAgICByZXR1cm4gX2V4dGVuZHMoe1xuICAgICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICAgIGZvbnRXZWlnaHQ6IGZvbnRXZWlnaHQsXG4gICAgICBmb250U2l6ZTogcHhUb1JlbShzaXplKSxcbiAgICAgIC8vIFVuaXRsZXNzIGZvbGxvd2luZyBodHRwczovL21leWVyd2ViLmNvbS9lcmljL3Rob3VnaHRzLzIwMDYvMDIvMDgvdW5pdGxlc3MtbGluZS1oZWlnaHRzL1xuICAgICAgbGluZUhlaWdodDogbGluZUhlaWdodFxuICAgIH0sIGZvbnRGYW1pbHkgPT09IGRlZmF1bHRGb250RmFtaWx5ID8ge1xuICAgICAgbGV0dGVyU3BhY2luZzogXCJcIi5jb25jYXQocm91bmQobGV0dGVyU3BhY2luZyAvIHNpemUpLCBcImVtXCIpXG4gICAgfSA6IHt9LCBjYXNpbmcsIGFsbFZhcmlhbnRzKTtcbiAgfTtcblxuICB2YXIgdmFyaWFudHMgPSB7XG4gICAgaDE6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDk2LCAxLjE2NywgLTEuNSksXG4gICAgaDI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TGlnaHQsIDYwLCAxLjIsIC0wLjUpLFxuICAgIGgzOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDQ4LCAxLjE2NywgMCksXG4gICAgaDQ6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMzQsIDEuMjM1LCAwLjI1KSxcbiAgICBoNTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAyNCwgMS4zMzQsIDApLFxuICAgIGg2OiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMjAsIDEuNiwgMC4xNSksXG4gICAgc3VidGl0bGUxOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodFJlZ3VsYXIsIDE2LCAxLjc1LCAwLjE1KSxcbiAgICBzdWJ0aXRsZTI6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0TWVkaXVtLCAxNCwgMS41NywgMC4xKSxcbiAgICBib2R5MTogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNiwgMS41LCAwLjE1KSxcbiAgICBib2R5MjogYnVpbGRWYXJpYW50KGZvbnRXZWlnaHRSZWd1bGFyLCAxNCwgMS40MywgMC4xNSksXG4gICAgYnV0dG9uOiBidWlsZFZhcmlhbnQoZm9udFdlaWdodE1lZGl1bSwgMTQsIDEuNzUsIDAuNCwgY2FzZUFsbENhcHMpLFxuICAgIGNhcHRpb246IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDEuNjYsIDAuNCksXG4gICAgb3ZlcmxpbmU6IGJ1aWxkVmFyaWFudChmb250V2VpZ2h0UmVndWxhciwgMTIsIDIuNjYsIDEsIGNhc2VBbGxDYXBzKVxuICB9O1xuICByZXR1cm4gZGVlcG1lcmdlKF9leHRlbmRzKHtcbiAgICBodG1sRm9udFNpemU6IGh0bWxGb250U2l6ZSxcbiAgICBweFRvUmVtOiBweFRvUmVtLFxuICAgIHJvdW5kOiByb3VuZFdpdGhEZXByZWNhdGlvbldhcm5pbmcsXG4gICAgLy8gVE9ETyB2NTogcmVtb3ZlXG4gICAgZm9udEZhbWlseTogZm9udEZhbWlseSxcbiAgICBmb250U2l6ZTogZm9udFNpemUsXG4gICAgZm9udFdlaWdodExpZ2h0OiBmb250V2VpZ2h0TGlnaHQsXG4gICAgZm9udFdlaWdodFJlZ3VsYXI6IGZvbnRXZWlnaHRSZWd1bGFyLFxuICAgIGZvbnRXZWlnaHRNZWRpdW06IGZvbnRXZWlnaHRNZWRpdW0sXG4gICAgZm9udFdlaWdodEJvbGQ6IGZvbnRXZWlnaHRCb2xkXG4gIH0sIHZhcmlhbnRzKSwgb3RoZXIsIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwXG5cbiAgfSk7XG59IiwidmFyIHNoYWRvd0tleVVtYnJhT3BhY2l0eSA9IDAuMjtcbnZhciBzaGFkb3dLZXlQZW51bWJyYU9wYWNpdHkgPSAwLjE0O1xudmFyIHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5ID0gMC4xMjtcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KCkge1xuICByZXR1cm4gW1wiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5VW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s1XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s2XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gNyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s3XSwgXCJweCByZ2JhKDAsMCwwLFwiKS5jb25jYXQoc2hhZG93S2V5UGVudW1icmFPcGFjaXR5LCBcIilcIiksIFwiXCIuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s4XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gOSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s5XSwgXCJweCBcIikuY29uY2F0KGFyZ3VtZW50cy5sZW5ndGggPD0gMTAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMTBdLCBcInB4IFwiKS5jb25jYXQoYXJndW1lbnRzLmxlbmd0aCA8PSAxMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxMV0sIFwicHggcmdiYSgwLDAsMCxcIikuY29uY2F0KHNoYWRvd0FtYmllbnRTaGFkb3dPcGFjaXR5LCBcIilcIildLmpvaW4oJywnKTtcbn0gLy8gVmFsdWVzIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdGVyaWFsLWNvbXBvbmVudHMvbWF0ZXJpYWwtY29tcG9uZW50cy13ZWIvYmxvYi9iZTg3NDdmOTQ1NzQ2NjljYjVlN2FkZDFhN2M1NGZhNDFhODljZWM3L3BhY2thZ2VzL21kYy1lbGV2YXRpb24vX3ZhcmlhYmxlcy5zY3NzXG5cblxudmFyIHNoYWRvd3MgPSBbJ25vbmUnLCBjcmVhdGVTaGFkb3coMCwgMiwgMSwgLTEsIDAsIDEsIDEsIDAsIDAsIDEsIDMsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMSwgLTIsIDAsIDIsIDIsIDAsIDAsIDEsIDUsIDApLCBjcmVhdGVTaGFkb3coMCwgMywgMywgLTIsIDAsIDMsIDQsIDAsIDAsIDEsIDgsIDApLCBjcmVhdGVTaGFkb3coMCwgMiwgNCwgLTEsIDAsIDQsIDUsIDAsIDAsIDEsIDEwLCAwKSwgY3JlYXRlU2hhZG93KDAsIDMsIDUsIC0xLCAwLCA1LCA4LCAwLCAwLCAxLCAxNCwgMCksIGNyZWF0ZVNoYWRvdygwLCAzLCA1LCAtMSwgMCwgNiwgMTAsIDAsIDAsIDEsIDE4LCAwKSwgY3JlYXRlU2hhZG93KDAsIDQsIDUsIC0yLCAwLCA3LCAxMCwgMSwgMCwgMiwgMTYsIDEpLCBjcmVhdGVTaGFkb3coMCwgNSwgNSwgLTMsIDAsIDgsIDEwLCAxLCAwLCAzLCAxNCwgMiksIGNyZWF0ZVNoYWRvdygwLCA1LCA2LCAtMywgMCwgOSwgMTIsIDEsIDAsIDMsIDE2LCAyKSwgY3JlYXRlU2hhZG93KDAsIDYsIDYsIC0zLCAwLCAxMCwgMTQsIDEsIDAsIDQsIDE4LCAzKSwgY3JlYXRlU2hhZG93KDAsIDYsIDcsIC00LCAwLCAxMSwgMTUsIDEsIDAsIDQsIDIwLCAzKSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMiwgMTcsIDIsIDAsIDUsIDIyLCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDgsIC00LCAwLCAxMywgMTksIDIsIDAsIDUsIDI0LCA0KSwgY3JlYXRlU2hhZG93KDAsIDcsIDksIC00LCAwLCAxNCwgMjEsIDIsIDAsIDUsIDI2LCA0KSwgY3JlYXRlU2hhZG93KDAsIDgsIDksIC01LCAwLCAxNSwgMjIsIDIsIDAsIDYsIDI4LCA1KSwgY3JlYXRlU2hhZG93KDAsIDgsIDEwLCAtNSwgMCwgMTYsIDI0LCAyLCAwLCA2LCAzMCwgNSksIGNyZWF0ZVNoYWRvdygwLCA4LCAxMSwgLTUsIDAsIDE3LCAyNiwgMiwgMCwgNiwgMzIsIDUpLCBjcmVhdGVTaGFkb3coMCwgOSwgMTEsIC01LCAwLCAxOCwgMjgsIDIsIDAsIDcsIDM0LCA2KSwgY3JlYXRlU2hhZG93KDAsIDksIDEyLCAtNiwgMCwgMTksIDI5LCAyLCAwLCA3LCAzNiwgNiksIGNyZWF0ZVNoYWRvdygwLCAxMCwgMTMsIC02LCAwLCAyMCwgMzEsIDMsIDAsIDgsIDM4LCA3KSwgY3JlYXRlU2hhZG93KDAsIDEwLCAxMywgLTYsIDAsIDIxLCAzMywgMywgMCwgOCwgNDAsIDcpLCBjcmVhdGVTaGFkb3coMCwgMTAsIDE0LCAtNiwgMCwgMjIsIDM1LCAzLCAwLCA4LCA0MiwgNyksIGNyZWF0ZVNoYWRvdygwLCAxMSwgMTQsIC03LCAwLCAyMywgMzYsIDMsIDAsIDksIDQ0LCA4KSwgY3JlYXRlU2hhZG93KDAsIDExLCAxNSwgLTcsIDAsIDI0LCAzOCwgMywgMCwgOSwgNDYsIDgpXTtcbmV4cG9ydCBkZWZhdWx0IHNoYWRvd3M7IiwidmFyIHNoYXBlID0ge1xuICBib3JkZXJSYWRpdXM6IDRcbn07XG5leHBvcnQgZGVmYXVsdCBzaGFwZTsiLCJpbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3R5cGVvZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnOyAvLyBUaGUgYnJlYWtwb2ludCAqKnN0YXJ0KiogYXQgdGhpcyB2YWx1ZS5cbi8vIEZvciBpbnN0YW5jZSB3aXRoIHRoZSBmaXJzdCBicmVha3BvaW50IHhzOiBbeHMsIHNtWy5cblxudmFyIHZhbHVlcyA9IHtcbiAgeHM6IDAsXG4gIHNtOiA2MDAsXG4gIG1kOiA5NjAsXG4gIGxnOiAxMjgwLFxuICB4bDogMTkyMFxufTtcbnZhciBkZWZhdWx0QnJlYWtwb2ludHMgPSB7XG4gIC8vIFNvcnRlZCBBU0MgYnkgc2l6ZS4gVGhhdCdzIGltcG9ydGFudC5cbiAgLy8gSXQgY2FuJ3QgYmUgY29uZmlndXJlZCBhcyBpdCdzIHVzZWQgc3RhdGljYWxseSBmb3IgcHJvcFR5cGVzLlxuICBrZXlzOiBbJ3hzJywgJ3NtJywgJ21kJywgJ2xnJywgJ3hsJ10sXG4gIHVwOiBmdW5jdGlvbiB1cChrZXkpIHtcbiAgICByZXR1cm4gXCJAbWVkaWEgKG1pbi13aWR0aDpcIi5jb25jYXQodmFsdWVzW2tleV0sIFwicHgpXCIpO1xuICB9XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghcHJvcHMudGhlbWUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgYXJlIGNhbGxpbmcgYSBzdHlsZSBmdW5jdGlvbiB3aXRob3V0IGEgdGhlbWUgdmFsdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcFZhbHVlKSkge1xuICAgIHZhciB0aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuICAgIHJldHVybiBwcm9wVmFsdWUucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0sIGluZGV4KSB7XG4gICAgICBhY2NbdGhlbWVCcmVha3BvaW50cy51cCh0aGVtZUJyZWFrcG9pbnRzLmtleXNbaW5kZXhdKV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2luZGV4XSk7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KTtcbiAgfVxuXG4gIGlmIChfdHlwZW9mKHByb3BWYWx1ZSkgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIF90aGVtZUJyZWFrcG9pbnRzID0gcHJvcHMudGhlbWUuYnJlYWtwb2ludHMgfHwgZGVmYXVsdEJyZWFrcG9pbnRzO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHByb3BWYWx1ZSkucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGJyZWFrcG9pbnQpIHtcbiAgICAgIGFjY1tfdGhlbWVCcmVha3BvaW50cy51cChicmVha3BvaW50KV0gPSBzdHlsZUZyb21Qcm9wVmFsdWUocHJvcFZhbHVlW2JyZWFrcG9pbnRdKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9XG5cbiAgdmFyIG91dHB1dCA9IHN0eWxlRnJvbVByb3BWYWx1ZShwcm9wVmFsdWUpO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5mdW5jdGlvbiBicmVha3BvaW50cyhzdHlsZUZ1bmN0aW9uKSB7XG4gIHZhciBuZXdTdHlsZUZ1bmN0aW9uID0gZnVuY3Rpb24gbmV3U3R5bGVGdW5jdGlvbihwcm9wcykge1xuICAgIHZhciBiYXNlID0gc3R5bGVGdW5jdGlvbihwcm9wcyk7XG4gICAgdmFyIHRoZW1lQnJlYWtwb2ludHMgPSBwcm9wcy50aGVtZS5icmVha3BvaW50cyB8fCBkZWZhdWx0QnJlYWtwb2ludHM7XG4gICAgdmFyIGV4dGVuZGVkID0gdGhlbWVCcmVha3BvaW50cy5rZXlzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgIGlmIChwcm9wc1trZXldKSB7XG4gICAgICAgIGFjYyA9IGFjYyB8fCB7fTtcbiAgICAgICAgYWNjW3RoZW1lQnJlYWtwb2ludHMudXAoa2V5KV0gPSBzdHlsZUZ1bmN0aW9uKF9leHRlbmRzKHtcbiAgICAgICAgICB0aGVtZTogcHJvcHMudGhlbWVcbiAgICAgICAgfSwgcHJvcHNba2V5XSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG51bGwpO1xuICAgIHJldHVybiBtZXJnZShiYXNlLCBleHRlbmRlZCk7XG4gIH07XG5cbiAgbmV3U3R5bGVGdW5jdGlvbi5wcm9wVHlwZXMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nID8gX2V4dGVuZHMoe30sIHN0eWxlRnVuY3Rpb24ucHJvcFR5cGVzLCB7XG4gICAgeHM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc206IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbWQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbGc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgeGw6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkgOiB7fTtcbiAgbmV3U3R5bGVGdW5jdGlvbi5maWx0ZXJQcm9wcyA9IFsneHMnLCAnc20nLCAnbWQnLCAnbGcnLCAneGwnXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KHN0eWxlRnVuY3Rpb24uZmlsdGVyUHJvcHMpKTtcbiAgcmV0dXJuIG5ld1N0eWxlRnVuY3Rpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzOyIsImltcG9ydCB7IGRlZXBtZXJnZSB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5cbmZ1bmN0aW9uIG1lcmdlKGFjYywgaXRlbSkge1xuICBpZiAoIWl0ZW0pIHtcbiAgICByZXR1cm4gYWNjO1xuICB9XG5cbiAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGl0ZW0sIHtcbiAgICBjbG9uZTogZmFsc2UgLy8gTm8gbmVlZCB0byBjbG9uZSBkZWVwLCBpdCdzIHdheSBmYXN0ZXIuXG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1lcmdlOyIsImltcG9ydCBfc2xpY2VkVG9BcnJheSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheVwiO1xuaW1wb3J0IHJlc3BvbnNpdmVQcm9wVHlwZSBmcm9tICcuL3Jlc3BvbnNpdmVQcm9wVHlwZSc7XG5pbXBvcnQgeyBoYW5kbGVCcmVha3BvaW50cyB9IGZyb20gJy4vYnJlYWtwb2ludHMnO1xuaW1wb3J0IG1lcmdlIGZyb20gJy4vbWVyZ2UnO1xuaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplJztcbnZhciBwcm9wZXJ0aWVzID0ge1xuICBtOiAnbWFyZ2luJyxcbiAgcDogJ3BhZGRpbmcnXG59O1xudmFyIGRpcmVjdGlvbnMgPSB7XG4gIHQ6ICdUb3AnLFxuICByOiAnUmlnaHQnLFxuICBiOiAnQm90dG9tJyxcbiAgbDogJ0xlZnQnLFxuICB4OiBbJ0xlZnQnLCAnUmlnaHQnXSxcbiAgeTogWydUb3AnLCAnQm90dG9tJ11cbn07XG52YXIgYWxpYXNlcyA9IHtcbiAgbWFyZ2luWDogJ214JyxcbiAgbWFyZ2luWTogJ215JyxcbiAgcGFkZGluZ1g6ICdweCcsXG4gIHBhZGRpbmdZOiAncHknXG59OyAvLyBtZW1vaXplKCkgaW1wYWN0OlxuLy8gRnJvbSAzMDAsMDAwIG9wcy9zZWNcbi8vIFRvIDM1MCwwMDAgb3BzL3NlY1xuXG52YXIgZ2V0Q3NzUHJvcGVydGllcyA9IG1lbW9pemUoZnVuY3Rpb24gKHByb3ApIHtcbiAgLy8gSXQncyBub3QgYSBzaG9ydGhhbmQgbm90YXRpb24uXG4gIGlmIChwcm9wLmxlbmd0aCA+IDIpIHtcbiAgICBpZiAoYWxpYXNlc1twcm9wXSkge1xuICAgICAgcHJvcCA9IGFsaWFzZXNbcHJvcF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBbcHJvcF07XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm9wJHNwbGl0ID0gcHJvcC5zcGxpdCgnJyksXG4gICAgICBfcHJvcCRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfcHJvcCRzcGxpdCwgMiksXG4gICAgICBhID0gX3Byb3Akc3BsaXQyWzBdLFxuICAgICAgYiA9IF9wcm9wJHNwbGl0MlsxXTtcblxuICB2YXIgcHJvcGVydHkgPSBwcm9wZXJ0aWVzW2FdO1xuICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uc1tiXSB8fCAnJztcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoZGlyZWN0aW9uKSA/IGRpcmVjdGlvbi5tYXAoZnVuY3Rpb24gKGRpcikge1xuICAgIHJldHVybiBwcm9wZXJ0eSArIGRpcjtcbiAgfSkgOiBbcHJvcGVydHkgKyBkaXJlY3Rpb25dO1xufSk7XG52YXIgc3BhY2luZ0tleXMgPSBbJ20nLCAnbXQnLCAnbXInLCAnbWInLCAnbWwnLCAnbXgnLCAnbXknLCAncCcsICdwdCcsICdwcicsICdwYicsICdwbCcsICdweCcsICdweScsICdtYXJnaW4nLCAnbWFyZ2luVG9wJywgJ21hcmdpblJpZ2h0JywgJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblgnLCAnbWFyZ2luWScsICdwYWRkaW5nJywgJ3BhZGRpbmdUb3AnLCAncGFkZGluZ1JpZ2h0JywgJ3BhZGRpbmdCb3R0b20nLCAncGFkZGluZ0xlZnQnLCAncGFkZGluZ1gnLCAncGFkZGluZ1knXTtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpIHtcbiAgdmFyIHRoZW1lU3BhY2luZyA9IHRoZW1lLnNwYWNpbmcgfHwgODtcblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFicykge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBhYnMgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBFeHBlY3RlZCBzcGFjaW5nIGFyZ3VtZW50IHRvIGJlIGEgbnVtYmVyLCBnb3QgXCIuY29uY2F0KGFicywgXCIuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhlbWVTcGFjaW5nICogYWJzO1xuICAgIH07XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh0aGVtZVNwYWNpbmcpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChhYnMpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmIChhYnMgPiB0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSB2YWx1ZSBwcm92aWRlZCAoXCIuY29uY2F0KGFicywgXCIpIG92ZXJmbG93cy5cIiksIFwiVGhlIHN1cHBvcnRlZCB2YWx1ZXMgYXJlOiBcIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkodGhlbWVTcGFjaW5nKSwgXCIuXCIpLCBcIlwiLmNvbmNhdChhYnMsIFwiID4gXCIpLmNvbmNhdCh0aGVtZVNwYWNpbmcubGVuZ3RoIC0gMSwgXCIsIHlvdSBuZWVkIHRvIGFkZCB0aGUgbWlzc2luZyB2YWx1ZXMuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW1lU3BhY2luZ1thYnNdO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIHRoZW1lU3BhY2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0aGVtZVNwYWNpbmc7XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBgdGhlbWUuc3BhY2luZ2AgdmFsdWUgKFwiLmNvbmNhdCh0aGVtZVNwYWNpbmcsIFwiKSBpcyBpbnZhbGlkLlwiKSwgJ0l0IHNob3VsZCBiZSBhIG51bWJlciwgYW4gYXJyYXkgb3IgYSBmdW5jdGlvbi4nXS5qb2luKCdcXG4nKSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlKHRyYW5zZm9ybWVyLCBwcm9wVmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdzdHJpbmcnIHx8IHByb3BWYWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHByb3BWYWx1ZTtcbiAgfVxuXG4gIHZhciBhYnMgPSBNYXRoLmFicyhwcm9wVmFsdWUpO1xuICB2YXIgdHJhbnNmb3JtZWQgPSB0cmFuc2Zvcm1lcihhYnMpO1xuXG4gIGlmIChwcm9wVmFsdWUgPj0gMCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHJhbnNmb3JtZWQgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIC10cmFuc2Zvcm1lZDtcbiAgfVxuXG4gIHJldHVybiBcIi1cIi5jb25jYXQodHJhbnNmb3JtZWQpO1xufVxuXG5mdW5jdGlvbiBnZXRTdHlsZUZyb21Qcm9wVmFsdWUoY3NzUHJvcGVydGllcywgdHJhbnNmb3JtZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wVmFsdWUpIHtcbiAgICByZXR1cm4gY3NzUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3NzUHJvcGVydHkpIHtcbiAgICAgIGFjY1tjc3NQcm9wZXJ0eV0gPSBnZXRWYWx1ZSh0cmFuc2Zvcm1lciwgcHJvcFZhbHVlKTtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwge30pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzcGFjaW5nKHByb3BzKSB7XG4gIHZhciB0aGVtZSA9IHByb3BzLnRoZW1lO1xuICB2YXIgdHJhbnNmb3JtZXIgPSBjcmVhdGVVbmFyeVNwYWNpbmcodGhlbWUpO1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgIC8vIFVzaW5nIGEgaGFzaCBjb21wdXRhdGlvbiBvdmVyIGFuIGFycmF5IGl0ZXJhdGlvbiBjb3VsZCBiZSBmYXN0ZXIsIGJ1dCB3aXRoIG9ubHkgMjggaXRlbXMsXG4gICAgLy8gaXQncyBkb2Vzbid0IHdvcnRoIHRoZSBidW5kbGUgc2l6ZS5cbiAgICBpZiAoc3BhY2luZ0tleXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBjc3NQcm9wZXJ0aWVzID0gZ2V0Q3NzUHJvcGVydGllcyhwcm9wKTtcbiAgICB2YXIgc3R5bGVGcm9tUHJvcFZhbHVlID0gZ2V0U3R5bGVGcm9tUHJvcFZhbHVlKGNzc1Byb3BlcnRpZXMsIHRyYW5zZm9ybWVyKTtcbiAgICB2YXIgcHJvcFZhbHVlID0gcHJvcHNbcHJvcF07XG4gICAgcmV0dXJuIGhhbmRsZUJyZWFrcG9pbnRzKHByb3BzLCBwcm9wVmFsdWUsIHN0eWxlRnJvbVByb3BWYWx1ZSk7XG4gIH0pLnJlZHVjZShtZXJnZSwge30pO1xufVxuXG5zcGFjaW5nLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgPyBzcGFjaW5nS2V5cy5yZWR1Y2UoZnVuY3Rpb24gKG9iaiwga2V5KSB7XG4gIG9ialtrZXldID0gcmVzcG9uc2l2ZVByb3BUeXBlO1xuICByZXR1cm4gb2JqO1xufSwge30pIDoge307XG5zcGFjaW5nLmZpbHRlclByb3BzID0gc3BhY2luZ0tleXM7XG5leHBvcnQgZGVmYXVsdCBzcGFjaW5nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIGNhY2hlID0ge307XG4gIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgaWYgKGNhY2hlW2FyZ10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgY2FjaGVbYXJnXSA9IGZuKGFyZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhY2hlW2FyZ107XG4gIH07XG59IiwiaW1wb3J0IHsgY3JlYXRlVW5hcnlTcGFjaW5nIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N5c3RlbSc7XG52YXIgd2Fybk9uY2U7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTcGFjaW5nKCkge1xuICB2YXIgc3BhY2luZ0lucHV0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiA4O1xuXG4gIC8vIEFscmVhZHkgdHJhbnNmb3JtZWQuXG4gIGlmIChzcGFjaW5nSW5wdXQubXVpKSB7XG4gICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgfSAvLyBNYXRlcmlhbCBEZXNpZ24gbGF5b3V0cyBhcmUgdmlzdWFsbHkgYmFsYW5jZWQuIE1vc3QgbWVhc3VyZW1lbnRzIGFsaWduIHRvIGFuIDhkcCBncmlkIGFwcGxpZWQsIHdoaWNoIGFsaWducyBib3RoIHNwYWNpbmcgYW5kIHRoZSBvdmVyYWxsIGxheW91dC5cbiAgLy8gU21hbGxlciBjb21wb25lbnRzLCBzdWNoIGFzIGljb25zIGFuZCB0eXBlLCBjYW4gYWxpZ24gdG8gYSA0ZHAgZ3JpZC5cbiAgLy8gaHR0cHM6Ly9tYXRlcmlhbC5pby9kZXNpZ24vbGF5b3V0L3VuZGVyc3RhbmRpbmctbGF5b3V0Lmh0bWwjdXNhZ2VcblxuXG4gIHZhciB0cmFuc2Zvcm0gPSBjcmVhdGVVbmFyeVNwYWNpbmcoe1xuICAgIHNwYWNpbmc6IHNwYWNpbmdJbnB1dFxuICB9KTtcblxuICB2YXIgc3BhY2luZyA9IGZ1bmN0aW9uIHNwYWNpbmcoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIShhcmdzLmxlbmd0aCA8PSA0KSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFRvbyBtYW55IGFyZ3VtZW50cyBwcm92aWRlZCwgZXhwZWN0ZWQgYmV0d2VlbiAwIGFuZCA0LCBnb3QgXCIuY29uY2F0KGFyZ3MubGVuZ3RoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gdHJhbnNmb3JtKDEpO1xuICAgIH1cblxuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybShhcmdzWzBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJncy5tYXAoZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgICBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYXJndW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXRwdXQgPSB0cmFuc2Zvcm0oYXJndW1lbnQpO1xuICAgICAgcmV0dXJuIHR5cGVvZiBvdXRwdXQgPT09ICdudW1iZXInID8gXCJcIi5jb25jYXQob3V0cHV0LCBcInB4XCIpIDogb3V0cHV0O1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfTsgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdG8gcmVtb3ZlIGluIHY1LlxuXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNwYWNpbmcsICd1bml0Jywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgaWYgKCF3YXJuT25jZSB8fCBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Rlc3QnKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiB0aGVtZS5zcGFjaW5nLnVuaXQgdXNhZ2UgaGFzIGJlZW4gZGVwcmVjYXRlZC4nLCAnSXQgd2lsbCBiZSByZW1vdmVkIGluIHY1LicsICdZb3UgY2FuIHJlcGxhY2UgYHRoZW1lLnNwYWNpbmcudW5pdCAqIHlgIHdpdGggYHRoZW1lLnNwYWNpbmcoeSlgLicsICcnLCAnWW91IGNhbiB1c2UgdGhlIGBodHRwczovL2dpdGh1Yi5jb20vbXVpLW9yZy9tYXRlcmlhbC11aS90cmVlL21hc3Rlci9wYWNrYWdlcy9tYXRlcmlhbC11aS1jb2RlbW9kL1JFQURNRS5tZCN0aGVtZS1zcGFjaW5nLWFwaWAgbWlncmF0aW9uIGhlbHBlciB0byBtYWtlIHRoZSBwcm9jZXNzIHNtb290aGVyLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhcm5PbmNlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNwYWNpbmdJbnB1dDtcbiAgICB9XG4gIH0pO1xuICBzcGFjaW5nLm11aSA9IHRydWU7XG4gIHJldHVybiBzcGFjaW5nO1xufSIsImltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVCcmVha3BvaW50cyBmcm9tICcuL2NyZWF0ZUJyZWFrcG9pbnRzJztcbmltcG9ydCBjcmVhdGVNaXhpbnMgZnJvbSAnLi9jcmVhdGVNaXhpbnMnO1xuaW1wb3J0IGNyZWF0ZVBhbGV0dGUgZnJvbSAnLi9jcmVhdGVQYWxldHRlJztcbmltcG9ydCBjcmVhdGVUeXBvZ3JhcGh5IGZyb20gJy4vY3JlYXRlVHlwb2dyYXBoeSc7XG5pbXBvcnQgc2hhZG93cyBmcm9tICcuL3NoYWRvd3MnO1xuaW1wb3J0IHNoYXBlIGZyb20gJy4vc2hhcGUnO1xuaW1wb3J0IGNyZWF0ZVNwYWNpbmcgZnJvbSAnLi9jcmVhdGVTcGFjaW5nJztcbmltcG9ydCB0cmFuc2l0aW9ucyBmcm9tICcuL3RyYW5zaXRpb25zJztcbmltcG9ydCB6SW5kZXggZnJvbSAnLi96SW5kZXgnO1xuXG5mdW5jdGlvbiBjcmVhdGVUaGVtZSgpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBfb3B0aW9ucyRicmVha3BvaW50cyA9IG9wdGlvbnMuYnJlYWtwb2ludHMsXG4gICAgICBicmVha3BvaW50c0lucHV0ID0gX29wdGlvbnMkYnJlYWtwb2ludHMgPT09IHZvaWQgMCA/IHt9IDogX29wdGlvbnMkYnJlYWtwb2ludHMsXG4gICAgICBfb3B0aW9ucyRtaXhpbnMgPSBvcHRpb25zLm1peGlucyxcbiAgICAgIG1peGluc0lucHV0ID0gX29wdGlvbnMkbWl4aW5zID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJG1peGlucyxcbiAgICAgIF9vcHRpb25zJHBhbGV0dGUgPSBvcHRpb25zLnBhbGV0dGUsXG4gICAgICBwYWxldHRlSW5wdXQgPSBfb3B0aW9ucyRwYWxldHRlID09PSB2b2lkIDAgPyB7fSA6IF9vcHRpb25zJHBhbGV0dGUsXG4gICAgICBzcGFjaW5nSW5wdXQgPSBvcHRpb25zLnNwYWNpbmcsXG4gICAgICBfb3B0aW9ucyR0eXBvZ3JhcGh5ID0gb3B0aW9ucy50eXBvZ3JhcGh5LFxuICAgICAgdHlwb2dyYXBoeUlucHV0ID0gX29wdGlvbnMkdHlwb2dyYXBoeSA9PT0gdm9pZCAwID8ge30gOiBfb3B0aW9ucyR0eXBvZ3JhcGh5LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiYnJlYWtwb2ludHNcIiwgXCJtaXhpbnNcIiwgXCJwYWxldHRlXCIsIFwic3BhY2luZ1wiLCBcInR5cG9ncmFwaHlcIl0pO1xuXG4gIHZhciBwYWxldHRlID0gY3JlYXRlUGFsZXR0ZShwYWxldHRlSW5wdXQpO1xuICB2YXIgYnJlYWtwb2ludHMgPSBjcmVhdGVCcmVha3BvaW50cyhicmVha3BvaW50c0lucHV0KTtcbiAgdmFyIHNwYWNpbmcgPSBjcmVhdGVTcGFjaW5nKHNwYWNpbmdJbnB1dCk7XG4gIHZhciBtdWlUaGVtZSA9IGRlZXBtZXJnZSh7XG4gICAgYnJlYWtwb2ludHM6IGJyZWFrcG9pbnRzLFxuICAgIGRpcmVjdGlvbjogJ2x0cicsXG4gICAgbWl4aW5zOiBjcmVhdGVNaXhpbnMoYnJlYWtwb2ludHMsIHNwYWNpbmcsIG1peGluc0lucHV0KSxcbiAgICBvdmVycmlkZXM6IHt9LFxuICAgIC8vIEluamVjdCBjdXN0b20gc3R5bGVzXG4gICAgcGFsZXR0ZTogcGFsZXR0ZSxcbiAgICBwcm9wczoge30sXG4gICAgLy8gUHJvdmlkZSBkZWZhdWx0IHByb3BzXG4gICAgc2hhZG93czogc2hhZG93cyxcbiAgICB0eXBvZ3JhcGh5OiBjcmVhdGVUeXBvZ3JhcGh5KHBhbGV0dGUsIHR5cG9ncmFwaHlJbnB1dCksXG4gICAgc3BhY2luZzogc3BhY2luZyxcbiAgICBzaGFwZTogc2hhcGUsXG4gICAgdHJhbnNpdGlvbnM6IHRyYW5zaXRpb25zLFxuICAgIHpJbmRleDogekluZGV4XG4gIH0sIG90aGVyKTtcblxuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBtdWlUaGVtZSA9IGFyZ3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGFyZ3VtZW50KSB7XG4gICAgcmV0dXJuIGRlZXBtZXJnZShhY2MsIGFyZ3VtZW50KTtcbiAgfSwgbXVpVGhlbWUpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgdmFyIHBzZXVkb0NsYXNzZXMgPSBbJ2NoZWNrZWQnLCAnZGlzYWJsZWQnLCAnZXJyb3InLCAnZm9jdXNlZCcsICdmb2N1c1Zpc2libGUnLCAncmVxdWlyZWQnLCAnZXhwYW5kZWQnLCAnc2VsZWN0ZWQnXTtcblxuICAgIHZhciB0cmF2ZXJzZSA9IGZ1bmN0aW9uIHRyYXZlcnNlKG5vZGUsIHBhcmVudEtleSkge1xuICAgICAgdmFyIGRlcHRoID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAxO1xuICAgICAgdmFyIGtleTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGd1YXJkLWZvci1pbiwgbm8tcmVzdHJpY3RlZC1zeW50YXhcblxuICAgICAgZm9yIChrZXkgaW4gbm9kZSkge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlW2tleV07XG5cbiAgICAgICAgaWYgKGRlcHRoID09PSAxKSB7XG4gICAgICAgICAgaWYgKGtleS5pbmRleE9mKCdNdWknKSA9PT0gMCAmJiBjaGlsZCkge1xuICAgICAgICAgICAgdHJhdmVyc2UoY2hpbGQsIGtleSwgZGVwdGggKyAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocHNldWRvQ2xhc3Nlcy5pbmRleE9mKGtleSkgIT09IC0xICYmIE9iamVjdC5rZXlzKGNoaWxkKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBgXCIuY29uY2F0KHBhcmVudEtleSwgXCJgIGNvbXBvbmVudCBpbmNyZWFzZXMgXCIpICsgXCJ0aGUgQ1NTIHNwZWNpZmljaXR5IG9mIHRoZSBgXCIuY29uY2F0KGtleSwgXCJgIGludGVybmFsIHN0YXRlLlwiKSwgJ1lvdSBjYW4gbm90IG92ZXJyaWRlIGl0IGxpa2UgdGhpczogJywgSlNPTi5zdHJpbmdpZnkobm9kZSwgbnVsbCwgMiksICcnLCAnSW5zdGVhZCwgeW91IG5lZWQgdG8gdXNlIHRoZSAkcnVsZU5hbWUgc3ludGF4OicsIEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICAgICAgcm9vdDogX2RlZmluZVByb3BlcnR5KHt9LCBcIiYkXCIuY29uY2F0KGtleSksIGNoaWxkKVxuICAgICAgICAgICAgfSwgbnVsbCwgMiksICcnLCAnaHR0cHM6Ly9tYXRlcmlhbC11aS5jb20vci9wc2V1ZG8tY2xhc3Nlcy1ndWlkZSddLmpvaW4oJ1xcbicpKTtcbiAgICAgICAgICB9IC8vIFJlbW92ZSB0aGUgc3R5bGUgdG8gcHJldmVudCBnbG9iYWwgY29uZmxpY3RzLlxuXG5cbiAgICAgICAgICBub2RlW2tleV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICB0cmF2ZXJzZShtdWlUaGVtZS5vdmVycmlkZXMpO1xuICB9XG5cbiAgcmV0dXJuIG11aVRoZW1lO1xufVxuXG52YXIgd2FybmVkT25jZSA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU11aVRoZW1lKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmICghd2FybmVkT25jZSkge1xuICAgICAgd2FybmVkT25jZSA9IHRydWU7XG4gICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IHRoZSBjcmVhdGVNdWlUaGVtZSBmdW5jdGlvbiB3YXMgcmVuYW1lZCB0byBjcmVhdGVUaGVtZS4nLCAnJywgXCJZb3Ugc2hvdWxkIHVzZSBgaW1wb3J0IHsgY3JlYXRlVGhlbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXMnYFwiXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZVRoZW1lLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRoZW1lOyIsImltcG9ydCBjcmVhdGVUaGVtZSBmcm9tICcuL2NyZWF0ZVRoZW1lJztcbnZhciBkZWZhdWx0VGhlbWUgPSBjcmVhdGVUaGVtZSgpO1xuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdFRoZW1lOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IHsgbWFrZVN0eWxlcyBhcyBtYWtlU3R5bGVzV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBkZWZhdWx0VGhlbWUgZnJvbSAnLi9kZWZhdWx0VGhlbWUnO1xuXG5mdW5jdGlvbiBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvcikge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gIHJldHVybiBtYWtlU3R5bGVzV2l0aG91dERlZmF1bHQoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYWtlU3R5bGVzOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG4vLyBGb2xsb3cgaHR0cHM6Ly9tYXRlcmlhbC5nb29nbGUuY29tL21vdGlvbi9kdXJhdGlvbi1lYXNpbmcuaHRtbCNkdXJhdGlvbi1lYXNpbmctbmF0dXJhbC1lYXNpbmctY3VydmVzXG4vLyB0byBsZWFybiB0aGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGVhc2luZyBzaG91bGQgYmUgdXNlZC5cbmV4cG9ydCB2YXIgZWFzaW5nID0ge1xuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGNvbW1vbiBlYXNpbmcgY3VydmUuXG4gIGVhc2VJbk91dDogJ2N1YmljLWJlemllcigwLjQsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGVudGVyIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eSBmcm9tIG9mZi1zY3JlZW4gYW5kXG4gIC8vIHNsb3dseSBkZWNlbGVyYXRlIHRvIGEgcmVzdGluZyBwb2ludC5cbiAgZWFzZU91dDogJ2N1YmljLWJlemllcigwLjAsIDAsIDAuMiwgMSknLFxuICAvLyBPYmplY3RzIGxlYXZlIHRoZSBzY3JlZW4gYXQgZnVsbCB2ZWxvY2l0eS4gVGhleSBkbyBub3QgZGVjZWxlcmF0ZSB3aGVuIG9mZi1zY3JlZW4uXG4gIGVhc2VJbjogJ2N1YmljLWJlemllcigwLjQsIDAsIDEsIDEpJyxcbiAgLy8gVGhlIHNoYXJwIGN1cnZlIGlzIHVzZWQgYnkgb2JqZWN0cyB0aGF0IG1heSByZXR1cm4gdG8gdGhlIHNjcmVlbiBhdCBhbnkgdGltZS5cbiAgc2hhcnA6ICdjdWJpYy1iZXppZXIoMC40LCAwLCAwLjYsIDEpJ1xufTsgLy8gRm9sbG93IGh0dHBzOi8vbWF0ZXJpYWwuaW8vZ3VpZGVsaW5lcy9tb3Rpb24vZHVyYXRpb24tZWFzaW5nLmh0bWwjZHVyYXRpb24tZWFzaW5nLWNvbW1vbi1kdXJhdGlvbnNcbi8vIHRvIGxlYXJuIHdoZW4gdXNlIHdoYXQgdGltaW5nXG5cbmV4cG9ydCB2YXIgZHVyYXRpb24gPSB7XG4gIHNob3J0ZXN0OiAxNTAsXG4gIHNob3J0ZXI6IDIwMCxcbiAgc2hvcnQ6IDI1MCxcbiAgLy8gbW9zdCBiYXNpYyByZWNvbW1lbmRlZCB0aW1pbmdcbiAgc3RhbmRhcmQ6IDMwMCxcbiAgLy8gdGhpcyBpcyB0byBiZSB1c2VkIGluIGNvbXBsZXggYW5pbWF0aW9uc1xuICBjb21wbGV4OiAzNzUsXG4gIC8vIHJlY29tbWVuZGVkIHdoZW4gc29tZXRoaW5nIGlzIGVudGVyaW5nIHNjcmVlblxuICBlbnRlcmluZ1NjcmVlbjogMjI1LFxuICAvLyByZWNvbW1lbmRlZCB3aGVuIHNvbWV0aGluZyBpcyBsZWF2aW5nIHNjcmVlblxuICBsZWF2aW5nU2NyZWVuOiAxOTVcbn07XG5cbmZ1bmN0aW9uIGZvcm1hdE1zKG1pbGxpc2Vjb25kcykge1xuICByZXR1cm4gXCJcIi5jb25jYXQoTWF0aC5yb3VuZChtaWxsaXNlY29uZHMpLCBcIm1zXCIpO1xufVxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ3xBcnJheX0gcHJvcHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBwYXJhbVxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLnByb3BcbiAqIEBwYXJhbSB7bnVtYmVyfSBwYXJhbS5kdXJhdGlvblxuICogQHBhcmFtIHtzdHJpbmd9IHBhcmFtLmVhc2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IHBhcmFtLmRlbGF5XG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGVhc2luZzogZWFzaW5nLFxuICBkdXJhdGlvbjogZHVyYXRpb24sXG4gIGNyZWF0ZTogZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogWydhbGwnXTtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB2YXIgX29wdGlvbnMkZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uLFxuICAgICAgICBkdXJhdGlvbk9wdGlvbiA9IF9vcHRpb25zJGR1cmF0aW9uID09PSB2b2lkIDAgPyBkdXJhdGlvbi5zdGFuZGFyZCA6IF9vcHRpb25zJGR1cmF0aW9uLFxuICAgICAgICBfb3B0aW9ucyRlYXNpbmcgPSBvcHRpb25zLmVhc2luZyxcbiAgICAgICAgZWFzaW5nT3B0aW9uID0gX29wdGlvbnMkZWFzaW5nID09PSB2b2lkIDAgPyBlYXNpbmcuZWFzZUluT3V0IDogX29wdGlvbnMkZWFzaW5nLFxuICAgICAgICBfb3B0aW9ucyRkZWxheSA9IG9wdGlvbnMuZGVsYXksXG4gICAgICAgIGRlbGF5ID0gX29wdGlvbnMkZGVsYXkgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRkZWxheSxcbiAgICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZHVyYXRpb25cIiwgXCJlYXNpbmdcIiwgXCJkZWxheVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGlzU3RyaW5nID0gZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gICAgICB9O1xuXG4gICAgICB2YXIgaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gIWlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKTtcbiAgICAgIH07XG5cbiAgICAgIGlmICghaXNTdHJpbmcocHJvcHMpICYmICFBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdNYXRlcmlhbC1VSTogQXJndW1lbnQgXCJwcm9wc1wiIG11c3QgYmUgYSBzdHJpbmcgb3IgQXJyYXkuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZHVyYXRpb25PcHRpb24pICYmICFpc1N0cmluZyhkdXJhdGlvbk9wdGlvbikpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcIk1hdGVyaWFsLVVJOiBBcmd1bWVudCBcXFwiZHVyYXRpb25cXFwiIG11c3QgYmUgYSBudW1iZXIgb3IgYSBzdHJpbmcgYnV0IGZvdW5kIFwiLmNvbmNhdChkdXJhdGlvbk9wdGlvbiwgXCIuXCIpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZyhlYXNpbmdPcHRpb24pKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBBcmd1bWVudCBcImVhc2luZ1wiIG11c3QgYmUgYSBzdHJpbmcuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOdW1iZXIoZGVsYXkpICYmICFpc1N0cmluZyhkZWxheSkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEFyZ3VtZW50IFwiZGVsYXlcIiBtdXN0IGJlIGEgbnVtYmVyIG9yIGEgc3RyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICBpZiAoT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiTWF0ZXJpYWwtVUk6IFVucmVjb2duaXplZCBhcmd1bWVudChzKSBbXCIuY29uY2F0KE9iamVjdC5rZXlzKG90aGVyKS5qb2luKCcsJyksIFwiXS5cIikpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoQXJyYXkuaXNBcnJheShwcm9wcykgPyBwcm9wcyA6IFtwcm9wc10pLm1hcChmdW5jdGlvbiAoYW5pbWF0ZWRQcm9wKSB7XG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQoYW5pbWF0ZWRQcm9wLCBcIiBcIikuY29uY2F0KHR5cGVvZiBkdXJhdGlvbk9wdGlvbiA9PT0gJ3N0cmluZycgPyBkdXJhdGlvbk9wdGlvbiA6IGZvcm1hdE1zKGR1cmF0aW9uT3B0aW9uKSwgXCIgXCIpLmNvbmNhdChlYXNpbmdPcHRpb24sIFwiIFwiKS5jb25jYXQodHlwZW9mIGRlbGF5ID09PSAnc3RyaW5nJyA/IGRlbGF5IDogZm9ybWF0TXMoZGVsYXkpKTtcbiAgICB9KS5qb2luKCcsJyk7XG4gIH0sXG4gIGdldEF1dG9IZWlnaHREdXJhdGlvbjogZnVuY3Rpb24gZ2V0QXV0b0hlaWdodER1cmF0aW9uKGhlaWdodCkge1xuICAgIGlmICghaGVpZ2h0KSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICB2YXIgY29uc3RhbnQgPSBoZWlnaHQgLyAzNjsgLy8gaHR0cHM6Ly93d3cud29sZnJhbWFscGhhLmNvbS9pbnB1dC8/aT0oNCslMkIrMTUrKisoeCslMkYrMzYrKSsqKiswLjI1KyUyQisoeCslMkYrMzYpKyUyRis1KSsqKzEwXG5cbiAgICByZXR1cm4gTWF0aC5yb3VuZCgoNCArIDE1ICogTWF0aC5wb3coY29uc3RhbnQsIDAuMjUpICsgY29uc3RhbnQgLyA1KSAqIDEwKTtcbiAgfVxufTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcywgZ2V0RGlzcGxheU5hbWUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IG1ha2VTdHlsZXMgZnJvbSAnLi4vbWFrZVN0eWxlcyc7XG5pbXBvcnQgZ2V0VGhlbWVQcm9wcyBmcm9tICcuLi9nZXRUaGVtZVByb3BzJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7IC8vIExpbmsgYSBzdHlsZSBzaGVldCB3aXRoIGEgY29tcG9uZW50LlxuLy8gSXQgZG9lcyBub3QgbW9kaWZ5IHRoZSBjb21wb25lbnQgcGFzc2VkIHRvIGl0O1xuLy8gaW5zdGVhZCwgaXQgcmV0dXJucyBhIG5ldyBjb21wb25lbnQsIHdpdGggYSBgY2xhc3Nlc2AgcHJvcGVydHkuXG5cbnZhciB3aXRoU3R5bGVzID0gZnVuY3Rpb24gd2l0aFN0eWxlcyhzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gKENvbXBvbmVudCkge1xuICAgIHZhciBkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgICAgX29wdGlvbnMkd2l0aFRoZW1lID0gb3B0aW9ucy53aXRoVGhlbWUsXG4gICAgICAgIHdpdGhUaGVtZSA9IF9vcHRpb25zJHdpdGhUaGVtZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyR3aXRoVGhlbWUsXG4gICAgICAgIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICAgIHN0eWxlc09wdGlvbnMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wiZGVmYXVsdFRoZW1lXCIsIFwid2l0aFRoZW1lXCIsIFwibmFtZVwiXSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKENvbXBvbmVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihbJ1lvdSBhcmUgY2FsbGluZyB3aXRoU3R5bGVzKHN0eWxlcykoQ29tcG9uZW50KSB3aXRoIGFuIHVuZGVmaW5lZCBjb21wb25lbnQuJywgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gaW1wb3J0IGl0LiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgY2xhc3NOYW1lUHJlZml4ID0gbmFtZTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAoIW5hbWUpIHtcbiAgICAgICAgLy8gUHJvdmlkZSBhIGJldHRlciBEWCBvdXRzaWRlIHByb2R1Y3Rpb24uXG4gICAgICAgIHZhciBkaXNwbGF5TmFtZSA9IGdldERpc3BsYXlOYW1lKENvbXBvbmVudCk7XG5cbiAgICAgICAgaWYgKGRpc3BsYXlOYW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjbGFzc05hbWVQcmVmaXggPSBkaXNwbGF5TmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKHN0eWxlc09yQ3JlYXRvciwgX2V4dGVuZHMoe1xuICAgICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWUsXG4gICAgICBDb21wb25lbnQ6IENvbXBvbmVudCxcbiAgICAgIG5hbWU6IG5hbWUgfHwgQ29tcG9uZW50LmRpc3BsYXlOYW1lLFxuICAgICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgICB9LCBzdHlsZXNPcHRpb25zKSk7XG4gICAgdmFyIFdpdGhTdHlsZXMgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBXaXRoU3R5bGVzKHByb3BzLCByZWYpIHtcbiAgICAgIHZhciBjbGFzc2VzUHJvcCA9IHByb3BzLmNsYXNzZXMsXG4gICAgICAgICAgaW5uZXJSZWYgPSBwcm9wcy5pbm5lclJlZixcbiAgICAgICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImlubmVyUmVmXCJdKTsgLy8gVGhlIHdyYXBwZXIgcmVjZWl2ZXMgb25seSB1c2VyIHN1cHBsaWVkIHByb3BzLCB3aGljaCBjb3VsZCBiZSBhIHN1YnNldCBvZlxuICAgICAgLy8gdGhlIGFjdHVhbCBwcm9wcyBDb21wb25lbnQgbWlnaHQgcmVjZWl2ZSBkdWUgdG8gbWVyZ2luZyB3aXRoIGRlZmF1bHRQcm9wcy5cbiAgICAgIC8vIFNvIGNvcHlpbmcgaXQgaGVyZSB3b3VsZCBnaXZlIHVzIHRoZSBzYW1lIHJlc3VsdCBpbiB0aGUgd3JhcHBlciBhcyB3ZWxsLlxuXG5cbiAgICAgIHZhciBjbGFzc2VzID0gdXNlU3R5bGVzKF9leHRlbmRzKHt9LCBDb21wb25lbnQuZGVmYXVsdFByb3BzLCBwcm9wcykpO1xuICAgICAgdmFyIHRoZW1lO1xuICAgICAgdmFyIG1vcmUgPSBvdGhlcjtcblxuICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCB3aXRoVGhlbWUpIHtcbiAgICAgICAgLy8gbmFtZSBhbmQgd2l0aFRoZW1lIGFyZSBpbnZhcmlhbnQgaW4gdGhlIG91dGVyIHNjb3BlXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgICAgICB0aGVtZSA9IHVzZVRoZW1lKCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgbW9yZSA9IGdldFRoZW1lUHJvcHMoe1xuICAgICAgICAgICAgdGhlbWU6IHRoZW1lLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHByb3BzOiBvdGhlclxuICAgICAgICAgIH0pO1xuICAgICAgICB9IC8vIFByb3ZpZGUgdGhlIHRoZW1lIHRvIHRoZSB3cmFwcGVkIGNvbXBvbmVudC5cbiAgICAgICAgLy8gU28gd2UgZG9uJ3QgaGF2ZSB0byB1c2UgdGhlIGB3aXRoVGhlbWUoKWAgSGlnaGVyLW9yZGVyIENvbXBvbmVudC5cblxuXG4gICAgICAgIGlmICh3aXRoVGhlbWUgJiYgIW1vcmUudGhlbWUpIHtcbiAgICAgICAgICBtb3JlLnRoZW1lID0gdGhlbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgICAgICByZWY6IGlubmVyUmVmIHx8IHJlZixcbiAgICAgICAgY2xhc3NlczogY2xhc3Nlc1xuICAgICAgfSwgbW9yZSkpO1xuICAgIH0pO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFdpdGhTdHlsZXMucHJvcFR5cGVzID0ge1xuICAgICAgLyoqXG4gICAgICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAgICAgKi9cbiAgICAgIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBkZWNvcmF0ZWQgY29tcG9uZW50LlxuICAgICAgICogQGRlcHJlY2F0ZWRcbiAgICAgICAqL1xuICAgICAgaW5uZXJSZWY6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMub2JqZWN0XSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICBpZiAocHJvcHMuaW5uZXJSZWYgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7IC8vIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgIC8vICAgJ01hdGVyaWFsLVVJOiBUaGUgYGlubmVyUmVmYCBwcm9wIGlzIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2NS4gJyArXG4gICAgICAgIC8vICAgICAnUmVmcyBhcmUgbm93IGF1dG9tYXRpY2FsbHkgZm9yd2FyZGVkIHRvIHRoZSBpbm5lciBjb21wb25lbnQuJyxcbiAgICAgICAgLy8gKTtcbiAgICAgIH0pXG4gICAgfSA6IHZvaWQgMDtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBXaXRoU3R5bGVzLmRpc3BsYXlOYW1lID0gXCJXaXRoU3R5bGVzKFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIilcIik7XG4gICAgfVxuXG4gICAgaG9pc3ROb25SZWFjdFN0YXRpY3MoV2l0aFN0eWxlcywgQ29tcG9uZW50KTtcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvLyBFeHBvc2VkIGZvciB0ZXN0IHB1cnBvc2VzLlxuICAgICAgV2l0aFN0eWxlcy5OYWtlZCA9IENvbXBvbmVudDtcbiAgICAgIFdpdGhTdHlsZXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICBXaXRoU3R5bGVzLnVzZVN0eWxlcyA9IHVzZVN0eWxlcztcbiAgICB9XG5cbiAgICByZXR1cm4gV2l0aFN0eWxlcztcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXM7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyB3aXRoU3R5bGVzIGFzIHdpdGhTdHlsZXNXaXRob3V0RGVmYXVsdCB9IGZyb20gJ0BtYXRlcmlhbC11aS9zdHlsZXMnO1xuaW1wb3J0IGRlZmF1bHRUaGVtZSBmcm9tICcuL2RlZmF1bHRUaGVtZSc7XG5cbmZ1bmN0aW9uIHdpdGhTdHlsZXMoc3R5bGVzT3JDcmVhdG9yLCBvcHRpb25zKSB7XG4gIHJldHVybiB3aXRoU3R5bGVzV2l0aG91dERlZmF1bHQoc3R5bGVzT3JDcmVhdG9yLCBfZXh0ZW5kcyh7XG4gICAgZGVmYXVsdFRoZW1lOiBkZWZhdWx0VGhlbWVcbiAgfSwgb3B0aW9ucykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzOyIsIi8vIFdlIG5lZWQgdG8gY2VudHJhbGl6ZSB0aGUgekluZGV4IGRlZmluaXRpb25zIGFzIHRoZXkgd29ya1xuLy8gbGlrZSBnbG9iYWwgdmFsdWVzIGluIHRoZSBicm93c2VyLlxudmFyIHpJbmRleCA9IHtcbiAgbW9iaWxlU3RlcHBlcjogMTAwMCxcbiAgc3BlZWREaWFsOiAxMDUwLFxuICBhcHBCYXI6IDExMDAsXG4gIGRyYXdlcjogMTIwMCxcbiAgbW9kYWw6IDEzMDAsXG4gIHNuYWNrYmFyOiAxNDAwLFxuICB0b29sdGlwOiAxNTAwXG59O1xuZXhwb3J0IGRlZmF1bHQgekluZGV4OyIsImltcG9ydCB7IGZvcm1hdE11aUVycm9yTWVzc2FnZSBhcyBfZm9ybWF0TXVpRXJyb3JNZXNzYWdlIH0gZnJvbSBcIkBtYXRlcmlhbC11aS91dGlsc1wiO1xuLy8gSXQgc2hvdWxkIHRvIGJlIG5vdGVkIHRoYXQgdGhpcyBmdW5jdGlvbiBpc24ndCBlcXVpdmFsZW50IHRvIGB0ZXh0LXRyYW5zZm9ybTogY2FwaXRhbGl6ZWAuXG4vL1xuLy8gQSBzdHJpY3QgY2FwaXRhbGl6YXRpb24gc2hvdWxkIHVwcGVyY2FzZSB0aGUgZmlyc3QgbGV0dGVyIG9mIGVhY2ggd29yZCBhIHRoZSBzZW50ZW5jZS5cbi8vIFdlIG9ubHkgaGFuZGxlIHRoZSBmaXJzdCB3b3JkLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFwiTWF0ZXJpYWwtVUk6IGNhcGl0YWxpemUoc3RyaW5nKSBleHBlY3RzIGEgc3RyaW5nIGFyZ3VtZW50LlwiIDogX2Zvcm1hdE11aUVycm9yTWVzc2FnZSg3KSk7XG4gIH1cblxuICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xufSIsIi8qKlxuICogU2FmZSBjaGFpbmVkIGZ1bmN0aW9uXG4gKlxuICogV2lsbCBvbmx5IGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiBuZWVkZWQsXG4gKiBvdGhlcndpc2Ugd2lsbCBwYXNzIGJhY2sgZXhpc3RpbmcgZnVuY3Rpb25zIG9yIG51bGwuXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuY3Rpb25zIHRvIGNoYWluXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb258bnVsbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgZnVuY3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgZnVuY3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICByZXR1cm4gZnVuY3MucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGZ1bmMpIHtcbiAgICBpZiAoZnVuYyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IEludmFsaWQgQXJndW1lbnQgVHlwZSwgbXVzdCBvbmx5IHByb3ZpZGUgZnVuY3Rpb25zLCB1bmRlZmluZWQsIG9yIG51bGwuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNoYWluZWRGdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIGFjYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfTtcbiAgfSwgZnVuY3Rpb24gKCkge30pO1xufSIsIi8vIENvcnJlc3BvbmRzIHRvIDEwIGZyYW1lcyBhdCA2MCBIei5cbi8vIEEgZmV3IGJ5dGVzIHBheWxvYWQgb3ZlcmhlYWQgd2hlbiBsb2Rhc2gvZGVib3VuY2UgaXMgfjMga0IgYW5kIGRlYm91bmNlIH4zMDAgQi5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMpIHtcbiAgdmFyIHdhaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE2NjtcbiAgdmFyIHRpbWVvdXQ7XG5cbiAgZnVuY3Rpb24gZGVib3VuY2VkKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC10aGlzXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xuXG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7XG4gICAgICBmdW5jLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICAgIH07XG5cbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICB9XG5cbiAgZGVib3VuY2VkLmNsZWFyID0gZnVuY3Rpb24gKCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgfTtcblxuICByZXR1cm4gZGVib3VuY2VkO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGNoYWluUHJvcFR5cGVzIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcbiAgICAgIHdpZHRoOiAnMWVtJyxcbiAgICAgIGhlaWdodDogJzFlbScsXG4gICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgIGZpbGw6ICdjdXJyZW50Q29sb3InLFxuICAgICAgZmxleFNocmluazogMCxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjQpLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdmaWxsJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlclxuICAgICAgfSlcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJwcmltYXJ5XCJgLiAqL1xuICAgIGNvbG9yUHJpbWFyeToge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwic2Vjb25kYXJ5XCJgLiAqL1xuICAgIGNvbG9yU2Vjb25kYXJ5OiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpblxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImFjdGlvblwiYC4gKi9cbiAgICBjb2xvckFjdGlvbjoge1xuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuYWN0aW9uLmFjdGl2ZVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImVycm9yXCJgLiAqL1xuICAgIGNvbG9yRXJyb3I6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLm1haW5cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkaXNhYmxlZFwiYC4gKi9cbiAgICBjb2xvckRpc2FibGVkOiB7XG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZm9udFNpemU9XCJpbmhlcml0XCJgLiAqL1xuICAgIGZvbnRTaXplSW5oZXJpdDoge1xuICAgICAgZm9udFNpemU6ICdpbmhlcml0J1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBmb250U2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIGZvbnRTaXplU21hbGw6IHtcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMjApXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGZvbnRTaXplPVwibGFyZ2VcImAuICovXG4gICAgZm9udFNpemVMYXJnZToge1xuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgzNSlcbiAgICB9XG4gIH07XG59O1xudmFyIFN2Z0ljb24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBTdmdJY29uKHByb3BzLCByZWYpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb2xvciA9IHByb3BzLmNvbG9yLFxuICAgICAgY29sb3IgPSBfcHJvcHMkY29sb3IgPT09IHZvaWQgMCA/ICdpbmhlcml0JyA6IF9wcm9wcyRjb2xvcixcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3ZnJyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZm9udFNpemUgPSBwcm9wcy5mb250U2l6ZSxcbiAgICAgIGZvbnRTaXplID0gX3Byb3BzJGZvbnRTaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRmb250U2l6ZSxcbiAgICAgIGh0bWxDb2xvciA9IHByb3BzLmh0bWxDb2xvcixcbiAgICAgIHRpdGxlQWNjZXNzID0gcHJvcHMudGl0bGVBY2Nlc3MsXG4gICAgICBfcHJvcHMkdmlld0JveCA9IHByb3BzLnZpZXdCb3gsXG4gICAgICB2aWV3Qm94ID0gX3Byb3BzJHZpZXdCb3ggPT09IHZvaWQgMCA/ICcwIDAgMjQgMjQnIDogX3Byb3BzJHZpZXdCb3gsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJjb21wb25lbnRcIiwgXCJmb250U2l6ZVwiLCBcImh0bWxDb2xvclwiLCBcInRpdGxlQWNjZXNzXCIsIFwidmlld0JveFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgY29sb3IgIT09ICdpbmhlcml0JyAmJiBjbGFzc2VzW1wiY29sb3JcIi5jb25jYXQoY2FwaXRhbGl6ZShjb2xvcikpXSwgZm9udFNpemUgIT09ICdkZWZhdWx0JyAmJiBmb250U2l6ZSAhPT0gJ21lZGl1bScgJiYgY2xhc3Nlc1tcImZvbnRTaXplXCIuY29uY2F0KGNhcGl0YWxpemUoZm9udFNpemUpKV0pLFxuICAgIGZvY3VzYWJsZTogXCJmYWxzZVwiLFxuICAgIHZpZXdCb3g6IHZpZXdCb3gsXG4gICAgY29sb3I6IGh0bWxDb2xvcixcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRpdGxlQWNjZXNzID8gdW5kZWZpbmVkIDogdHJ1ZSxcbiAgICByb2xlOiB0aXRsZUFjY2VzcyA/ICdpbWcnIDogdW5kZWZpbmVkLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIHRpdGxlQWNjZXNzID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJ0aXRsZVwiLCBudWxsLCB0aXRsZUFjY2VzcykgOiBudWxsKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3ZnSWNvbi5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBOb2RlIHBhc3NlZCBpbnRvIHRoZSBTVkcgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICogWW91IGNhbiB1c2UgdGhlIGBodG1sQ29sb3JgIHByb3AgdG8gYXBwbHkgYSBjb2xvciBhdHRyaWJ1dGUgdG8gdGhlIFNWRyBlbGVtZW50LlxuICAgKi9cbiAgY29sb3I6IFByb3BUeXBlcy5vbmVPZihbJ2FjdGlvbicsICdkaXNhYmxlZCcsICdlcnJvcicsICdpbmhlcml0JywgJ3ByaW1hcnknLCAnc2Vjb25kYXJ5J10pLFxuXG4gIC8qKlxuICAgKiBUaGUgY29tcG9uZW50IHVzZWQgZm9yIHRoZSByb290IG5vZGUuXG4gICAqIEVpdGhlciBhIHN0cmluZyB0byB1c2UgYSBIVE1MIGVsZW1lbnQgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlc1xuICAvKiBAdHlwZXNjcmlwdC10by1wcm9wdHlwZXMtaWdub3JlICovXG4gIC5lbGVtZW50VHlwZSxcblxuICAvKipcbiAgICogVGhlIGZvbnRTaXplIGFwcGxpZWQgdG8gdGhlIGljb24uIERlZmF1bHRzIHRvIDI0cHgsIGJ1dCBjYW4gYmUgY29uZmlndXJlIHRvIGluaGVyaXQgZm9udCBzaXplLlxuICAgKi9cbiAgZm9udFNpemU6IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5vbmVPZihbJ2RlZmF1bHQnLCAnaW5oZXJpdCcsICdsYXJnZScsICdtZWRpdW0nLCAnc21hbGwnXSksIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBmb250U2l6ZSA9IHByb3BzLmZvbnRTaXplO1xuXG4gICAgaWYgKGZvbnRTaXplID09PSAnZGVmYXVsdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IGBmb250U2l6ZT1cImRlZmF1bHRcImAgaXMgZGVwcmVjYXRlZC4gVXNlIGBmb250U2l6ZT1cIm1lZGl1bVwiYCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogQXBwbGllcyBhIGNvbG9yIGF0dHJpYnV0ZSB0byB0aGUgU1ZHIGVsZW1lbnQuXG4gICAqL1xuICBodG1sQ29sb3I6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBzaGFwZS1yZW5kZXJpbmcgYXR0cmlidXRlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZCBvbiB0aGVcbiAgICogW01ETiBXZWIgRG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvU1ZHL0F0dHJpYnV0ZS9zaGFwZS1yZW5kZXJpbmcpLlxuICAgKiBJZiB5b3UgYXJlIGhhdmluZyBpc3N1ZXMgd2l0aCBibHVycnkgaWNvbnMgeW91IHNob3VsZCBpbnZlc3RpZ2F0ZSB0aGlzIHByb3BlcnR5LlxuICAgKi9cbiAgc2hhcGVSZW5kZXJpbmc6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFByb3ZpZGVzIGEgaHVtYW4tcmVhZGFibGUgdGl0bGUgZm9yIHRoZSBlbGVtZW50IHRoYXQgY29udGFpbnMgaXQuXG4gICAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9TVkctYWNjZXNzLyNFcXVpdmFsZW50XG4gICAqL1xuICB0aXRsZUFjY2VzczogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byByZWRlZmluZSB3aGF0IHRoZSBjb29yZGluYXRlcyB3aXRob3V0IHVuaXRzIG1lYW4gaW5zaWRlIGFuIFNWRyBlbGVtZW50LlxuICAgKiBGb3IgZXhhbXBsZSwgaWYgdGhlIFNWRyBlbGVtZW50IGlzIDUwMCAod2lkdGgpIGJ5IDIwMCAoaGVpZ2h0KSxcbiAgICogYW5kIHlvdSBwYXNzIHZpZXdCb3g9XCIwIDAgNTAgMjBcIixcbiAgICogdGhpcyBtZWFucyB0aGF0IHRoZSBjb29yZGluYXRlcyBpbnNpZGUgdGhlIFNWRyB3aWxsIGdvIGZyb20gdGhlIHRvcCBsZWZ0IGNvcm5lciAoMCwwKVxuICAgKiB0byBib3R0b20gcmlnaHQgKDUwLDIwKSBhbmQgZWFjaCB1bml0IHdpbGwgYmUgd29ydGggMTBweC5cbiAgICovXG4gIHZpZXdCb3g6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5TdmdJY29uLm11aU5hbWUgPSAnU3ZnSWNvbic7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBuYW1lOiAnTXVpU3ZnSWNvbidcbn0pKFN2Z0ljb24pOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdmdJY29uIGZyb20gJy4uL1N2Z0ljb24nO1xuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG1hdGVyaWFsLXVpL3ggcGFja2FnZXMuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU3ZnSWNvbihwYXRoLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgQ29tcG9uZW50ID0gZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCByZWYpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3ZnSWNvbiwgX2V4dGVuZHMoe1xuICAgICAgcmVmOiByZWZcbiAgICB9LCBwcm9wcyksIHBhdGgpO1xuICB9O1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gTmVlZCB0byBzZXQgYGRpc3BsYXlOYW1lYCBvbiB0aGUgaW5uZXIgY29tcG9uZW50IGZvciBSZWFjdC5tZW1vLlxuICAgIC8vIFJlYWN0IHByaW9yIHRvIDE2LjE0IGlnbm9yZXMgYGRpc3BsYXlOYW1lYCBvbiB0aGUgd3JhcHBlci5cbiAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgPSBcIlwiLmNvbmNhdChkaXNwbGF5TmFtZSwgXCJJY29uXCIpO1xuICB9XG5cbiAgQ29tcG9uZW50Lm11aU5hbWUgPSBTdmdJY29uLm11aU5hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QubWVtbyggLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoQ29tcG9uZW50KSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVwcmVjYXRlZFByb3BUeXBlKHZhbGlkYXRvciwgcmVhc29uKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSkge1xuICAgIHZhciBjb21wb25lbnROYW1lU2FmZSA9IGNvbXBvbmVudE5hbWUgfHwgJzw8YW5vbnltb3VzPj4nO1xuICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9wc1twcm9wTmFtZV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlIFwiLmNvbmNhdChsb2NhdGlvbiwgXCIgYFwiKS5jb25jYXQocHJvcEZ1bGxOYW1lU2FmZSwgXCJgIG9mIFwiKSArIFwiYFwiLmNvbmNhdChjb21wb25lbnROYW1lU2FmZSwgXCJgIGlzIGRlcHJlY2F0ZWQuIFwiKS5jb25jYXQocmVhc29uKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNNdWlFbGVtZW50KGVsZW1lbnQsIG11aU5hbWVzKSB7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoZWxlbWVudCkgJiYgbXVpTmFtZXMuaW5kZXhPZihlbGVtZW50LnR5cGUubXVpTmFtZSkgIT09IC0xO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlcXVpcmVQcm9wRmFjdG9yeShjb21wb25lbnROYW1lSW5FcnJvcikge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgdmFyIHJlcXVpcmVQcm9wID0gZnVuY3Rpb24gcmVxdWlyZVByb3AocmVxdWlyZWRQcm9wKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUsIGxvY2F0aW9uLCBwcm9wRnVsbE5hbWUpIHtcbiAgICAgIHZhciBwcm9wRnVsbE5hbWVTYWZlID0gcHJvcEZ1bGxOYW1lIHx8IHByb3BOYW1lO1xuXG4gICAgICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcgJiYgIXByb3BzW3JlcXVpcmVkUHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIlRoZSBwcm9wIGBcIi5jb25jYXQocHJvcEZ1bGxOYW1lU2FmZSwgXCJgIG9mIFwiKSArIFwiYFwiLmNvbmNhdChjb21wb25lbnROYW1lSW5FcnJvciwgXCJgIG11c3QgYmUgdXNlZCBvbiBgXCIpLmNvbmNhdChyZXF1aXJlZFByb3AsIFwiYC5cIikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiByZXF1aXJlUHJvcDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnN1cHBvcnRlZFByb3AocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcHJvcEZ1bGxOYW1lU2FmZSA9IHByb3BGdWxsTmFtZSB8fCBwcm9wTmFtZTtcblxuICBpZiAodHlwZW9mIHByb3BzW3Byb3BOYW1lXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKFwiVGhlIHByb3AgYFwiLmNvbmNhdChwcm9wRnVsbE5hbWVTYWZlLCBcImAgaXMgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHJlbW92ZSBpdC5cIikpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59IiwiLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3MsIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwcyAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlQ29udHJvbGxlZChfcmVmKSB7XG4gIHZhciBjb250cm9sbGVkID0gX3JlZi5jb250cm9sbGVkLFxuICAgICAgZGVmYXVsdFByb3AgPSBfcmVmLmRlZmF1bHQsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgX3JlZiRzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBzdGF0ZSA9IF9yZWYkc3RhdGUgPT09IHZvaWQgMCA/ICd2YWx1ZScgOiBfcmVmJHN0YXRlO1xuXG4gIHZhciBfUmVhY3QkdXNlUmVmID0gUmVhY3QudXNlUmVmKGNvbnRyb2xsZWQgIT09IHVuZGVmaW5lZCksXG4gICAgICBpc0NvbnRyb2xsZWQgPSBfUmVhY3QkdXNlUmVmLmN1cnJlbnQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGRlZmF1bHRQcm9wKSxcbiAgICAgIHZhbHVlU3RhdGUgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXRWYWx1ZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgdmFsdWUgPSBpc0NvbnRyb2xsZWQgPyBjb250cm9sbGVkIDogdmFsdWVTdGF0ZTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNDb250cm9sbGVkICE9PSAoY29udHJvbGxlZCAhPT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBBIGNvbXBvbmVudCBpcyBjaGFuZ2luZyB0aGUgXCIuY29uY2F0KGlzQ29udHJvbGxlZCA/ICcnIDogJ3VuJywgXCJjb250cm9sbGVkIFwiKS5jb25jYXQoc3RhdGUsIFwiIHN0YXRlIG9mIFwiKS5jb25jYXQobmFtZSwgXCIgdG8gYmUgXCIpLmNvbmNhdChpc0NvbnRyb2xsZWQgPyAndW4nIDogJycsIFwiY29udHJvbGxlZC5cIiksICdFbGVtZW50cyBzaG91bGQgbm90IHN3aXRjaCBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4nLCBcIkRlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgXCIuY29uY2F0KG5hbWUsIFwiIFwiKSArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4nLCBcIlRoZSBuYXR1cmUgb2YgdGhlIHN0YXRlIGlzIGRldGVybWluZWQgZHVyaW5nIHRoZSBmaXJzdCByZW5kZXIsIGl0J3MgY29uc2lkZXJlZCBjb250cm9sbGVkIGlmIHRoZSB2YWx1ZSBpcyBub3QgYHVuZGVmaW5lZGAuXCIsICdNb3JlIGluZm86IGh0dHBzOi8vZmIubWUvcmVhY3QtY29udHJvbGxlZC1jb21wb25lbnRzJ10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtjb250cm9sbGVkXSk7XG5cbiAgICB2YXIgX1JlYWN0JHVzZVJlZjIgPSBSZWFjdC51c2VSZWYoZGVmYXVsdFByb3ApLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfUmVhY3QkdXNlUmVmMi5jdXJyZW50O1xuXG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghaXNDb250cm9sbGVkICYmIGRlZmF1bHRWYWx1ZSAhPT0gZGVmYXVsdFByb3ApIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihbXCJNYXRlcmlhbC1VSTogQSBjb21wb25lbnQgaXMgY2hhbmdpbmcgdGhlIGRlZmF1bHQgXCIuY29uY2F0KHN0YXRlLCBcIiBzdGF0ZSBvZiBhbiB1bmNvbnRyb2xsZWQgXCIpLmNvbmNhdChuYW1lLCBcIiBhZnRlciBiZWluZyBpbml0aWFsaXplZC4gXCIpICsgXCJUbyBzdXBwcmVzcyB0aGlzIHdhcm5pbmcgb3B0IHRvIHVzZSBhIGNvbnRyb2xsZWQgXCIuY29uY2F0KG5hbWUsIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH0sIFtKU09OLnN0cmluZ2lmeShkZWZhdWx0UHJvcCldKTtcbiAgfVxuXG4gIHZhciBzZXRWYWx1ZUlmVW5jb250cm9sbGVkID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgaWYgKCFpc0NvbnRyb2xsZWQpIHtcbiAgICAgIHNldFZhbHVlKG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIFtdKTtcbiAgcmV0dXJuIFt2YWx1ZSwgc2V0VmFsdWVJZlVuY29udHJvbGxlZF07XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBQcml2YXRlIG1vZHVsZSByZXNlcnZlZCBmb3IgQG1hdGVyaWFsLXVpL3ggcGFja2FnZXMuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSWQoaWRPdmVycmlkZSkge1xuICB2YXIgX1JlYWN0JHVzZVN0YXRlID0gUmVhY3QudXNlU3RhdGUoaWRPdmVycmlkZSksXG4gICAgICBkZWZhdWx0SWQgPSBfUmVhY3QkdXNlU3RhdGVbMF0sXG4gICAgICBzZXREZWZhdWx0SWQgPSBfUmVhY3QkdXNlU3RhdGVbMV07XG5cbiAgdmFyIGlkID0gaWRPdmVycmlkZSB8fCBkZWZhdWx0SWQ7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRlZmF1bHRJZCA9PSBudWxsKSB7XG4gICAgICAvLyBGYWxsYmFjayB0byB0aGlzIGRlZmF1bHQgaWQgd2hlbiBwb3NzaWJsZS5cbiAgICAgIC8vIFVzZSB0aGUgcmFuZG9tIHZhbHVlIGZvciBjbGllbnQtc2lkZSByZW5kZXJpbmcgb25seS5cbiAgICAgIC8vIFdlIGNhbid0IHVzZSBpdCBzZXJ2ZXItc2lkZS5cbiAgICAgIHNldERlZmF1bHRJZChcIm11aS1cIi5jb25jYXQoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMWU1KSkpO1xuICAgIH1cbiAgfSwgW2RlZmF1bHRJZF0pO1xuICByZXR1cm4gaWQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJEb2N1bWVudChub2RlKSB7XG4gIHJldHVybiBub2RlICYmIG5vZGUub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudDtcbn0iLCJpbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuL293bmVyRG9jdW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3duZXJXaW5kb3cobm9kZSkge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChub2RlKTtcbiAgcmV0dXJuIGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG59IiwiLy8gVE9ETyB2NTogY29uc2lkZXIgdG8gbWFrZSBpdCBwcml2YXRlXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRSZWYocmVmLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJlZih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAocmVmKSB7XG4gICAgcmVmLmN1cnJlbnQgPSB2YWx1ZTtcbiAgfVxufSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciB1c2VFbmhhbmNlZEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuLyoqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0MDk5I2lzc3VlY29tbWVudC00NDAwMTM4OTJcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmblxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUV2ZW50Q2FsbGJhY2soZm4pIHtcbiAgdmFyIHJlZiA9IFJlYWN0LnVzZVJlZihmbik7XG4gIHVzZUVuaGFuY2VkRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZWYuY3VycmVudCA9IGZuO1xuICB9KTtcbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKDAsIHJlZi5jdXJyZW50KS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gIH0sIFtdKTtcbn0iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc2V0UmVmIGZyb20gJy4vc2V0UmVmJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZUZvcmtSZWYocmVmQSwgcmVmQikge1xuICAvKipcbiAgICogVGhpcyB3aWxsIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBpZiB0aGUgcmVmIHByb3BzIGNoYW5nZSBhbmQgYXJlIGRlZmluZWQuXG4gICAqIFRoaXMgbWVhbnMgcmVhY3Qgd2lsbCBjYWxsIHRoZSBvbGQgZm9ya1JlZiB3aXRoIGBudWxsYCBhbmQgdGhlIG5ldyBmb3JrUmVmXG4gICAqIHdpdGggdGhlIHJlZi4gQ2xlYW51cCBuYXR1cmFsbHkgZW1lcmdlcyBmcm9tIHRoaXMgYmVoYXZpb3JcbiAgICovXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAocmVmQSA9PSBudWxsICYmIHJlZkIgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyZWZWYWx1ZSkge1xuICAgICAgc2V0UmVmKHJlZkEsIHJlZlZhbHVlKTtcbiAgICAgIHNldFJlZihyZWZCLCByZWZWYWx1ZSk7XG4gICAgfTtcbiAgfSwgW3JlZkEsIHJlZkJdKTtcbn0iLCIvLyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvdjQuMS41L3NyYy9mb2N1cy12aXNpYmxlLmpzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xudmFyIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xudmFyIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gZmFsc2U7XG52YXIgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHlUaW1lb3V0ID0gbnVsbDtcbnZhciBpbnB1dFR5cGVzV2hpdGVsaXN0ID0ge1xuICB0ZXh0OiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHVybDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIHdlZWs6IHRydWUsXG4gIHRpbWU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlXG59O1xuLyoqXG4gKiBDb21wdXRlcyB3aGV0aGVyIHRoZSBnaXZlbiBlbGVtZW50IHNob3VsZCBhdXRvbWF0aWNhbGx5IHRyaWdnZXIgdGhlXG4gKiBgZm9jdXMtdmlzaWJsZWAgY2xhc3MgYmVpbmcgYWRkZWQsIGkuZS4gd2hldGhlciBpdCBzaG91bGQgYWx3YXlzIG1hdGNoXG4gKiBgOmZvY3VzLXZpc2libGVgIHdoZW4gZm9jdXNlZC5cbiAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBmb2N1c1RyaWdnZXJzS2V5Ym9hcmRNb2RhbGl0eShub2RlKSB7XG4gIHZhciB0eXBlID0gbm9kZS50eXBlLFxuICAgICAgdGFnTmFtZSA9IG5vZGUudGFnTmFtZTtcblxuICBpZiAodGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBpbnB1dFR5cGVzV2hpdGVsaXN0W3R5cGVdICYmICFub2RlLnJlYWRPbmx5KSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAodGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJiAhbm9kZS5yZWFkT25seSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG5vZGUuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbi8qKlxuICogS2VlcCB0cmFjayBvZiBvdXIga2V5Ym9hcmQgbW9kYWxpdHkgc3RhdGUgd2l0aCBgaGFkS2V5Ym9hcmRFdmVudGAuXG4gKiBJZiB0aGUgbW9zdCByZWNlbnQgdXNlciBpbnRlcmFjdGlvbiB3YXMgdmlhIHRoZSBrZXlib2FyZDtcbiAqIGFuZCB0aGUga2V5IHByZXNzIGRpZCBub3QgaW5jbHVkZSBhIG1ldGEsIGFsdC9vcHRpb24sIG9yIGNvbnRyb2wga2V5O1xuICogdGhlbiB0aGUgbW9kYWxpdHkgaXMga2V5Ym9hcmQuIE90aGVyd2lzZSwgdGhlIG1vZGFsaXR5IGlzIG5vdCBrZXlib2FyZC5cbiAqIEBwYXJhbSB7S2V5Ym9hcmRFdmVudH0gZXZlbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZUtleURvd24oZXZlbnQpIHtcbiAgaWYgKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBoYWRLZXlib2FyZEV2ZW50ID0gdHJ1ZTtcbn1cbi8qKlxuICogSWYgYXQgYW55IHBvaW50IGEgdXNlciBjbGlja3Mgd2l0aCBhIHBvaW50aW5nIGRldmljZSwgZW5zdXJlIHRoYXQgd2UgY2hhbmdlXG4gKiB0aGUgbW9kYWxpdHkgYXdheSBmcm9tIGtleWJvYXJkLlxuICogVGhpcyBhdm9pZHMgdGhlIHNpdHVhdGlvbiB3aGVyZSBhIHVzZXIgcHJlc3NlcyBhIGtleSBvbiBhbiBhbHJlYWR5IGZvY3VzZWRcbiAqIGVsZW1lbnQsIGFuZCB0aGVuIGNsaWNrcyBvbiBhIGRpZmZlcmVudCBlbGVtZW50LCBmb2N1c2luZyBpdCB3aXRoIGFcbiAqIHBvaW50aW5nIGRldmljZSwgd2hpbGUgd2Ugc3RpbGwgdGhpbmsgd2UncmUgaW4ga2V5Ym9hcmQgbW9kYWxpdHkuXG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVQb2ludGVyRG93bigpIHtcbiAgaGFkS2V5Ym9hcmRFdmVudCA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVWaXNpYmlsaXR5Q2hhbmdlKCkge1xuICBpZiAodGhpcy52aXNpYmlsaXR5U3RhdGUgPT09ICdoaWRkZW4nKSB7XG4gICAgLy8gSWYgdGhlIHRhYiBiZWNvbWVzIGFjdGl2ZSBhZ2FpbiwgdGhlIGJyb3dzZXIgd2lsbCBoYW5kbGUgY2FsbGluZyBmb2N1c1xuICAgIC8vIG9uIHRoZSBlbGVtZW50IChTYWZhcmkgYWN0dWFsbHkgY2FsbHMgaXQgdHdpY2UpLlxuICAgIC8vIElmIHRoaXMgdGFiIGNoYW5nZSBjYXVzZWQgYSBibHVyIG9uIGFuIGVsZW1lbnQgd2l0aCBmb2N1cy12aXNpYmxlLFxuICAgIC8vIHJlLWFwcGx5IHRoZSBjbGFzcyB3aGVuIHRoZSB1c2VyIHN3aXRjaGVzIGJhY2sgdG8gdGhlIHRhYi5cbiAgICBpZiAoaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkpIHtcbiAgICAgIGhhZEtleWJvYXJkRXZlbnQgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwYXJlKGRvYykge1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZUtleURvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIGhhbmRsZVZpc2liaWxpdHlDaGFuZ2UsIHRydWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGVhcmRvd24oZG9jKSB7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlS2V5RG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzRm9jdXNWaXNpYmxlKGV2ZW50KSB7XG4gIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gdGFyZ2V0Lm1hdGNoZXMoJzpmb2N1cy12aXNpYmxlJyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7fSAvLyBicm93c2VycyBub3QgaW1wbGVtZW50aW5nIDpmb2N1cy12aXNpYmxlIHdpbGwgdGhyb3cgYSBTeW50YXhFcnJvclxuICAvLyB3ZSB1c2Ugb3VyIG93biBoZXVyaXN0aWMgZm9yIHRob3NlIGJyb3dzZXJzXG4gIC8vIHJldGhyb3cgbWlnaHQgYmUgYmV0dGVyIGlmIGl0J3Mgbm90IHRoZSBleHBlY3RlZCBlcnJvciBidXQgZG8gd2UgcmVhbGx5XG4gIC8vIHdhbnQgdG8gY3Jhc2ggaWYgZm9jdXMtdmlzaWJsZSBtYWxmdW5jdGlvbmVkP1xuICAvLyBubyBuZWVkIGZvciB2YWxpZEZvY3VzVGFyZ2V0IGNoZWNrLiB0aGUgdXNlciBkb2VzIHRoYXQgYnkgYXR0YWNoaW5nIGl0IHRvXG4gIC8vIGZvY3VzYWJsZSBldmVudHMgb25seVxuXG5cbiAgcmV0dXJuIGhhZEtleWJvYXJkRXZlbnQgfHwgZm9jdXNUcmlnZ2Vyc0tleWJvYXJkTW9kYWxpdHkodGFyZ2V0KTtcbn1cbi8qKlxuICogU2hvdWxkIGJlIGNhbGxlZCBpZiBhIGJsdXIgZXZlbnQgaXMgZmlyZWQgb24gYSBmb2N1cy12aXNpYmxlIGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIGhhbmRsZUJsdXJWaXNpYmxlKCkge1xuICAvLyBUbyBkZXRlY3QgYSB0YWIvd2luZG93IHN3aXRjaCwgd2UgbG9vayBmb3IgYSBibHVyIGV2ZW50IGZvbGxvd2VkXG4gIC8vIHJhcGlkbHkgYnkgYSB2aXNpYmlsaXR5IGNoYW5nZS5cbiAgLy8gSWYgd2UgZG9uJ3Qgc2VlIGEgdmlzaWJpbGl0eSBjaGFuZ2Ugd2l0aGluIDEwMG1zLCBpdCdzIHByb2JhYmx5IGFcbiAgLy8gcmVndWxhciBmb2N1cyBjaGFuZ2UuXG4gIGhhZEZvY3VzVmlzaWJsZVJlY2VudGx5ID0gdHJ1ZTtcbiAgd2luZG93LmNsZWFyVGltZW91dChoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQpO1xuICBoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkgPSBmYWxzZTtcbiAgfSwgMTAwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlSXNGb2N1c1Zpc2libGUoKSB7XG4gIHZhciByZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICB2YXIgbm9kZSA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcblxuICAgIGlmIChub2RlICE9IG51bGwpIHtcbiAgICAgIHByZXBhcmUobm9kZS5vd25lckRvY3VtZW50KTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZURlYnVnVmFsdWUoaXNGb2N1c1Zpc2libGUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpc0ZvY3VzVmlzaWJsZTogaXNGb2N1c1Zpc2libGUsXG4gICAgb25CbHVyVmlzaWJsZTogaGFuZGxlQmx1clZpc2libGUsXG4gICAgcmVmOiByZWZcbiAgfTtcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQgPSByZXF1aXJlKFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbnRlcm9wUmVxdWlyZURlZmF1bHRcIik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlU3ZnSWNvbiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdXRpbHMvY3JlYXRlU3ZnSWNvblwiKSk7XG5cbnZhciBfanN4UnVudGltZSA9IHJlcXVpcmUoXCJyZWFjdC9qc3gtcnVudGltZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gKDAsIF9jcmVhdGVTdmdJY29uLmRlZmF1bHQpKCAvKiNfX1BVUkVfXyovKDAsIF9qc3hSdW50aW1lLmpzeCkoXCJwYXRoXCIsIHtcbiAgZDogXCJNMyAxOGgxOHYtMkgzdjJ6bTAtNWgxOHYtMkgzdjJ6bTAtN3YyaDE4VjZIM3pcIlxufSksICdNZW51Jyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgX2ludGVyb3BSZXF1aXJlRGVmYXVsdCA9IHJlcXVpcmUoXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdFwiKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVTdmdJY29uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi91dGlscy9jcmVhdGVTdmdJY29uXCIpKTtcblxudmFyIF9qc3hSdW50aW1lID0gcmVxdWlyZShcInJlYWN0L2pzeC1ydW50aW1lXCIpO1xuXG52YXIgX2RlZmF1bHQgPSAoMCwgX2NyZWF0ZVN2Z0ljb24uZGVmYXVsdCkoIC8qI19fUFVSRV9fKi8oMCwgX2pzeFJ1bnRpbWUuanN4KShcInBhdGhcIiwge1xuICBkOiBcIk0xMiAyMmMxLjEgMCAyLS45IDItMmgtNGMwIDEuMS44OSAyIDIgMnptNi02di01YzAtMy4wNy0xLjY0LTUuNjQtNC41LTYuMzJWNGMwLS44My0uNjctMS41LTEuNS0xLjVzLTEuNS42Ny0xLjUgMS41di42OEM3LjYzIDUuMzYgNiA3LjkyIDYgMTF2NWwtMiAydjFoMTZ2LTFsLTItMnpcIlxufSksICdOb3RpZmljYXRpb25zJyk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZGVmYXVsdFwiLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdXRpbHMuY3JlYXRlU3ZnSWNvbjtcbiAgfVxufSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiQG1hdGVyaWFsLXVpL2NvcmUvdXRpbHNcIik7IiwidmFyIGhhc1N5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbmV4cG9ydCBkZWZhdWx0IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ211aS5uZXN0ZWQnKSA6ICdfX1RIRU1FX05FU1RFRF9fJzsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGhlbWVQcm9wcyhwYXJhbXMpIHtcbiAgdmFyIHRoZW1lID0gcGFyYW1zLnRoZW1lLFxuICAgICAgbmFtZSA9IHBhcmFtcy5uYW1lLFxuICAgICAgcHJvcHMgPSBwYXJhbXMucHJvcHM7XG5cbiAgaWYgKCF0aGVtZSB8fCAhdGhlbWUucHJvcHMgfHwgIXRoZW1lLnByb3BzW25hbWVdKSB7XG4gICAgcmV0dXJuIHByb3BzO1xuICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wcywgY29kZSBib3Jyb3cgZnJvbSBSZWFjdCBzb3VyY2UuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iLzE1YThmMDMxODM4YTU1M2U0MWMwYjY2ZWIxYmNmMWRhODQ0ODEwNGQvcGFja2FnZXMvcmVhY3Qvc3JjL1JlYWN0RWxlbWVudC5qcyNMMjIxXG5cblxuICB2YXIgZGVmYXVsdFByb3BzID0gdGhlbWUucHJvcHNbbmFtZV07XG4gIHZhciBwcm9wTmFtZTtcblxuICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcHJvcHNbcHJvcE5hbWVdID0gZGVmYXVsdFByb3BzW3Byb3BOYW1lXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcHJvcHM7XG59IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG5leHBvcnQgdmFyIGlzQnJvd3NlciA9ICh0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2Yod2luZG93KSkgPT09IFwib2JqZWN0XCIgJiYgKHR5cGVvZiBkb2N1bWVudCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICdvYmplY3QnICYmIGRvY3VtZW50Lm5vZGVUeXBlID09PSA5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Jyb3dzZXI7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBpc0luQnJvd3NlciBmcm9tICdpcy1pbi1icm93c2VyJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBfYXNzZXJ0VGhpc0luaXRpYWxpemVkIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZCc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5cbnZhciBwbGFpbk9iamVjdENvbnN0cnVyY3RvciA9IHt9LmNvbnN0cnVjdG9yO1xuZnVuY3Rpb24gY2xvbmVTdHlsZShzdHlsZSkge1xuICBpZiAoc3R5bGUgPT0gbnVsbCB8fCB0eXBlb2Ygc3R5bGUgIT09ICdvYmplY3QnKSByZXR1cm4gc3R5bGU7XG4gIGlmIChBcnJheS5pc0FycmF5KHN0eWxlKSkgcmV0dXJuIHN0eWxlLm1hcChjbG9uZVN0eWxlKTtcbiAgaWYgKHN0eWxlLmNvbnN0cnVjdG9yICE9PSBwbGFpbk9iamVjdENvbnN0cnVyY3RvcikgcmV0dXJuIHN0eWxlO1xuICB2YXIgbmV3U3R5bGUgPSB7fTtcblxuICBmb3IgKHZhciBuYW1lIGluIHN0eWxlKSB7XG4gICAgbmV3U3R5bGVbbmFtZV0gPSBjbG9uZVN0eWxlKHN0eWxlW25hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBuZXdTdHlsZTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBydWxlIGluc3RhbmNlLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICBpZiAobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgbmFtZSA9ICd1bm5hbWVkJztcbiAgfVxuXG4gIHZhciBqc3MgPSBvcHRpb25zLmpzcztcbiAgdmFyIGRlY2xDb3B5ID0gY2xvbmVTdHlsZShkZWNsKTtcbiAgdmFyIHJ1bGUgPSBqc3MucGx1Z2lucy5vbkNyZWF0ZVJ1bGUobmFtZSwgZGVjbENvcHksIG9wdGlvbnMpO1xuICBpZiAocnVsZSkgcmV0dXJuIHJ1bGU7IC8vIEl0IGlzIGFuIGF0LXJ1bGUgYW5kIGl0IGhhcyBubyBpbnN0YW5jZS5cblxuICBpZiAobmFtZVswXSA9PT0gJ0AnKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBVbmtub3duIHJ1bGUgXCIgKyBuYW1lKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgam9pbiA9IGZ1bmN0aW9uIGpvaW4odmFsdWUsIGJ5KSB7XG4gIHZhciByZXN1bHQgPSAnJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgLy8gUmVtb3ZlICFpbXBvcnRhbnQgZnJvbSB0aGUgdmFsdWUsIGl0IHdpbGwgYmUgcmVhZGRlZCBsYXRlci5cbiAgICBpZiAodmFsdWVbaV0gPT09ICchaW1wb3J0YW50JykgYnJlYWs7XG4gICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9IGJ5O1xuICAgIHJlc3VsdCArPSB2YWx1ZVtpXTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIENvbnZlcnRzIGFycmF5IHZhbHVlcyB0byBzdHJpbmcuXG4gKlxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXV1gID4gYG1hcmdpbjogNXB4IDEwcHg7YFxuICogYGJvcmRlcjogWycxcHgnLCAnMnB4J11gID4gYGJvcmRlcjogMXB4LCAycHg7YFxuICogYG1hcmdpbjogW1snNXB4JywgJzEwcHgnXSwgJyFpbXBvcnRhbnQnXWAgPiBgbWFyZ2luOiA1cHggMTBweCAhaW1wb3J0YW50O2BcbiAqIGBjb2xvcjogWydyZWQnLCAhaW1wb3J0YW50XWAgPiBgY29sb3I6IHJlZCAhaW1wb3J0YW50O2BcbiAqL1xudmFyIHRvQ3NzVmFsdWUgPSBmdW5jdGlvbiB0b0Nzc1ZhbHVlKHZhbHVlLCBpZ25vcmVJbXBvcnRhbnQpIHtcbiAgaWYgKGlnbm9yZUltcG9ydGFudCA9PT0gdm9pZCAwKSB7XG4gICAgaWdub3JlSW1wb3J0YW50ID0gZmFsc2U7XG4gIH1cblxuICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gIHZhciBjc3NWYWx1ZSA9ICcnOyAvLyBTdXBwb3J0IHNwYWNlIHNlcGFyYXRlZCB2YWx1ZXMgdmlhIGBbWyc1cHgnLCAnMTBweCddXWAuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWVbMF0pKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlW2ldID09PSAnIWltcG9ydGFudCcpIGJyZWFrO1xuICAgICAgaWYgKGNzc1ZhbHVlKSBjc3NWYWx1ZSArPSAnLCAnO1xuICAgICAgY3NzVmFsdWUgKz0gam9pbih2YWx1ZVtpXSwgJyAnKTtcbiAgICB9XG4gIH0gZWxzZSBjc3NWYWx1ZSA9IGpvaW4odmFsdWUsICcsICcpOyAvLyBBZGQgIWltcG9ydGFudCwgYmVjYXVzZSBpdCB3YXMgaWdub3JlZC5cblxuXG4gIGlmICghaWdub3JlSW1wb3J0YW50ICYmIHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdID09PSAnIWltcG9ydGFudCcpIHtcbiAgICBjc3NWYWx1ZSArPSAnICFpbXBvcnRhbnQnO1xuICB9XG5cbiAgcmV0dXJuIGNzc1ZhbHVlO1xufTtcblxuLyoqXG4gKiBJbmRlbnQgYSBzdHJpbmcuXG4gKiBodHRwOi8vanNwZXJmLmNvbS9hcnJheS1qb2luLXZzLWZvclxuICovXG5mdW5jdGlvbiBpbmRlbnRTdHIoc3RyLCBpbmRlbnQpIHtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBpbmRlbnQ7IGluZGV4KyspIHtcbiAgICByZXN1bHQgKz0gJyAgJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgKyBzdHI7XG59XG4vKipcbiAqIENvbnZlcnRzIGEgUnVsZSB0byBDU1Mgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gdG9Dc3Moc2VsZWN0b3IsIHN0eWxlLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmICghc3R5bGUpIHJldHVybiByZXN1bHQ7XG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRpbmRlbnQgPSBfb3B0aW9ucy5pbmRlbnQsXG4gICAgICBpbmRlbnQgPSBfb3B0aW9ucyRpbmRlbnQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRpbmRlbnQ7XG4gIHZhciBmYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3M7XG4gIGlmIChzZWxlY3RvcikgaW5kZW50Kys7IC8vIEFwcGx5IGZhbGxiYWNrcyBmaXJzdC5cblxuICBpZiAoZmFsbGJhY2tzKSB7XG4gICAgLy8gQXJyYXkgc3ludGF4IHtmYWxsYmFja3M6IFt7cHJvcDogdmFsdWV9XX1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShmYWxsYmFja3MpKSB7XG4gICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgZmFsbGJhY2tzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICB2YXIgZmFsbGJhY2sgPSBmYWxsYmFja3NbaW5kZXhdO1xuXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gZmFsbGJhY2spIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBmYWxsYmFja1twcm9wXTtcblxuICAgICAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJ1xcbic7XG4gICAgICAgICAgICByZXN1bHQgKz0gaW5kZW50U3RyKHByb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKHZhbHVlKSArIFwiO1wiLCBpbmRlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPYmplY3Qgc3ludGF4IHtmYWxsYmFja3M6IHtwcm9wOiB2YWx1ZX19XG4gICAgICBmb3IgKHZhciBfcHJvcCBpbiBmYWxsYmFja3MpIHtcbiAgICAgICAgdmFyIF92YWx1ZSA9IGZhbGxiYWNrc1tfcHJvcF07XG5cbiAgICAgICAgaWYgKF92YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgICAgIHJlc3VsdCArPSBpbmRlbnRTdHIoX3Byb3AgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZSkgKyBcIjtcIiwgaW5kZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9wcm9wMiBpbiBzdHlsZSkge1xuICAgIHZhciBfdmFsdWUyID0gc3R5bGVbX3Byb3AyXTtcblxuICAgIGlmIChfdmFsdWUyICE9IG51bGwgJiYgX3Byb3AyICE9PSAnZmFsbGJhY2tzJykge1xuICAgICAgaWYgKHJlc3VsdCkgcmVzdWx0ICs9ICdcXG4nO1xuICAgICAgcmVzdWx0ICs9IGluZGVudFN0cihfcHJvcDIgKyBcIjogXCIgKyB0b0Nzc1ZhbHVlKF92YWx1ZTIpICsgXCI7XCIsIGluZGVudCk7XG4gICAgfVxuICB9IC8vIEFsbG93IGVtcHR5IHN0eWxlIGluIHRoaXMgY2FzZSwgYmVjYXVzZSBwcm9wZXJ0aWVzIHdpbGwgYmUgYWRkZWQgZHluYW1pY2FsbHkuXG5cblxuICBpZiAoIXJlc3VsdCAmJiAhb3B0aW9ucy5hbGxvd0VtcHR5KSByZXR1cm4gcmVzdWx0OyAvLyBXaGVuIHJ1bGUgaXMgYmVpbmcgc3RyaW5naWZpZWQgYmVmb3JlIHNlbGVjdG9yIHdhcyBkZWZpbmVkLlxuXG4gIGlmICghc2VsZWN0b3IpIHJldHVybiByZXN1bHQ7XG4gIGluZGVudC0tO1xuICBpZiAocmVzdWx0KSByZXN1bHQgPSBcIlxcblwiICsgcmVzdWx0ICsgXCJcXG5cIjtcbiAgcmV0dXJuIGluZGVudFN0cihzZWxlY3RvciArIFwiIHtcIiArIHJlc3VsdCwgaW5kZW50KSArIGluZGVudFN0cignfScsIGluZGVudCk7XG59XG5cbnZhciBlc2NhcGVSZWdleCA9IC8oW1tcXF0uIyokPjwrfj18XjooKSxcIidgXFxzXSkvZztcbnZhciBuYXRpdmVFc2NhcGUgPSB0eXBlb2YgQ1NTICE9PSAndW5kZWZpbmVkJyAmJiBDU1MuZXNjYXBlO1xudmFyIGVzY2FwZSA9IChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBuYXRpdmVFc2NhcGUgPyBuYXRpdmVFc2NhcGUoc3RyKSA6IHN0ci5yZXBsYWNlKGVzY2FwZVJlZ2V4LCAnXFxcXCQxJyk7XG59KTtcblxudmFyIEJhc2VTdHlsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBCYXNlU3R5bGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc3R5bGUnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMucmVuZGVyZXIgPSB2b2lkIDA7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB2YXIgc2hlZXQgPSBvcHRpb25zLnNoZWV0LFxuICAgICAgICBSZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnN0eWxlID0gc3R5bGU7XG4gICAgaWYgKHNoZWV0KSB0aGlzLnJlbmRlcmVyID0gc2hlZXQucmVuZGVyZXI7ZWxzZSBpZiAoUmVuZGVyZXIpIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTtcbiAgfVxuICAvKipcbiAgICogR2V0IG9yIHNldCBhIHN0eWxlIHByb3BlcnR5LlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBCYXNlU3R5bGVSdWxlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucHJvcCA9IGZ1bmN0aW9uIHByb3AobmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAvLyBJdCdzIGEgZ2V0dGVyLlxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5zdHlsZVtuYW1lXTsgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgdGhlIHZhbHVlIGhhcyBub3QgY2hhbmdlZC5cblxuICAgIHZhciBmb3JjZSA9IG9wdGlvbnMgPyBvcHRpb25zLmZvcmNlIDogZmFsc2U7XG4gICAgaWYgKCFmb3JjZSAmJiB0aGlzLnN0eWxlW25hbWVdID09PSB2YWx1ZSkgcmV0dXJuIHRoaXM7XG4gICAgdmFyIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5wcm9jZXNzICE9PSBmYWxzZSkge1xuICAgICAgbmV3VmFsdWUgPSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25DaGFuZ2VWYWx1ZSh2YWx1ZSwgbmFtZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgdmFyIGlzRW1wdHkgPSBuZXdWYWx1ZSA9PSBudWxsIHx8IG5ld1ZhbHVlID09PSBmYWxzZTtcbiAgICB2YXIgaXNEZWZpbmVkID0gbmFtZSBpbiB0aGlzLnN0eWxlOyAvLyBWYWx1ZSBpcyBlbXB0eSBhbmQgd2Fzbid0IGRlZmluZWQgYmVmb3JlLlxuXG4gICAgaWYgKGlzRW1wdHkgJiYgIWlzRGVmaW5lZCAmJiAhZm9yY2UpIHJldHVybiB0aGlzOyAvLyBXZSBhcmUgZ29pbmcgdG8gcmVtb3ZlIHRoaXMgdmFsdWUuXG5cbiAgICB2YXIgcmVtb3ZlID0gaXNFbXB0eSAmJiBpc0RlZmluZWQ7XG4gICAgaWYgKHJlbW92ZSkgZGVsZXRlIHRoaXMuc3R5bGVbbmFtZV07ZWxzZSB0aGlzLnN0eWxlW25hbWVdID0gbmV3VmFsdWU7IC8vIFJlbmRlcmFibGUgaXMgZGVmaW5lZCBpZiBTdHlsZVNoZWV0IG9wdGlvbiBgbGlua2AgaXMgdHJ1ZS5cblxuICAgIGlmICh0aGlzLnJlbmRlcmFibGUgJiYgdGhpcy5yZW5kZXJlcikge1xuICAgICAgaWYgKHJlbW92ZSkgdGhpcy5yZW5kZXJlci5yZW1vdmVQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUpO2Vsc2UgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLnJlbmRlcmFibGUsIG5hbWUsIG5ld1ZhbHVlKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5hdHRhY2hlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIFJ1bGUgaXMgbm90IGxpbmtlZC4gTWlzc2luZyBzaGVldCBvcHRpb24gXCJsaW5rOiB0cnVlXCIuJykgOiB2b2lkIDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgcmV0dXJuIEJhc2VTdHlsZVJ1bGU7XG59KCk7XG52YXIgU3R5bGVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShTdHlsZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBTdHlsZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbCh0aGlzLCBrZXksIHN0eWxlLCBvcHRpb25zKSB8fCB0aGlzO1xuICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IHZvaWQgMDtcbiAgICBfdGhpcy5pZCA9IHZvaWQgMDtcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHZhciBzZWxlY3RvciA9IG9wdGlvbnMuc2VsZWN0b3IsXG4gICAgICAgIHNjb3BlZCA9IG9wdGlvbnMuc2NvcGVkLFxuICAgICAgICBzaGVldCA9IG9wdGlvbnMuc2hlZXQsXG4gICAgICAgIGdlbmVyYXRlSWQgPSBvcHRpb25zLmdlbmVyYXRlSWQ7XG5cbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIF90aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgIH0gZWxzZSBpZiAoc2NvcGVkICE9PSBmYWxzZSkge1xuICAgICAgX3RoaXMuaWQgPSBnZW5lcmF0ZUlkKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpLCBzaGVldCk7XG4gICAgICBfdGhpcy5zZWxlY3RvclRleHQgPSBcIi5cIiArIGVzY2FwZShfdGhpcy5pZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG4gIC8qKlxuICAgKiBTZXQgc2VsZWN0b3Igc3RyaW5nLlxuICAgKiBBdHRlbnRpb246IHVzZSB0aGlzIHdpdGggY2F1dGlvbi4gTW9zdCBicm93c2VycyBkaWRuJ3QgaW1wbGVtZW50XG4gICAqIHNlbGVjdG9yVGV4dCBzZXR0ZXIsIHNvIHRoaXMgbWF5IHJlc3VsdCBpbiByZXJlbmRlcmluZyBvZiBlbnRpcmUgU3R5bGUgU2hlZXQuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90bzIgPSBTdHlsZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBBcHBseSBydWxlIHRvIGFuIGVsZW1lbnQgaW5saW5lLlxuICAgKi9cbiAgX3Byb3RvMi5hcHBseVRvID0gZnVuY3Rpb24gYXBwbHlUbyhyZW5kZXJhYmxlKSB7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblxuICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgdmFyIGpzb24gPSB0aGlzLnRvSlNPTigpO1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIGpzb24pIHtcbiAgICAgICAgcmVuZGVyZXIuc2V0UHJvcGVydHkocmVuZGVyYWJsZSwgcHJvcCwganNvbltwcm9wXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgSlNPTiByZXByZXNlbnRhdGlvbiBvZiB0aGUgcnVsZS5cbiAgICogRmFsbGJhY2tzIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgKiBVc2VmdWwgZm9yIGlubGluZSBzdHlsZXMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvMi50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdmFyIGpzb24gPSB7fTtcblxuICAgIGZvciAodmFyIHByb3AgaW4gdGhpcy5zdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5zdHlsZVtwcm9wXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSBqc29uW3Byb3BdID0gdmFsdWU7ZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIGpzb25bcHJvcF0gPSB0b0Nzc1ZhbHVlKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4ganNvbjtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuc2VsZWN0b3JUZXh0LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU3R5bGVSdWxlLCBbe1xuICAgIGtleTogXCJzZWxlY3RvclwiLFxuICAgIHNldDogZnVuY3Rpb24gc2V0KHNlbGVjdG9yKSB7XG4gICAgICBpZiAoc2VsZWN0b3IgPT09IHRoaXMuc2VsZWN0b3JUZXh0KSByZXR1cm47XG4gICAgICB0aGlzLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yO1xuICAgICAgdmFyIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcixcbiAgICAgICAgICByZW5kZXJhYmxlID0gdGhpcy5yZW5kZXJhYmxlO1xuICAgICAgaWYgKCFyZW5kZXJhYmxlIHx8ICFyZW5kZXJlcikgcmV0dXJuO1xuICAgICAgdmFyIGhhc0NoYW5nZWQgPSByZW5kZXJlci5zZXRTZWxlY3RvcihyZW5kZXJhYmxlLCBzZWxlY3Rvcik7IC8vIElmIHNlbGVjdG9yIHNldHRlciBpcyBub3QgaW1wbGVtZW50ZWQsIHJlcmVuZGVyIHRoZSBydWxlLlxuXG4gICAgICBpZiAoIWhhc0NoYW5nZWQpIHtcbiAgICAgICAgcmVuZGVyZXIucmVwbGFjZVJ1bGUocmVuZGVyYWJsZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBzZWxlY3RvciBzdHJpbmcuXG4gICAgICovXG4gICAgLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0b3JUZXh0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTdHlsZVJ1bGU7XG59KEJhc2VTdHlsZVJ1bGUpO1xudmFyIHBsdWdpblN0eWxlUnVsZSA9IHtcbiAgb25DcmVhdGVSdWxlOiBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAobmFtZVswXSA9PT0gJ0AnIHx8IG9wdGlvbnMucGFyZW50ICYmIG9wdGlvbnMucGFyZW50LnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFN0eWxlUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucyk7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zID0ge1xuICBpbmRlbnQ6IDEsXG4gIGNoaWxkcmVuOiB0cnVlXG59O1xudmFyIGF0UmVnRXhwID0gL0AoW1xcdy1dKykvO1xuLyoqXG4gKiBDb25kaXRpb25hbCBydWxlIGZvciBAbWVkaWEsIEBzdXBwb3J0c1xuICovXG5cbnZhciBDb25kaXRpb25hbFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb25kaXRpb25hbFJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnY29uZGl0aW9uYWwnO1xuICAgIHRoaXMuYXQgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5xdWVyeSA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGVzID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHZhciBhdE1hdGNoID0ga2V5Lm1hdGNoKGF0UmVnRXhwKTtcbiAgICB0aGlzLmF0ID0gYXRNYXRjaCA/IGF0TWF0Y2hbMV0gOiAndW5rbm93bic7IC8vIEtleSBtaWdodCBjb250YWluIGEgdW5pcXVlIHN1ZmZpeCBpbiBjYXNlIHRoZSBgbmFtZWAgcGFzc2VkIGJ5IHVzZXIgd2FzIGR1cGxpY2F0ZS5cblxuICAgIHRoaXMucXVlcnkgPSBvcHRpb25zLm5hbWUgfHwgXCJAXCIgKyB0aGlzLmF0O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIHN0eWxlc1tuYW1lXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IENvbmRpdGlvbmFsUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMuaW5kZW50O1xuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09IG51bGwpIG9wdGlvbnMuY2hpbGRyZW4gPSBkZWZhdWx0VG9TdHJpbmdPcHRpb25zLmNoaWxkcmVuO1xuXG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5xdWVyeSArIFwiIHt9XCI7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgICByZXR1cm4gY2hpbGRyZW4gPyB0aGlzLnF1ZXJ5ICsgXCIge1xcblwiICsgY2hpbGRyZW4gKyBcIlxcbn1cIiA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb25hbFJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwID0gL0BtZWRpYXxAc3VwcG9ydHNcXHMrLztcbnZhciBwbHVnaW5Db25kaXRpb25hbFJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cC50ZXN0KGtleSkgPyBuZXcgQ29uZGl0aW9uYWxSdWxlKGtleSwgc3R5bGVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH1cbn07XG5cbnZhciBkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEgPSB7XG4gIGluZGVudDogMSxcbiAgY2hpbGRyZW46IHRydWVcbn07XG52YXIgbmFtZVJlZ0V4cCA9IC9Aa2V5ZnJhbWVzXFxzKyhbXFx3LV0rKS87XG4vKipcbiAqIFJ1bGUgZm9yIEBrZXlmcmFtZXNcbiAqL1xuXG52YXIgS2V5ZnJhbWVzUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEtleWZyYW1lc1J1bGUoa2V5LCBmcmFtZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAna2V5ZnJhbWVzJztcbiAgICB0aGlzLmF0ID0gJ0BrZXlmcmFtZXMnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMubmFtZSA9IHZvaWQgMDtcbiAgICB0aGlzLmlkID0gdm9pZCAwO1xuICAgIHRoaXMucnVsZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdmFyIG5hbWVNYXRjaCA9IGtleS5tYXRjaChuYW1lUmVnRXhwKTtcblxuICAgIGlmIChuYW1lTWF0Y2ggJiYgbmFtZU1hdGNoWzFdKSB7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lTWF0Y2hbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmFtZSA9ICdub25hbWUnO1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBCYWQga2V5ZnJhbWVzIG5hbWUgXCIgKyBrZXkpIDogdm9pZCAwO1xuICAgIH1cblxuICAgIHRoaXMua2V5ID0gdGhpcy50eXBlICsgXCItXCIgKyB0aGlzLm5hbWU7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB2YXIgc2NvcGVkID0gb3B0aW9ucy5zY29wZWQsXG4gICAgICAgIHNoZWV0ID0gb3B0aW9ucy5zaGVldCxcbiAgICAgICAgZ2VuZXJhdGVJZCA9IG9wdGlvbnMuZ2VuZXJhdGVJZDtcbiAgICB0aGlzLmlkID0gc2NvcGVkID09PSBmYWxzZSA/IHRoaXMubmFtZSA6IGVzY2FwZShnZW5lcmF0ZUlkKHRoaXMsIHNoZWV0KSk7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBmcmFtZXMpIHtcbiAgICAgIHRoaXMucnVsZXMuYWRkKG5hbWUsIGZyYW1lc1tuYW1lXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEtleWZyYW1lc1J1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdFRvU3RyaW5nT3B0aW9ucyQxO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmluZGVudCA9PSBudWxsKSBvcHRpb25zLmluZGVudCA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5pbmRlbnQ7XG4gICAgaWYgKG9wdGlvbnMuY2hpbGRyZW4gPT0gbnVsbCkgb3B0aW9ucy5jaGlsZHJlbiA9IGRlZmF1bHRUb1N0cmluZ09wdGlvbnMkMS5jaGlsZHJlbjtcblxuICAgIGlmIChvcHRpb25zLmNoaWxkcmVuID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7fVwiO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucnVsZXMudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgaWYgKGNoaWxkcmVuKSBjaGlsZHJlbiA9IFwiXFxuXCIgKyBjaGlsZHJlbiArIFwiXFxuXCI7XG4gICAgcmV0dXJuIHRoaXMuYXQgKyBcIiBcIiArIHRoaXMuaWQgKyBcIiB7XCIgKyBjaGlsZHJlbiArIFwifVwiO1xuICB9O1xuXG4gIHJldHVybiBLZXlmcmFtZXNSdWxlO1xufSgpO1xudmFyIGtleVJlZ0V4cCQxID0gL0BrZXlmcmFtZXNcXHMrLztcbnZhciByZWZSZWdFeHAgPSAvXFwkKFtcXHctXSspL2c7XG5cbnZhciBmaW5kUmVmZXJlbmNlZEtleWZyYW1lID0gZnVuY3Rpb24gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIGtleWZyYW1lcykge1xuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsLnJlcGxhY2UocmVmUmVnRXhwLCBmdW5jdGlvbiAobWF0Y2gsIG5hbWUpIHtcbiAgICAgIGlmIChuYW1lIGluIGtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4ga2V5ZnJhbWVzW25hbWVdO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFJlZmVyZW5jZWQga2V5ZnJhbWVzIHJ1bGUgXFxcIlwiICsgbmFtZSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdmFsO1xufTtcbi8qKlxuICogUmVwbGFjZSB0aGUgcmVmZXJlbmNlIGZvciBhIGFuaW1hdGlvbiBuYW1lLlxuICovXG5cblxudmFyIHJlcGxhY2VSZWYgPSBmdW5jdGlvbiByZXBsYWNlUmVmKHN0eWxlLCBwcm9wLCBrZXlmcmFtZXMpIHtcbiAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG4gIHZhciByZWZLZXlmcmFtZSA9IGZpbmRSZWZlcmVuY2VkS2V5ZnJhbWUodmFsdWUsIGtleWZyYW1lcyk7XG5cbiAgaWYgKHJlZktleWZyYW1lICE9PSB2YWx1ZSkge1xuICAgIHN0eWxlW3Byb3BdID0gcmVmS2V5ZnJhbWU7XG4gIH1cbn07XG5cbnZhciBwbHVnaW4gPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleVJlZ0V4cCQxLnRlc3Qoa2V5KSA/IG5ldyBLZXlmcmFtZXNSdWxlKGtleSwgZnJhbWVzLCBvcHRpb25zKSA6IG51bGw7XG4gIH0sXG4gIC8vIEFuaW1hdGlvbiBuYW1lIHJlZiByZXBsYWNlci5cbiAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlLCBzaGVldCkge1xuICAgIGlmIChydWxlLnR5cGUgIT09ICdzdHlsZScgfHwgIXNoZWV0KSByZXR1cm4gc3R5bGU7XG4gICAgaWYgKCdhbmltYXRpb24tbmFtZScgaW4gc3R5bGUpIHJlcGxhY2VSZWYoc3R5bGUsICdhbmltYXRpb24tbmFtZScsIHNoZWV0LmtleWZyYW1lcyk7XG4gICAgaWYgKCdhbmltYXRpb24nIGluIHN0eWxlKSByZXBsYWNlUmVmKHN0eWxlLCAnYW5pbWF0aW9uJywgc2hlZXQua2V5ZnJhbWVzKTtcbiAgICByZXR1cm4gc3R5bGU7XG4gIH0sXG4gIG9uQ2hhbmdlVmFsdWU6IGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgaWYgKCFzaGVldCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHByb3ApIHtcbiAgICAgIGNhc2UgJ2FuaW1hdGlvbic6XG4gICAgICAgIHJldHVybiBmaW5kUmVmZXJlbmNlZEtleWZyYW1lKHZhbCwgc2hlZXQua2V5ZnJhbWVzKTtcblxuICAgICAgY2FzZSAnYW5pbWF0aW9uLW5hbWUnOlxuICAgICAgICByZXR1cm4gZmluZFJlZmVyZW5jZWRLZXlmcmFtZSh2YWwsIHNoZWV0LmtleWZyYW1lcyk7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgS2V5ZnJhbWVSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfQmFzZVN0eWxlUnVsZSkge1xuICBfaW5oZXJpdHNMb29zZShLZXlmcmFtZVJ1bGUsIF9CYXNlU3R5bGVSdWxlKTtcblxuICBmdW5jdGlvbiBLZXlmcmFtZVJ1bGUoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX0Jhc2VTdHlsZVJ1bGUuY2FsbC5hcHBseShfQmFzZVN0eWxlUnVsZSwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBLZXlmcmFtZVJ1bGUucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG4gICAgdmFyIG9wdHMgPSBsaW5rID8gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIGFsbG93RW1wdHk6IHRydWVcbiAgICB9KSA6IG9wdGlvbnM7XG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMua2V5LCB0aGlzLnN0eWxlLCBvcHRzKTtcbiAgfTtcblxuICByZXR1cm4gS2V5ZnJhbWVSdWxlO1xufShCYXNlU3R5bGVSdWxlKTtcbnZhciBwbHVnaW5LZXlmcmFtZVJ1bGUgPSB7XG4gIG9uQ3JlYXRlUnVsZTogZnVuY3Rpb24gb25DcmVhdGVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucy5wYXJlbnQgJiYgb3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2tleWZyYW1lcycpIHtcbiAgICAgIHJldHVybiBuZXcgS2V5ZnJhbWVSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59O1xuXG52YXIgRm9udEZhY2VSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9udEZhY2VSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZm9udC1mYWNlJztcbiAgICB0aGlzLmF0ID0gJ0Bmb250LWZhY2UnO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMuc3R5bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gdm9pZCAwO1xuICAgIHRoaXMuaXNQcm9jZXNzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmFibGUgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEZvbnRGYWNlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuc3R5bGUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdG9Dc3ModGhpcy5hdCwgdGhpcy5zdHlsZVtpbmRleF0pO1xuICAgICAgICBpZiAodGhpcy5zdHlsZVtpbmRleCArIDFdKSBzdHIgKz0gJ1xcbic7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvQ3NzKHRoaXMuYXQsIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBGb250RmFjZVJ1bGU7XG59KCk7XG52YXIga2V5UmVnRXhwJDIgPSAvQGZvbnQtZmFjZS87XG52YXIgcGx1Z2luRm9udEZhY2VSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleVJlZ0V4cCQyLnRlc3Qoa2V5KSA/IG5ldyBGb250RmFjZVJ1bGUoa2V5LCBzdHlsZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgVmlld3BvcnRSdWxlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAndmlld3BvcnQnO1xuICAgIHRoaXMuYXQgPSAnQHZpZXdwb3J0JztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnN0eWxlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBWaWV3cG9ydFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdG9Dc3ModGhpcy5rZXksIHRoaXMuc3R5bGUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBWaWV3cG9ydFJ1bGU7XG59KCk7XG52YXIgcGx1Z2luVmlld3BvcnRSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSA9PT0gJ0B2aWV3cG9ydCcgfHwga2V5ID09PSAnQC1tcy12aWV3cG9ydCcgPyBuZXcgVmlld3BvcnRSdWxlKGtleSwgc3R5bGUsIG9wdGlvbnMpIDogbnVsbDtcbiAgfVxufTtcblxudmFyIFNpbXBsZVJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaW1wbGVSdWxlKGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnc2ltcGxlJztcbiAgICB0aGlzLmtleSA9IHZvaWQgMDtcbiAgICB0aGlzLnZhbHVlID0gdm9pZCAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmlzUHJvY2Vzc2VkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJhYmxlID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5cblxuICB2YXIgX3Byb3RvID0gU2ltcGxlUnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcob3B0aW9ucykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMudmFsdWUpKSB7XG4gICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnZhbHVlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHIgKz0gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWVbaW5kZXhdICsgXCI7XCI7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlW2luZGV4ICsgMV0pIHN0ciArPSAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5rZXkgKyBcIiBcIiArIHRoaXMudmFsdWUgKyBcIjtcIjtcbiAgfTtcblxuICByZXR1cm4gU2ltcGxlUnVsZTtcbn0oKTtcbnZhciBrZXlzTWFwID0ge1xuICAnQGNoYXJzZXQnOiB0cnVlLFxuICAnQGltcG9ydCc6IHRydWUsXG4gICdAbmFtZXNwYWNlJzogdHJ1ZVxufTtcbnZhciBwbHVnaW5TaW1wbGVSdWxlID0ge1xuICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGtleSBpbiBrZXlzTWFwID8gbmV3IFNpbXBsZVJ1bGUoa2V5LCB2YWx1ZSwgb3B0aW9ucykgOiBudWxsO1xuICB9XG59O1xuXG52YXIgcGx1Z2lucyA9IFtwbHVnaW5TdHlsZVJ1bGUsIHBsdWdpbkNvbmRpdGlvbmFsUnVsZSwgcGx1Z2luLCBwbHVnaW5LZXlmcmFtZVJ1bGUsIHBsdWdpbkZvbnRGYWNlUnVsZSwgcGx1Z2luVmlld3BvcnRSdWxlLCBwbHVnaW5TaW1wbGVSdWxlXTtcblxudmFyIGRlZmF1bHRVcGRhdGVPcHRpb25zID0ge1xuICBwcm9jZXNzOiB0cnVlXG59O1xudmFyIGZvcmNlVXBkYXRlT3B0aW9ucyA9IHtcbiAgZm9yY2U6IHRydWUsXG4gIHByb2Nlc3M6IHRydWVcbiAgLyoqXG4gICAqIENvbnRhaW5zIHJ1bGVzIG9iamVjdHMgYW5kIGFsbG93cyBhZGRpbmcvcmVtb3ZpbmcgZXRjLlxuICAgKiBJcyB1c2VkIGZvciBlLmcuIGJ5IGBTdHlsZVNoZWV0YCBvciBgQ29uZGl0aW9uYWxSdWxlYC5cbiAgICovXG5cbn07XG5cbnZhciBSdWxlTGlzdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIFJ1bGVzIHJlZ2lzdHJ5IGZvciBhY2Nlc3MgYnkgLmdldCgpIG1ldGhvZC5cbiAgLy8gSXQgY29udGFpbnMgdGhlIHNhbWUgcnVsZSByZWdpc3RlcmVkIGJ5IG5hbWUgYW5kIGJ5IHNlbGVjdG9yLlxuICAvLyBPcmlnaW5hbCBzdHlsZXMgb2JqZWN0LlxuICAvLyBVc2VkIHRvIGVuc3VyZSBjb3JyZWN0IHJ1bGVzIG9yZGVyLlxuICBmdW5jdGlvbiBSdWxlTGlzdChvcHRpb25zKSB7XG4gICAgdGhpcy5tYXAgPSB7fTtcbiAgICB0aGlzLnJhdyA9IHt9O1xuICAgIHRoaXMuaW5kZXggPSBbXTtcbiAgICB0aGlzLmNvdW50ZXIgPSAwO1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmNsYXNzZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB2b2lkIDA7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNsYXNzZXMgPSBvcHRpb25zLmNsYXNzZXM7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBvcHRpb25zLmtleWZyYW1lcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGFuZCByZWdpc3RlciBydWxlLlxuICAgKlxuICAgKiBXaWxsIG5vdCByZW5kZXIgYWZ0ZXIgU3R5bGUgU2hlZXQgd2FzIHJlbmRlcmVkIHRoZSBmaXJzdCB0aW1lLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBSdWxlTGlzdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChuYW1lLCBkZWNsLCBydWxlT3B0aW9ucykge1xuICAgIHZhciBfdGhpcyRvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBwYXJlbnQgPSBfdGhpcyRvcHRpb25zLnBhcmVudCxcbiAgICAgICAgc2hlZXQgPSBfdGhpcyRvcHRpb25zLnNoZWV0LFxuICAgICAgICBqc3MgPSBfdGhpcyRvcHRpb25zLmpzcyxcbiAgICAgICAgUmVuZGVyZXIgPSBfdGhpcyRvcHRpb25zLlJlbmRlcmVyLFxuICAgICAgICBnZW5lcmF0ZUlkID0gX3RoaXMkb3B0aW9ucy5nZW5lcmF0ZUlkLFxuICAgICAgICBzY29wZWQgPSBfdGhpcyRvcHRpb25zLnNjb3BlZDtcblxuICAgIHZhciBvcHRpb25zID0gX2V4dGVuZHMoe1xuICAgICAgY2xhc3NlczogdGhpcy5jbGFzc2VzLFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICBzaGVldDogc2hlZXQsXG4gICAgICBqc3M6IGpzcyxcbiAgICAgIFJlbmRlcmVyOiBSZW5kZXJlcixcbiAgICAgIGdlbmVyYXRlSWQ6IGdlbmVyYXRlSWQsXG4gICAgICBzY29wZWQ6IHNjb3BlZCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzLFxuICAgICAgc2VsZWN0b3I6IHVuZGVmaW5lZFxuICAgIH0sIHJ1bGVPcHRpb25zKTsgLy8gV2hlbiB1c2VyIHVzZXMgLmNyZWF0ZVN0eWxlU2hlZXQoKSwgZHVwbGljYXRlIG5hbWVzIGFyZSBub3QgcG9zc2libGUsIGJ1dFxuICAgIC8vIGBzaGVldC5hZGRSdWxlKClgIG9wZW5zIHRoZSBkb29yIGZvciBhbnkgZHVwbGljYXRlIHJ1bGUgbmFtZS4gV2hlbiB0aGlzIGhhcHBlbnNcbiAgICAvLyB3ZSBuZWVkIHRvIG1ha2UgdGhlIGtleSB1bmlxdWUgd2l0aGluIHRoaXMgUnVsZUxpc3QgaW5zdGFuY2Ugc2NvcGUuXG5cblxuICAgIHZhciBrZXkgPSBuYW1lO1xuXG4gICAgaWYgKG5hbWUgaW4gdGhpcy5yYXcpIHtcbiAgICAgIGtleSA9IG5hbWUgKyBcIi1kXCIgKyB0aGlzLmNvdW50ZXIrKztcbiAgICB9IC8vIFdlIG5lZWQgdG8gc2F2ZSB0aGUgb3JpZ2luYWwgZGVjbCBiZWZvcmUgY3JlYXRpbmcgdGhlIHJ1bGVcbiAgICAvLyBiZWNhdXNlIGNhY2hlIHBsdWdpbiBuZWVkcyB0byB1c2UgaXQgYXMgYSBrZXkgdG8gcmV0dXJuIGEgY2FjaGVkIHJ1bGUuXG5cblxuICAgIHRoaXMucmF3W2tleV0gPSBkZWNsO1xuXG4gICAgaWYgKGtleSBpbiB0aGlzLmNsYXNzZXMpIHtcbiAgICAgIC8vIEUuZy4gcnVsZXMgaW5zaWRlIG9mIEBtZWRpYSBjb250YWluZXJcbiAgICAgIG9wdGlvbnMuc2VsZWN0b3IgPSBcIi5cIiArIGVzY2FwZSh0aGlzLmNsYXNzZXNba2V5XSk7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKGtleSwgZGVjbCwgb3B0aW9ucyk7XG4gICAgaWYgKCFydWxlKSByZXR1cm4gbnVsbDtcbiAgICB0aGlzLnJlZ2lzdGVyKHJ1bGUpO1xuICAgIHZhciBpbmRleCA9IG9wdGlvbnMuaW5kZXggPT09IHVuZGVmaW5lZCA/IHRoaXMuaW5kZXgubGVuZ3RoIDogb3B0aW9ucy5pbmRleDtcbiAgICB0aGlzLmluZGV4LnNwbGljZShpbmRleCwgMCwgcnVsZSk7XG4gICAgcmV0dXJuIHJ1bGU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldCA9IGZ1bmN0aW9uIGdldChuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwW25hbWVdO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUocnVsZSkge1xuICAgIHRoaXMudW5yZWdpc3RlcihydWxlKTtcbiAgICBkZWxldGUgdGhpcy5yYXdbcnVsZS5rZXldO1xuICAgIHRoaXMuaW5kZXguc3BsaWNlKHRoaXMuaW5kZXguaW5kZXhPZihydWxlKSwgMSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mKHJ1bGUpIHtcbiAgICByZXR1cm4gdGhpcy5pbmRleC5pbmRleE9mKHJ1bGUpO1xuICB9XG4gIC8qKlxuICAgKiBSdW4gYG9uUHJvY2Vzc1J1bGUoKWAgcGx1Z2lucyBvbiBldmVyeSBydWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcm9jZXNzID0gZnVuY3Rpb24gcHJvY2VzcygpIHtcbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMub3B0aW9ucy5qc3MucGx1Z2luczsgLy8gV2UgbmVlZCB0byBjbG9uZSBhcnJheSBiZWNhdXNlIGlmIHdlIG1vZGlmeSB0aGUgaW5kZXggc29tZXdoZXJlIGVsc2UgZHVyaW5nIGEgbG9vcFxuICAgIC8vIHdlIGVuZCB1cCB3aXRoIHZlcnkgaGFyZC10by10cmFjay1kb3duIHNpZGUgZWZmZWN0cy5cblxuICAgIHRoaXMuaW5kZXguc2xpY2UoMCkuZm9yRWFjaChwbHVnaW5zLm9uUHJvY2Vzc1J1bGUsIHBsdWdpbnMpO1xuICB9XG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIHJ1bGUgaW4gYC5tYXBgLCBgLmNsYXNzZXNgIGFuZCBgLmtleWZyYW1lc2AgbWFwcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVnaXN0ZXIgPSBmdW5jdGlvbiByZWdpc3RlcihydWxlKSB7XG4gICAgdGhpcy5tYXBbcnVsZS5rZXldID0gcnVsZTtcblxuICAgIGlmIChydWxlIGluc3RhbmNlb2YgU3R5bGVSdWxlKSB7XG4gICAgICB0aGlzLm1hcFtydWxlLnNlbGVjdG9yXSA9IHJ1bGU7XG4gICAgICBpZiAocnVsZS5pZCkgdGhpcy5jbGFzc2VzW3J1bGUua2V5XSA9IHJ1bGUuaWQ7XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSAmJiB0aGlzLmtleWZyYW1lcykge1xuICAgICAgdGhpcy5rZXlmcmFtZXNbcnVsZS5uYW1lXSA9IHJ1bGUuaWQ7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVbnJlZ2lzdGVyIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5yZWdpc3RlciA9IGZ1bmN0aW9uIHVucmVnaXN0ZXIocnVsZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtydWxlLmtleV07XG5cbiAgICBpZiAocnVsZSBpbnN0YW5jZW9mIFN0eWxlUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMubWFwW3J1bGUuc2VsZWN0b3JdO1xuICAgICAgZGVsZXRlIHRoaXMuY2xhc3Nlc1tydWxlLmtleV07XG4gICAgfSBlbHNlIGlmIChydWxlIGluc3RhbmNlb2YgS2V5ZnJhbWVzUnVsZSkge1xuICAgICAgZGVsZXRlIHRoaXMua2V5ZnJhbWVzW3J1bGUubmFtZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGZ1bmN0aW9uIHZhbHVlcyB3aXRoIGEgbmV3IGRhdGEuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICB2YXIgbmFtZTtcbiAgICB2YXIgZGF0YTtcbiAgICB2YXIgb3B0aW9ucztcblxuICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdOyAvLyAkRmxvd0ZpeE1lW2ludmFsaWQtdHVwbGUtaW5kZXhdXG5cbiAgICAgIGRhdGEgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07IC8vICRGbG93Rml4TWVbaW52YWxpZC10dXBsZS1pbmRleF1cblxuICAgICAgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXTsgLy8gJEZsb3dGaXhNZVtpbnZhbGlkLXR1cGxlLWluZGV4XVxuXG4gICAgICBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdO1xuICAgICAgbmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMubWFwW25hbWVdLCBkYXRhLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHRoaXMuaW5kZXgubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgIHRoaXMudXBkYXRlT25lKHRoaXMuaW5kZXhbaW5kZXhdLCBkYXRhLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEV4ZWN1dGUgcGx1Z2lucywgdXBkYXRlIHJ1bGUgcHJvcHMuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRVcGRhdGVPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBfdGhpcyRvcHRpb25zMiA9IHRoaXMub3B0aW9ucyxcbiAgICAgICAgcGx1Z2lucyA9IF90aGlzJG9wdGlvbnMyLmpzcy5wbHVnaW5zLFxuICAgICAgICBzaGVldCA9IF90aGlzJG9wdGlvbnMyLnNoZWV0OyAvLyBJdCBpcyBhIHJ1bGVzIGNvbnRhaW5lciBsaWtlIGZvciBlLmcuIENvbmRpdGlvbmFsUnVsZS5cblxuICAgIGlmIChydWxlLnJ1bGVzIGluc3RhbmNlb2YgUnVsZUxpc3QpIHtcbiAgICAgIHJ1bGUucnVsZXMudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlO1xuICAgIHZhciBzdHlsZSA9IHN0eWxlUnVsZS5zdHlsZTtcbiAgICBwbHVnaW5zLm9uVXBkYXRlKGRhdGEsIHJ1bGUsIHNoZWV0LCBvcHRpb25zKTsgLy8gV2UgcmVseSBvbiBhIG5ldyBgc3R5bGVgIHJlZiBpbiBjYXNlIGl0IHdhcyBtdXRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLlxuXG4gICAgaWYgKG9wdGlvbnMucHJvY2VzcyAmJiBzdHlsZSAmJiBzdHlsZSAhPT0gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIHJ1biB0aGUgcGx1Z2lucyBpbiBjYXNlIG5ldyBgc3R5bGVgIHJlbGllcyBvbiBzeW50YXggcGx1Z2lucy5cbiAgICAgIHBsdWdpbnMub25Qcm9jZXNzU3R5bGUoc3R5bGVSdWxlLnN0eWxlLCBzdHlsZVJ1bGUsIHNoZWV0KTsgLy8gVXBkYXRlIGFuZCBhZGQgcHJvcHMuXG5cbiAgICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGVSdWxlLnN0eWxlKSB7XG4gICAgICAgIHZhciBuZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbcHJvcF07XG4gICAgICAgIHZhciBwcmV2VmFsdWUgPSBzdHlsZVtwcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChuZXh0VmFsdWUgIT09IHByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKHByb3AsIG5leHRWYWx1ZSwgZm9yY2VVcGRhdGVPcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZW1vdmUgcHJvcHMuXG5cblxuICAgICAgZm9yICh2YXIgX3Byb3AgaW4gc3R5bGUpIHtcbiAgICAgICAgdmFyIF9uZXh0VmFsdWUgPSBzdHlsZVJ1bGUuc3R5bGVbX3Byb3BdO1xuICAgICAgICB2YXIgX3ByZXZWYWx1ZSA9IHN0eWxlW19wcm9wXTsgLy8gV2UgbmVlZCB0byB1c2UgYGZvcmNlOiB0cnVlYCBiZWNhdXNlIGBydWxlLnN0eWxlYCBoYXMgYmVlbiB1cGRhdGVkIGR1cmluZyBvblVwZGF0ZSBob29rLCBzbyBgcnVsZS5wcm9wKClgIHdpbGwgbm90IHVwZGF0ZSB0aGUgQ1NTT00gcnVsZS5cbiAgICAgICAgLy8gV2UgZG8gdGhpcyBjb21wYXJpc29uIHRvIGF2b2lkIHVubmVlZGVkIGBydWxlLnByb3AoKWAgY2FsbHMsIHNpbmNlIHdlIGhhdmUgdGhlIG9sZCBgc3R5bGVgIG9iamVjdCBoZXJlLlxuXG4gICAgICAgIGlmIChfbmV4dFZhbHVlID09IG51bGwgJiYgX25leHRWYWx1ZSAhPT0gX3ByZXZWYWx1ZSkge1xuICAgICAgICAgIHN0eWxlUnVsZS5wcm9wKF9wcm9wLCBudWxsLCBmb3JjZVVwZGF0ZU9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0IHJ1bGVzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgdmFyIHN0ciA9ICcnO1xuICAgIHZhciBzaGVldCA9IHRoaXMub3B0aW9ucy5zaGVldDtcbiAgICB2YXIgbGluayA9IHNoZWV0ID8gc2hlZXQub3B0aW9ucy5saW5rIDogZmFsc2U7XG5cbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5pbmRleC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBydWxlID0gdGhpcy5pbmRleFtpbmRleF07XG4gICAgICB2YXIgY3NzID0gcnVsZS50b1N0cmluZyhvcHRpb25zKTsgLy8gTm8gbmVlZCB0byByZW5kZXIgYW4gZW1wdHkgcnVsZS5cblxuICAgICAgaWYgKCFjc3MgJiYgIWxpbmspIGNvbnRpbnVlO1xuICAgICAgaWYgKHN0cikgc3RyICs9ICdcXG4nO1xuICAgICAgc3RyICs9IGNzcztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyO1xuICB9O1xuXG4gIHJldHVybiBSdWxlTGlzdDtcbn0oKTtcblxudmFyIFN0eWxlU2hlZXQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdHlsZVNoZWV0KHN0eWxlcywgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLmRlcGxveWVkID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB2b2lkIDA7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLnJlbmRlcmVyID0gdm9pZCAwO1xuICAgIHRoaXMuY2xhc3NlcyA9IHZvaWQgMDtcbiAgICB0aGlzLmtleWZyYW1lcyA9IHZvaWQgMDtcbiAgICB0aGlzLnF1ZXVlID0gdm9pZCAwO1xuICAgIHRoaXMuYXR0YWNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmRlcGxveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jbGFzc2VzID0ge307XG4gICAgdGhpcy5rZXlmcmFtZXMgPSB7fTtcbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2hlZXQ6IHRoaXMsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBjbGFzc2VzOiB0aGlzLmNsYXNzZXMsXG4gICAgICBrZXlmcmFtZXM6IHRoaXMua2V5ZnJhbWVzXG4gICAgfSk7XG5cbiAgICBpZiAob3B0aW9ucy5SZW5kZXJlcikge1xuICAgICAgdGhpcy5yZW5kZXJlciA9IG5ldyBvcHRpb25zLlJlbmRlcmVyKHRoaXMpO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMgPSBuZXcgUnVsZUxpc3QodGhpcy5vcHRpb25zKTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChuYW1lLCBzdHlsZXNbbmFtZV0pO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucHJvY2VzcygpO1xuICB9XG4gIC8qKlxuICAgKiBBdHRhY2ggcmVuZGVyYWJsZSB0byB0aGUgcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFN0eWxlU2hlZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2goKSB7XG4gICAgaWYgKHRoaXMuYXR0YWNoZWQpIHJldHVybiB0aGlzO1xuICAgIGlmICh0aGlzLnJlbmRlcmVyKSB0aGlzLnJlbmRlcmVyLmF0dGFjaCgpO1xuICAgIHRoaXMuYXR0YWNoZWQgPSB0cnVlOyAvLyBPcmRlciBpcyBpbXBvcnRhbnQsIGJlY2F1c2Ugd2UgY2FuJ3QgdXNlIGluc2VydFJ1bGUgQVBJIGlmIHN0eWxlIGVsZW1lbnQgaXMgbm90IGF0dGFjaGVkLlxuXG4gICAgaWYgKCF0aGlzLmRlcGxveWVkKSB0aGlzLmRlcGxveSgpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmUgcmVuZGVyYWJsZSBmcm9tIHJlbmRlciB0cmVlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXRhY2ggPSBmdW5jdGlvbiBkZXRhY2goKSB7XG4gICAgaWYgKCF0aGlzLmF0dGFjaGVkKSByZXR1cm4gdGhpcztcbiAgICBpZiAodGhpcy5yZW5kZXJlcikgdGhpcy5yZW5kZXJlci5kZXRhY2goKTtcbiAgICB0aGlzLmF0dGFjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFkZCBhIHJ1bGUgdG8gdGhlIGN1cnJlbnQgc3R5bGVzaGVldC5cbiAgICogV2lsbCBpbnNlcnQgYSBydWxlIGFsc28gYWZ0ZXIgdGhlIHN0eWxlc2hlZXQgaGFzIGJlZW4gcmVuZGVyZWQgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZSA9IGZ1bmN0aW9uIGFkZFJ1bGUobmFtZSwgZGVjbCwgb3B0aW9ucykge1xuICAgIHZhciBxdWV1ZSA9IHRoaXMucXVldWU7IC8vIFBsdWdpbnMgY2FuIGNyZWF0ZSBydWxlcy5cbiAgICAvLyBJbiBvcmRlciB0byBwcmVzZXJ2ZSB0aGUgcmlnaHQgb3JkZXIsIHdlIG5lZWQgdG8gcXVldWUgYWxsIGAuYWRkUnVsZWAgY2FsbHMsXG4gICAgLy8gd2hpY2ggaGFwcGVuIGFmdGVyIHRoZSBmaXJzdCBgcnVsZXMuYWRkKClgIGNhbGwuXG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCAmJiAhcXVldWUpIHRoaXMucXVldWUgPSBbXTtcbiAgICB2YXIgcnVsZSA9IHRoaXMucnVsZXMuYWRkKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgIGlmICghcnVsZSkgcmV0dXJuIG51bGw7XG4gICAgdGhpcy5vcHRpb25zLmpzcy5wbHVnaW5zLm9uUHJvY2Vzc1J1bGUocnVsZSk7XG5cbiAgICBpZiAodGhpcy5hdHRhY2hlZCkge1xuICAgICAgaWYgKCF0aGlzLmRlcGxveWVkKSByZXR1cm4gcnVsZTsgLy8gRG9uJ3QgaW5zZXJ0IHJ1bGUgZGlyZWN0bHkgaWYgdGhlcmUgaXMgbm8gc3RyaW5naWZpZWQgdmVyc2lvbiB5ZXQuXG4gICAgICAvLyBJdCB3aWxsIGJlIGluc2VydGVkIGFsbCB0b2dldGhlciB3aGVuIC5hdHRhY2ggaXMgY2FsbGVkLlxuXG4gICAgICBpZiAocXVldWUpIHF1ZXVlLnB1c2gocnVsZSk7ZWxzZSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0UnVsZShydWxlKTtcblxuICAgICAgICBpZiAodGhpcy5xdWV1ZSkge1xuICAgICAgICAgIHRoaXMucXVldWUuZm9yRWFjaCh0aGlzLmluc2VydFJ1bGUsIHRoaXMpO1xuICAgICAgICAgIHRoaXMucXVldWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0gLy8gV2UgY2FuJ3QgYWRkIHJ1bGVzIHRvIGEgZGV0YWNoZWQgc3R5bGUgbm9kZS5cbiAgICAvLyBXZSB3aWxsIHJlZGVwbG95IHRoZSBzaGVldCBvbmNlIHVzZXIgd2lsbCBhdHRhY2ggaXQuXG5cblxuICAgIHRoaXMuZGVwbG95ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IHJ1bGUgaW50byB0aGUgU3R5bGVTaGVldFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlID0gZnVuY3Rpb24gaW5zZXJ0UnVsZShydWxlKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuaW5zZXJ0UnVsZShydWxlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgYWRkIHJ1bGVzLlxuICAgKiBXaWxsIHJlbmRlciBhbHNvIGFmdGVyIFN0eWxlIFNoZWV0IHdhcyByZW5kZXJlZCB0aGUgZmlyc3QgdGltZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWRkUnVsZXMgPSBmdW5jdGlvbiBhZGRSdWxlcyhzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB2YXIgYWRkZWQgPSBbXTtcblxuICAgIGZvciAodmFyIG5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMuYWRkUnVsZShuYW1lLCBzdHlsZXNbbmFtZV0sIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIGFkZGVkLnB1c2gocnVsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZGVkO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBydWxlIGJ5IG5hbWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmdldFJ1bGUgPSBmdW5jdGlvbiBnZXRSdWxlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy5nZXQobmFtZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUgYnkgbmFtZS5cbiAgICogUmV0dXJucyBgdHJ1ZWA6IGlmIHJ1bGUgaGFzIGJlZW4gZGVsZXRlZCBmcm9tIHRoZSBET00uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKG5hbWUpIHtcbiAgICB2YXIgcnVsZSA9IHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JyA/IG5hbWUgOiB0aGlzLnJ1bGVzLmdldChuYW1lKTtcblxuICAgIGlmICghcnVsZSB8fCAvLyBTdHlsZSBzaGVldCB3YXMgY3JlYXRlZCB3aXRob3V0IGxpbms6IHRydWUgYW5kIGF0dGFjaGVkLCBpbiB0aGlzIGNhc2Ugd2VcbiAgICAvLyB3b24ndCBiZSBhYmxlIHRvIHJlbW92ZSB0aGUgQ1NTIHJ1bGUgZnJvbSB0aGUgRE9NLlxuICAgIHRoaXMuYXR0YWNoZWQgJiYgIXJ1bGUucmVuZGVyYWJsZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMucnVsZXMucmVtb3ZlKHJ1bGUpO1xuXG4gICAgaWYgKHRoaXMuYXR0YWNoZWQgJiYgcnVsZS5yZW5kZXJhYmxlICYmIHRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlcmVyLmRlbGV0ZVJ1bGUocnVsZS5yZW5kZXJhYmxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIERlcGxveSBwdXJlIENTUyBzdHJpbmcgdG8gYSByZW5kZXJhYmxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZXBsb3kgPSBmdW5jdGlvbiBkZXBsb3koKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZXIpIHRoaXMucmVuZGVyZXIuZGVwbG95KCk7XG4gICAgdGhpcy5kZXBsb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgZnVuY3Rpb24gdmFsdWVzIHdpdGggYSBuZXcgZGF0YS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIHZhciBfdGhpcyRydWxlcztcblxuICAgIChfdGhpcyRydWxlcyA9IHRoaXMucnVsZXMpLnVwZGF0ZS5hcHBseShfdGhpcyRydWxlcywgYXJndW1lbnRzKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGVzIGEgc2luZ2xlIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVwZGF0ZU9uZSA9IGZ1bmN0aW9uIHVwZGF0ZU9uZShydWxlLCBkYXRhLCBvcHRpb25zKSB7XG4gICAgdGhpcy5ydWxlcy51cGRhdGVPbmUocnVsZSwgZGF0YSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnQgcnVsZXMgdG8gYSBDU1Mgc3RyaW5nLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5ydWxlcy50b1N0cmluZyhvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gU3R5bGVTaGVldDtcbn0oKTtcblxudmFyIFBsdWdpbnNSZWdpc3RyeSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBsdWdpbnNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnBsdWdpbnMgPSB7XG4gICAgICBpbnRlcm5hbDogW10sXG4gICAgICBleHRlcm5hbDogW11cbiAgICB9O1xuICAgIHRoaXMucmVnaXN0cnkgPSB2b2lkIDA7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUGx1Z2luc1JlZ2lzdHJ5LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogQ2FsbCBgb25DcmVhdGVSdWxlYCBob29rcyBhbmQgcmV0dXJuIGFuIG9iamVjdCBpZiByZXR1cm5lZCBieSBhIGhvb2suXG4gICAqL1xuICBfcHJvdG8ub25DcmVhdGVSdWxlID0gZnVuY3Rpb24gb25DcmVhdGVSdWxlKG5hbWUsIGRlY2wsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcnVsZSA9IHRoaXMucmVnaXN0cnkub25DcmVhdGVSdWxlW2ldKG5hbWUsIGRlY2wsIG9wdGlvbnMpO1xuICAgICAgaWYgKHJ1bGUpIHJldHVybiBydWxlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NSdWxlYCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzUnVsZSA9IGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLmlzUHJvY2Vzc2VkKSByZXR1cm47XG4gICAgdmFyIHNoZWV0ID0gcnVsZS5vcHRpb25zLnNoZWV0O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1J1bGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25Qcm9jZXNzUnVsZVtpXShydWxlLCBzaGVldCk7XG4gICAgfVxuXG4gICAgaWYgKHJ1bGUuc3R5bGUpIHRoaXMub25Qcm9jZXNzU3R5bGUocnVsZS5zdHlsZSwgcnVsZSwgc2hlZXQpO1xuICAgIHJ1bGUuaXNQcm9jZXNzZWQgPSB0cnVlO1xuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblByb2Nlc3NTdHlsZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uUHJvY2Vzc1N0eWxlID0gZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUsIHJ1bGUsIHNoZWV0KSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIHJ1bGUuc3R5bGUgPSB0aGlzLnJlZ2lzdHJ5Lm9uUHJvY2Vzc1N0eWxlW2ldKHJ1bGUuc3R5bGUsIHJ1bGUsIHNoZWV0KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIENhbGwgYG9uUHJvY2Vzc1NoZWV0YCBob29rcy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ub25Qcm9jZXNzU2hlZXQgPSBmdW5jdGlvbiBvblByb2Nlc3NTaGVldChzaGVldCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldC5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5yZWdpc3RyeS5vblByb2Nlc3NTaGVldFtpXShzaGVldCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBDYWxsIGBvblVwZGF0ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uVXBkYXRlID0gZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25VcGRhdGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucmVnaXN0cnkub25VcGRhdGVbaV0oZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbCBgb25DaGFuZ2VWYWx1ZWAgaG9va3MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9uQ2hhbmdlVmFsdWUgPSBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wLCBydWxlKSB7XG4gICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWU7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucmVnaXN0cnkub25DaGFuZ2VWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcHJvY2Vzc2VkVmFsdWUgPSB0aGlzLnJlZ2lzdHJ5Lm9uQ2hhbmdlVmFsdWVbaV0ocHJvY2Vzc2VkVmFsdWUsIHByb3AsIHJ1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9jZXNzZWRWYWx1ZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBwbHVnaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnVzZSA9IGZ1bmN0aW9uIHVzZShuZXdQbHVnaW4sIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge1xuICAgICAgICBxdWV1ZTogJ2V4dGVybmFsJ1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgcGx1Z2lucyA9IHRoaXMucGx1Z2luc1tvcHRpb25zLnF1ZXVlXTsgLy8gQXZvaWRzIGFwcGx5aW5nIHNhbWUgcGx1Z2luIHR3aWNlLCBhdCBsZWFzdCBiYXNlZCBvbiByZWYuXG5cbiAgICBpZiAocGx1Z2lucy5pbmRleE9mKG5ld1BsdWdpbikgIT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcGx1Z2lucy5wdXNoKG5ld1BsdWdpbik7XG4gICAgdGhpcy5yZWdpc3RyeSA9IFtdLmNvbmNhdCh0aGlzLnBsdWdpbnMuZXh0ZXJuYWwsIHRoaXMucGx1Z2lucy5pbnRlcm5hbCkucmVkdWNlKGZ1bmN0aW9uIChyZWdpc3RyeSwgcGx1Z2luKSB7XG4gICAgICBmb3IgKHZhciBuYW1lIGluIHBsdWdpbikge1xuICAgICAgICBpZiAobmFtZSBpbiByZWdpc3RyeSkge1xuICAgICAgICAgIHJlZ2lzdHJ5W25hbWVdLnB1c2gocGx1Z2luW25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIFVua25vd24gaG9vayBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiKSA6IHZvaWQgMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVnaXN0cnk7XG4gICAgfSwge1xuICAgICAgb25DcmVhdGVSdWxlOiBbXSxcbiAgICAgIG9uUHJvY2Vzc1J1bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU3R5bGU6IFtdLFxuICAgICAgb25Qcm9jZXNzU2hlZXQ6IFtdLFxuICAgICAgb25DaGFuZ2VWYWx1ZTogW10sXG4gICAgICBvblVwZGF0ZTogW11cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gUGx1Z2luc1JlZ2lzdHJ5O1xufSgpO1xuXG4vKipcbiAqIFNoZWV0cyByZWdpc3RyeSB0byBhY2Nlc3MgdGhlbSBhbGwgYXQgb25lIHBsYWNlLlxuICovXG52YXIgU2hlZXRzUmVnaXN0cnkgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTaGVldHNSZWdpc3RyeSgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU2hlZXRzUmVnaXN0cnkucHJvdG90eXBlO1xuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChzaGVldCkge1xuICAgIHZhciByZWdpc3RyeSA9IHRoaXMucmVnaXN0cnk7XG4gICAgdmFyIGluZGV4ID0gc2hlZXQub3B0aW9ucy5pbmRleDtcbiAgICBpZiAocmVnaXN0cnkuaW5kZXhPZihzaGVldCkgIT09IC0xKSByZXR1cm47XG5cbiAgICBpZiAocmVnaXN0cnkubGVuZ3RoID09PSAwIHx8IGluZGV4ID49IHRoaXMuaW5kZXgpIHtcbiAgICAgIHJlZ2lzdHJ5LnB1c2goc2hlZXQpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmluZCBhIHBvc2l0aW9uLlxuXG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdHJ5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaXN0cnlbaV0ub3B0aW9ucy5pbmRleCA+IGluZGV4KSB7XG4gICAgICAgIHJlZ2lzdHJ5LnNwbGljZShpLCAwLCBzaGVldCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSByZWdpc3RyeS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICB0aGlzLnJlZ2lzdHJ5ID0gW107XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBhIFN0eWxlIFNoZWV0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoc2hlZXQpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLnJlZ2lzdHJ5LmluZGV4T2Yoc2hlZXQpO1xuICAgIHRoaXMucmVnaXN0cnkuc3BsaWNlKGluZGV4LCAxKTtcbiAgfVxuICAvKipcbiAgICogQ29udmVydCBhbGwgYXR0YWNoZWQgc2hlZXRzIHRvIGEgQ1NTIHN0cmluZy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhfdGVtcCkge1xuICAgIHZhciBfcmVmID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAsXG4gICAgICAgIGF0dGFjaGVkID0gX3JlZi5hdHRhY2hlZCxcbiAgICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImF0dGFjaGVkXCJdKTtcblxuICAgIHZhciBjc3MgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5yZWdpc3RyeS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNoZWV0ID0gdGhpcy5yZWdpc3RyeVtpXTtcblxuICAgICAgaWYgKGF0dGFjaGVkICE9IG51bGwgJiYgc2hlZXQuYXR0YWNoZWQgIT09IGF0dGFjaGVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3NzKSBjc3MgKz0gJ1xcbic7XG4gICAgICBjc3MgKz0gc2hlZXQudG9TdHJpbmcob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzcztcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoU2hlZXRzUmVnaXN0cnksIFt7XG4gICAga2V5OiBcImluZGV4XCIsXG5cbiAgICAvKipcbiAgICAgKiBDdXJyZW50IGhpZ2hlc3QgaW5kZXggbnVtYmVyLlxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVnaXN0cnkubGVuZ3RoID09PSAwID8gMCA6IHRoaXMucmVnaXN0cnlbdGhpcy5yZWdpc3RyeS5sZW5ndGggLSAxXS5vcHRpb25zLmluZGV4O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTaGVldHNSZWdpc3RyeTtcbn0oKTtcblxuLyoqXG4gKiBUaGlzIGlzIGEgZ2xvYmFsIHNoZWV0cyByZWdpc3RyeS4gT25seSBEb21SZW5kZXJlciB3aWxsIGFkZCBzaGVldHMgdG8gaXQuXG4gKiBPbiB0aGUgc2VydmVyIG9uZSBzaG91bGQgdXNlIGFuIG93biBTaGVldHNSZWdpc3RyeSBpbnN0YW5jZSBhbmQgYWRkIHRoZVxuICogc2hlZXRzIHRvIGl0LCBiZWNhdXNlIHlvdSBuZWVkIHRvIG1ha2Ugc3VyZSB0byBjcmVhdGUgYSBuZXcgcmVnaXN0cnkgZm9yXG4gKiBlYWNoIHJlcXVlc3QgaW4gb3JkZXIgdG8gbm90IGxlYWsgc2hlZXRzIGFjcm9zcyByZXF1ZXN0cy5cbiAqL1xuXG52YXIgcmVnaXN0cnkgPSBuZXcgU2hlZXRzUmVnaXN0cnkoKTtcblxuLyogZXNsaW50LWRpc2FibGUgKi9cblxuLyoqXG4gKiBOb3cgdGhhdCBgZ2xvYmFsVGhpc2AgaXMgYXZhaWxhYmxlIG9uIG1vc3QgcGxhdGZvcm1zXG4gKiAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvZ2xvYmFsVGhpcyNicm93c2VyX2NvbXBhdGliaWxpdHkpXG4gKiB3ZSBjaGVjayBmb3IgYGdsb2JhbFRoaXNgIGZpcnN0LiBgZ2xvYmFsVGhpc2AgaXMgbmVjZXNzYXJ5IGZvciBqc3NcbiAqIHRvIHJ1biBpbiBBZ29yaWMncyBzZWN1cmUgdmVyc2lvbiBvZiBKYXZhU2NyaXB0IChTRVMpLiBVbmRlciBTRVMsXG4gKiBgZ2xvYmFsVGhpc2AgZXhpc3RzLCBidXQgYHdpbmRvd2AsIGBzZWxmYCwgYW5kIGBGdW5jdGlvbigncmV0dXJuXG4gKiB0aGlzJykoKWAgYXJlIGFsbCB1bmRlZmluZWQgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG4gKlxuICogaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbiAqL1xudmFyIGdsb2JhbFRoaXMkMSA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PT0gTWF0aCA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT09IE1hdGggPyBzZWxmIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxudmFyIG5zID0gJzJmMWFjYzZjM2E2MDZiMDgyZTVlZWY1ZTU0NDE0ZmZiJztcbmlmIChnbG9iYWxUaGlzJDFbbnNdID09IG51bGwpIGdsb2JhbFRoaXMkMVtuc10gPSAwOyAvLyBCdW5kbGUgbWF5IGNvbnRhaW4gbXVsdGlwbGUgSlNTIHZlcnNpb25zIGF0IHRoZSBzYW1lIHRpbWUuIEluIG9yZGVyIHRvIGlkZW50aWZ5XG4vLyB0aGUgY3VycmVudCB2ZXJzaW9uIHdpdGgganVzdCBvbmUgc2hvcnQgbnVtYmVyIGFuZCB1c2UgaXQgZm9yIGNsYXNzZXMgZ2VuZXJhdGlvblxuLy8gd2UgdXNlIGEgY291bnRlci4gQWxzbyBpdCBpcyBtb3JlIGFjY3VyYXRlLCBiZWNhdXNlIHVzZXIgY2FuIG1hbnVhbGx5IHJlZXZhbHVhdGVcbi8vIHRoZSBtb2R1bGUuXG5cbnZhciBtb2R1bGVJZCA9IGdsb2JhbFRoaXMkMVtuc10rKztcblxudmFyIG1heFJ1bGVzID0gMWUxMDtcblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gd2hpY2ggZ2VuZXJhdGVzIHVuaXF1ZSBjbGFzcyBuYW1lcyBiYXNlZCBvbiBjb3VudGVycy5cbiAqIFdoZW4gbmV3IGdlbmVyYXRvciBmdW5jdGlvbiBpcyBjcmVhdGVkLCBydWxlIGNvdW50ZXIgaXMgcmVzZXRlZC5cbiAqIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4gKi9cbnZhciBjcmVhdGVHZW5lcmF0ZUlkID0gZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVJZChvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuXG4gIHZhciBnZW5lcmF0ZUlkID0gZnVuY3Rpb24gZ2VuZXJhdGVJZChydWxlLCBzaGVldCkge1xuICAgIHJ1bGVDb3VudGVyICs9IDE7XG5cbiAgICBpZiAocnVsZUNvdW50ZXIgPiBtYXhSdWxlcykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLiBSdWxlIGNvdW50ZXIgaXMgYXQgXCIgKyBydWxlQ291bnRlciArIFwiLlwiKSA6IHZvaWQgMDtcbiAgICB9XG5cbiAgICB2YXIganNzSWQgPSAnJztcbiAgICB2YXIgcHJlZml4ID0gJyc7XG5cbiAgICBpZiAoc2hlZXQpIHtcbiAgICAgIGlmIChzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCkge1xuICAgICAgICBwcmVmaXggPSBzaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeDtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoZWV0Lm9wdGlvbnMuanNzLmlkICE9IG51bGwpIHtcbiAgICAgICAganNzSWQgPSBTdHJpbmcoc2hlZXQub3B0aW9ucy5qc3MuaWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLm1pbmlmeSkge1xuICAgICAgLy8gVXNpbmcgXCJjXCIgYmVjYXVzZSBhIG51bWJlciBjYW4ndCBiZSB0aGUgZmlyc3QgY2hhciBpbiBhIGNsYXNzIG5hbWUuXG4gICAgICByZXR1cm4gXCJcIiArIChwcmVmaXggfHwgJ2MnKSArIG1vZHVsZUlkICsganNzSWQgKyBydWxlQ291bnRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4ICsgcnVsZS5rZXkgKyBcIi1cIiArIG1vZHVsZUlkICsgKGpzc0lkID8gXCItXCIgKyBqc3NJZCA6ICcnKSArIFwiLVwiICsgcnVsZUNvdW50ZXI7XG4gIH07XG5cbiAgcmV0dXJuIGdlbmVyYXRlSWQ7XG59O1xuXG4vKipcbiAqIENhY2hlIHRoZSB2YWx1ZSBmcm9tIHRoZSBmaXJzdCB0aW1lIGEgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICovXG52YXIgbWVtb2l6ZSA9IGZ1bmN0aW9uIG1lbW9pemUoZm4pIHtcbiAgdmFyIHZhbHVlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdmFsdWUpIHZhbHVlID0gZm4oKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59O1xuXG4vKipcbiAqIEdldCBhIHN0eWxlIHByb3BlcnR5IHZhbHVlLlxuICovXG52YXIgZ2V0UHJvcGVydHlWYWx1ZSA9IGZ1bmN0aW9uIGdldFByb3BlcnR5VmFsdWUoY3NzUnVsZSwgcHJvcCkge1xuICB0cnkge1xuICAgIC8vIFN1cHBvcnQgQ1NTVE9NLlxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICByZXR1cm4gY3NzUnVsZS5hdHRyaWJ1dGVTdHlsZU1hcC5nZXQocHJvcCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNzc1J1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgc2V0UHJvcGVydHkgPSBmdW5jdGlvbiBzZXRQcm9wZXJ0eShjc3NSdWxlLCBwcm9wLCB2YWx1ZSkge1xuICB0cnkge1xuICAgIHZhciBjc3NWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjc3NWYWx1ZSA9IHRvQ3NzVmFsdWUodmFsdWUsIHRydWUpO1xuXG4gICAgICBpZiAodmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICchaW1wb3J0YW50Jykge1xuICAgICAgICBjc3NSdWxlLnN0eWxlLnNldFByb3BlcnR5KHByb3AsIGNzc1ZhbHVlLCAnaW1wb3J0YW50Jyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gLy8gU3VwcG9ydCBDU1NUT00uXG5cblxuICAgIGlmIChjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwKSB7XG4gICAgICBjc3NSdWxlLmF0dHJpYnV0ZVN0eWxlTWFwLnNldChwcm9wLCBjc3NWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNzc1J1bGUuc3R5bGUuc2V0UHJvcGVydHkocHJvcCwgY3NzVmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSUUgbWF5IHRocm93IGlmIHByb3BlcnR5IGlzIHVua25vd24uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhIHN0eWxlIHByb3BlcnR5LlxuICovXG52YXIgcmVtb3ZlUHJvcGVydHkgPSBmdW5jdGlvbiByZW1vdmVQcm9wZXJ0eShjc3NSdWxlLCBwcm9wKSB7XG4gIHRyeSB7XG4gICAgLy8gU3VwcG9ydCBDU1NUT00uXG4gICAgaWYgKGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXApIHtcbiAgICAgIGNzc1J1bGUuYXR0cmlidXRlU3R5bGVNYXAuZGVsZXRlKHByb3ApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjc3NSdWxlLnN0eWxlLnJlbW92ZVByb3BlcnR5KHByb3ApO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBET01FeGNlcHRpb24gXFxcIlwiICsgZXJyLm1lc3NhZ2UgKyBcIlxcXCIgd2FzIHRocm93bi4gVHJpZWQgdG8gcmVtb3ZlIHByb3BlcnR5IFxcXCJcIiArIHByb3AgKyBcIlxcXCIuXCIpIDogdm9pZCAwO1xuICB9XG59O1xuXG4vKipcbiAqIFNldCB0aGUgc2VsZWN0b3IuXG4gKi9cbnZhciBzZXRTZWxlY3RvciA9IGZ1bmN0aW9uIHNldFNlbGVjdG9yKGNzc1J1bGUsIHNlbGVjdG9yVGV4dCkge1xuICBjc3NSdWxlLnNlbGVjdG9yVGV4dCA9IHNlbGVjdG9yVGV4dDsgLy8gUmV0dXJuIGZhbHNlIGlmIHNldHRlciB3YXMgbm90IHN1Y2Nlc3NmdWwuXG4gIC8vIEN1cnJlbnRseSB3b3JrcyBpbiBjaHJvbWUgb25seS5cblxuICByZXR1cm4gY3NzUnVsZS5zZWxlY3RvclRleHQgPT09IHNlbGVjdG9yVGV4dDtcbn07XG4vKipcbiAqIEdldHMgdGhlIGBoZWFkYCBlbGVtZW50IHVwb24gdGhlIGZpcnN0IGNhbGwgYW5kIGNhY2hlcyBpdC5cbiAqIFdlIGFzc3VtZSBpdCBjYW4ndCBiZSBudWxsLlxuICovXG5cblxudmFyIGdldEhlYWQgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQnKTtcbn0pO1xuLyoqXG4gKiBGaW5kIGF0dGFjaGVkIHNoZWV0IHdpdGggYW4gaW5kZXggaGlnaGVyIHRoYW4gdGhlIHBhc3NlZCBvbmUuXG4gKi9cblxuZnVuY3Rpb24gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5LCBvcHRpb25zKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVnaXN0cnkubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2hlZXQgPSByZWdpc3RyeVtpXTtcblxuICAgIGlmIChzaGVldC5hdHRhY2hlZCAmJiBzaGVldC5vcHRpb25zLmluZGV4ID4gb3B0aW9ucy5pbmRleCAmJiBzaGVldC5vcHRpb25zLmluc2VydGlvblBvaW50ID09PSBvcHRpb25zLmluc2VydGlvblBvaW50KSB7XG4gICAgICByZXR1cm4gc2hlZXQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEZpbmQgYXR0YWNoZWQgc2hlZXQgd2l0aCB0aGUgaGlnaGVzdCBpbmRleC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGZpbmRIaWdoZXN0U2hlZXQocmVnaXN0cnksIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IHJlZ2lzdHJ5Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHNoZWV0ID0gcmVnaXN0cnlbaV07XG5cbiAgICBpZiAoc2hlZXQuYXR0YWNoZWQgJiYgc2hlZXQub3B0aW9ucy5pbnNlcnRpb25Qb2ludCA9PT0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludCkge1xuICAgICAgcmV0dXJuIHNoZWV0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBGaW5kIGEgY29tbWVudCB3aXRoIFwianNzXCIgaW5zaWRlLlxuICovXG5cblxuZnVuY3Rpb24gZmluZENvbW1lbnROb2RlKHRleHQpIHtcbiAgdmFyIGhlYWQgPSBnZXRIZWFkKCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkLmNoaWxkTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgbm9kZSA9IGhlYWQuY2hpbGROb2Rlc1tpXTtcblxuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4ICYmIG5vZGUubm9kZVZhbHVlLnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogRmluZCBhIG5vZGUgYmVmb3JlIHdoaWNoIHdlIGNhbiBpbnNlcnQgdGhlIHNoZWV0LlxuICovXG5mdW5jdGlvbiBmaW5kUHJldk5vZGUob3B0aW9ucykge1xuICB2YXIgcmVnaXN0cnkkMSA9IHJlZ2lzdHJ5LnJlZ2lzdHJ5O1xuXG4gIGlmIChyZWdpc3RyeSQxLmxlbmd0aCA+IDApIHtcbiAgICAvLyBUcnkgdG8gaW5zZXJ0IGJlZm9yZSB0aGUgbmV4dCBoaWdoZXIgc2hlZXQuXG4gICAgdmFyIHNoZWV0ID0gZmluZEhpZ2hlclNoZWV0KHJlZ2lzdHJ5JDEsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHNoZWV0ICYmIHNoZWV0LnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJlbnQ6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQucGFyZW50Tm9kZSxcbiAgICAgICAgbm9kZTogc2hlZXQucmVuZGVyZXIuZWxlbWVudFxuICAgICAgfTtcbiAgICB9IC8vIE90aGVyd2lzZSBpbnNlcnQgYWZ0ZXIgdGhlIGxhc3QgYXR0YWNoZWQuXG5cblxuICAgIHNoZWV0ID0gZmluZEhpZ2hlc3RTaGVldChyZWdpc3RyeSQxLCBvcHRpb25zKTtcblxuICAgIGlmIChzaGVldCAmJiBzaGVldC5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBzaGVldC5yZW5kZXJlci5lbGVtZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IHNoZWV0LnJlbmRlcmVyLmVsZW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIFRyeSB0byBmaW5kIGEgY29tbWVudCBwbGFjZWhvbGRlciBpZiByZWdpc3RyeSBpcyBlbXB0eS5cblxuXG4gIHZhciBpbnNlcnRpb25Qb2ludCA9IG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQ7XG5cbiAgaWYgKGluc2VydGlvblBvaW50ICYmIHR5cGVvZiBpbnNlcnRpb25Qb2ludCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgY29tbWVudCA9IGZpbmRDb21tZW50Tm9kZShpbnNlcnRpb25Qb2ludCk7XG5cbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGFyZW50OiBjb21tZW50LnBhcmVudE5vZGUsXG4gICAgICAgIG5vZGU6IGNvbW1lbnQubmV4dFNpYmxpbmdcbiAgICAgIH07XG4gICAgfSAvLyBJZiB1c2VyIHNwZWNpZmllcyBhbiBpbnNlcnRpb24gcG9pbnQgYW5kIGl0IGNhbid0IGJlIGZvdW5kIGluIHRoZSBkb2N1bWVudCAtXG4gICAgLy8gYmFkIHNwZWNpZmljaXR5IGlzc3VlcyBtYXkgYXBwZWFyLlxuXG5cbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIEluc2VydGlvbiBwb2ludCBcXFwiXCIgKyBpbnNlcnRpb25Qb2ludCArIFwiXFxcIiBub3QgZm91bmQuXCIpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBJbnNlcnQgc3R5bGUgZWxlbWVudCBpbnRvIHRoZSBET00uXG4gKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRTdHlsZShzdHlsZSwgb3B0aW9ucykge1xuICB2YXIgaW5zZXJ0aW9uUG9pbnQgPSBvcHRpb25zLmluc2VydGlvblBvaW50O1xuICB2YXIgbmV4dE5vZGUgPSBmaW5kUHJldk5vZGUob3B0aW9ucyk7XG5cbiAgaWYgKG5leHROb2RlICE9PSBmYWxzZSAmJiBuZXh0Tm9kZS5wYXJlbnQpIHtcbiAgICBuZXh0Tm9kZS5wYXJlbnQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0Tm9kZS5ub2RlKTtcbiAgICByZXR1cm47XG4gIH0gLy8gV29ya3Mgd2l0aCBpZnJhbWVzIGFuZCBhbnkgbm9kZSB0eXBlcy5cblxuXG4gIGlmIChpbnNlcnRpb25Qb2ludCAmJiB0eXBlb2YgaW5zZXJ0aW9uUG9pbnQubm9kZVR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDEzMjg3MjgvZm9yY2UtY2FzdGluZy1pbi1mbG93XG4gICAgdmFyIGluc2VydGlvblBvaW50RWxlbWVudCA9IGluc2VydGlvblBvaW50O1xuICAgIHZhciBwYXJlbnROb2RlID0gaW5zZXJ0aW9uUG9pbnRFbGVtZW50LnBhcmVudE5vZGU7XG4gICAgaWYgKHBhcmVudE5vZGUpIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHN0eWxlLCBpbnNlcnRpb25Qb2ludEVsZW1lbnQubmV4dFNpYmxpbmcpO2Vsc2UgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ1tKU1NdIEluc2VydGlvbiBwb2ludCBpcyBub3QgaW4gdGhlIERPTS4nKSA6IHZvaWQgMDtcbiAgICByZXR1cm47XG4gIH1cblxuICBnZXRIZWFkKCkuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuLyoqXG4gKiBSZWFkIGpzcyBub25jZSBzZXR0aW5nIGZyb20gdGhlIHBhZ2UgaWYgdGhlIHVzZXIgaGFzIHNldCBpdC5cbiAqL1xuXG5cbnZhciBnZXROb25jZSA9IG1lbW9pemUoZnVuY3Rpb24gKCkge1xuICB2YXIgbm9kZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21ldGFbcHJvcGVydHk9XCJjc3Atbm9uY2VcIl0nKTtcbiAgcmV0dXJuIG5vZGUgPyBub2RlLmdldEF0dHJpYnV0ZSgnY29udGVudCcpIDogbnVsbDtcbn0pO1xuXG52YXIgX2luc2VydFJ1bGUgPSBmdW5jdGlvbiBpbnNlcnRSdWxlKGNvbnRhaW5lciwgcnVsZSwgaW5kZXgpIHtcbiAgdHJ5IHtcbiAgICBpZiAoJ2luc2VydFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgdmFyIGMgPSBjb250YWluZXI7XG4gICAgICBjLmluc2VydFJ1bGUocnVsZSwgaW5kZXgpO1xuICAgIH0gLy8gS2V5ZnJhbWVzIHJ1bGUuXG4gICAgZWxzZSBpZiAoJ2FwcGVuZFJ1bGUnIGluIGNvbnRhaW5lcikge1xuICAgICAgICB2YXIgX2MgPSBjb250YWluZXI7XG5cbiAgICAgICAgX2MuYXBwZW5kUnVsZShydWxlKTtcbiAgICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgXCJbSlNTXSBcIiArIGVyci5tZXNzYWdlKSA6IHZvaWQgMDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLmNzc1J1bGVzW2luZGV4XTtcbn07XG5cbnZhciBnZXRWYWxpZFJ1bGVJbnNlcnRpb25JbmRleCA9IGZ1bmN0aW9uIGdldFZhbGlkUnVsZUluc2VydGlvbkluZGV4KGNvbnRhaW5lciwgaW5kZXgpIHtcbiAgdmFyIG1heEluZGV4ID0gY29udGFpbmVyLmNzc1J1bGVzLmxlbmd0aDsgLy8gSW4gY2FzZSBwcmV2aW91cyBpbnNlcnRpb24gZmFpbHMsIHBhc3NlZCBpbmRleCBtaWdodCBiZSB3cm9uZ1xuXG4gIGlmIChpbmRleCA9PT0gdW5kZWZpbmVkIHx8IGluZGV4ID4gbWF4SW5kZXgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICByZXR1cm4gbWF4SW5kZXg7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuXG52YXIgY3JlYXRlU3R5bGUgPSBmdW5jdGlvbiBjcmVhdGVTdHlsZSgpIHtcbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsgLy8gV2l0aG91dCBpdCwgSUUgd2lsbCBoYXZlIGEgYnJva2VuIHNvdXJjZSBvcmRlciBzcGVjaWZpY2l0eSBpZiB3ZVxuICAvLyBpbnNlcnQgcnVsZXMgYWZ0ZXIgd2UgaW5zZXJ0IHRoZSBzdHlsZSB0YWcuXG4gIC8vIEl0IHNlZW1zIHRvIGtpY2stb2ZmIHRoZSBzb3VyY2Ugb3JkZXIgc3BlY2lmaWNpdHkgYWxnb3JpdGhtLlxuXG4gIGVsLnRleHRDb250ZW50ID0gJ1xcbic7XG4gIHJldHVybiBlbDtcbn07XG5cbnZhciBEb21SZW5kZXJlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8vIEhUTUxTdHlsZUVsZW1lbnQgbmVlZHMgZml4aW5nIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yNjk2XG4gIC8vIFdpbGwgYmUgZW1wdHkgaWYgbGluazogdHJ1ZSBvcHRpb24gaXMgbm90IHNldCwgYmVjYXVzZVxuICAvLyBpdCBpcyBvbmx5IGZvciB1c2UgdG9nZXRoZXIgd2l0aCBpbnNlcnRSdWxlIEFQSS5cbiAgZnVuY3Rpb24gRG9tUmVuZGVyZXIoc2hlZXQpIHtcbiAgICB0aGlzLmdldFByb3BlcnR5VmFsdWUgPSBnZXRQcm9wZXJ0eVZhbHVlO1xuICAgIHRoaXMuc2V0UHJvcGVydHkgPSBzZXRQcm9wZXJ0eTtcbiAgICB0aGlzLnJlbW92ZVByb3BlcnR5ID0gcmVtb3ZlUHJvcGVydHk7XG4gICAgdGhpcy5zZXRTZWxlY3RvciA9IHNldFNlbGVjdG9yO1xuICAgIHRoaXMuZWxlbWVudCA9IHZvaWQgMDtcbiAgICB0aGlzLnNoZWV0ID0gdm9pZCAwO1xuICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgIHRoaXMuY3NzUnVsZXMgPSBbXTtcbiAgICAvLyBUaGVyZSBpcyBubyBzaGVldCB3aGVuIHRoZSByZW5kZXJlciBpcyB1c2VkIGZyb20gYSBzdGFuZGFsb25lIFN0eWxlUnVsZS5cbiAgICBpZiAoc2hlZXQpIHJlZ2lzdHJ5LmFkZChzaGVldCk7XG4gICAgdGhpcy5zaGVldCA9IHNoZWV0O1xuXG4gICAgdmFyIF9yZWYgPSB0aGlzLnNoZWV0ID8gdGhpcy5zaGVldC5vcHRpb25zIDoge30sXG4gICAgICAgIG1lZGlhID0gX3JlZi5tZWRpYSxcbiAgICAgICAgbWV0YSA9IF9yZWYubWV0YSxcbiAgICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudDtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgfHwgY3JlYXRlU3R5bGUoKTtcbiAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLWpzcycsICcnKTtcbiAgICBpZiAobWVkaWEpIHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICAgIGlmIChtZXRhKSB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKCdkYXRhLW1ldGEnLCBtZXRhKTtcbiAgICB2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuICAgIGlmIChub25jZSkgdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBub25jZSk7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBzdHlsZSBlbGVtZW50IGludG8gcmVuZGVyIHRyZWUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IERvbVJlbmRlcmVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoKCkge1xuICAgIC8vIEluIHRoZSBjYXNlIHRoZSBlbGVtZW50IG5vZGUgaXMgZXh0ZXJuYWwgYW5kIGl0IGlzIGFscmVhZHkgaW4gdGhlIERPTS5cbiAgICBpZiAodGhpcy5lbGVtZW50LnBhcmVudE5vZGUgfHwgIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICBpbnNlcnRTdHlsZSh0aGlzLmVsZW1lbnQsIHRoaXMuc2hlZXQub3B0aW9ucyk7IC8vIFdoZW4gcnVsZXMgYXJlIGluc2VydGVkIHVzaW5nIGBpbnNlcnRSdWxlYCBBUEksIGFmdGVyIGBzaGVldC5kZXRhY2goKS5hdHRhY2goKWBcbiAgICAvLyBtb3N0IGJyb3dzZXJzIGNyZWF0ZSBhIG5ldyBDU1NTdHlsZVNoZWV0LCBleGNlcHQgb2YgYWxsIElFcy5cblxuICAgIHZhciBkZXBsb3llZCA9IEJvb2xlYW4odGhpcy5zaGVldCAmJiB0aGlzLnNoZWV0LmRlcGxveWVkKTtcblxuICAgIGlmICh0aGlzLmhhc0luc2VydGVkUnVsZXMgJiYgZGVwbG95ZWQpIHtcbiAgICAgIHRoaXMuaGFzSW5zZXJ0ZWRSdWxlcyA9IGZhbHNlO1xuICAgICAgdGhpcy5kZXBsb3koKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlbW92ZSBzdHlsZSBlbGVtZW50IGZyb20gcmVuZGVyIHRyZWUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRldGFjaCA9IGZ1bmN0aW9uIGRldGFjaCgpIHtcbiAgICBpZiAoIXRoaXMuc2hlZXQpIHJldHVybjtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IHRoaXMuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlKSBwYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7IC8vIEluIHRoZSBtb3N0IGJyb3dzZXJzLCBydWxlcyBpbnNlcnRlZCB1c2luZyBpbnNlcnRSdWxlKCkgQVBJIHdpbGwgYmUgbG9zdCB3aGVuIHN0eWxlIGVsZW1lbnQgaXMgcmVtb3ZlZC5cbiAgICAvLyBUaG91Z2ggSUUgd2lsbCBrZWVwIHRoZW0gYW5kIHdlIG5lZWQgYSBjb25zaXN0ZW50IGJlaGF2aW9yLlxuXG4gICAgaWYgKHRoaXMuc2hlZXQub3B0aW9ucy5saW5rKSB7XG4gICAgICB0aGlzLmNzc1J1bGVzID0gW107XG4gICAgICB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQgPSAnXFxuJztcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluamVjdCBDU1Mgc3RyaW5nIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZGVwbG95ID0gZnVuY3Rpb24gZGVwbG95KCkge1xuICAgIHZhciBzaGVldCA9IHRoaXMuc2hlZXQ7XG4gICAgaWYgKCFzaGVldCkgcmV0dXJuO1xuXG4gICAgaWYgKHNoZWV0Lm9wdGlvbnMubGluaykge1xuICAgICAgdGhpcy5pbnNlcnRSdWxlcyhzaGVldC5ydWxlcyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50LnRleHRDb250ZW50ID0gXCJcXG5cIiArIHNoZWV0LnRvU3RyaW5nKCkgKyBcIlxcblwiO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgUnVsZUxpc3QgaW50byBhbiBlbGVtZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbnNlcnRSdWxlcyA9IGZ1bmN0aW9uIGluc2VydFJ1bGVzKHJ1bGVzLCBuYXRpdmVQYXJlbnQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmluZGV4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmluc2VydFJ1bGUocnVsZXMuaW5kZXhbaV0sIGksIG5hdGl2ZVBhcmVudCk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgYSBydWxlIGludG8gZWxlbWVudC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5zZXJ0UnVsZSA9IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSwgaW5kZXgsIG5hdGl2ZVBhcmVudCkge1xuICAgIGlmIChuYXRpdmVQYXJlbnQgPT09IHZvaWQgMCkge1xuICAgICAgbmF0aXZlUGFyZW50ID0gdGhpcy5lbGVtZW50LnNoZWV0O1xuICAgIH1cblxuICAgIGlmIChydWxlLnJ1bGVzKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcnVsZTtcbiAgICAgIHZhciBsYXRlc3ROYXRpdmVQYXJlbnQgPSBuYXRpdmVQYXJlbnQ7XG5cbiAgICAgIGlmIChydWxlLnR5cGUgPT09ICdjb25kaXRpb25hbCcgfHwgcnVsZS50eXBlID09PSAna2V5ZnJhbWVzJykge1xuICAgICAgICB2YXIgX2luc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7IC8vIFdlIG5lZWQgdG8gcmVuZGVyIHRoZSBjb250YWluZXIgd2l0aG91dCBjaGlsZHJlbiBmaXJzdC5cblxuXG4gICAgICAgIGxhdGVzdE5hdGl2ZVBhcmVudCA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcGFyZW50LnRvU3RyaW5nKHtcbiAgICAgICAgICBjaGlsZHJlbjogZmFsc2VcbiAgICAgICAgfSksIF9pbnNlcnRpb25JbmRleCk7XG5cbiAgICAgICAgaWYgKGxhdGVzdE5hdGl2ZVBhcmVudCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgX2luc2VydGlvbkluZGV4LCBsYXRlc3ROYXRpdmVQYXJlbnQpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmluc2VydFJ1bGVzKHBhcmVudC5ydWxlcywgbGF0ZXN0TmF0aXZlUGFyZW50KTtcbiAgICAgIHJldHVybiBsYXRlc3ROYXRpdmVQYXJlbnQ7XG4gICAgfVxuXG4gICAgdmFyIHJ1bGVTdHIgPSBydWxlLnRvU3RyaW5nKCk7XG4gICAgaWYgKCFydWxlU3RyKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGluc2VydGlvbkluZGV4ID0gZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgobmF0aXZlUGFyZW50LCBpbmRleCk7XG5cbiAgICB2YXIgbmF0aXZlUnVsZSA9IF9pbnNlcnRSdWxlKG5hdGl2ZVBhcmVudCwgcnVsZVN0ciwgaW5zZXJ0aW9uSW5kZXgpO1xuXG4gICAgaWYgKG5hdGl2ZVJ1bGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5oYXNJbnNlcnRlZFJ1bGVzID0gdHJ1ZTtcbiAgICB0aGlzLnJlZkNzc1J1bGUocnVsZSwgaW5zZXJ0aW9uSW5kZXgsIG5hdGl2ZVJ1bGUpO1xuICAgIHJldHVybiBuYXRpdmVSdWxlO1xuICB9O1xuXG4gIF9wcm90by5yZWZDc3NSdWxlID0gZnVuY3Rpb24gcmVmQ3NzUnVsZShydWxlLCBpbmRleCwgY3NzUnVsZSkge1xuICAgIHJ1bGUucmVuZGVyYWJsZSA9IGNzc1J1bGU7IC8vIFdlIG9ubHkgd2FudCB0byByZWZlcmVuY2UgdGhlIHRvcCBsZXZlbCBydWxlcywgZGVsZXRlUnVsZSBBUEkgZG9lc24ndCBzdXBwb3J0IHJlbW92aW5nIG5lc3RlZCBydWxlc1xuICAgIC8vIGxpa2UgcnVsZXMgaW5zaWRlIG1lZGlhIHF1ZXJpZXMgb3Iga2V5ZnJhbWVzXG5cbiAgICBpZiAocnVsZS5vcHRpb25zLnBhcmVudCBpbnN0YW5jZW9mIFN0eWxlU2hlZXQpIHtcbiAgICAgIHRoaXMuY3NzUnVsZXNbaW5kZXhdID0gY3NzUnVsZTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHJ1bGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGV0ZVJ1bGUgPSBmdW5jdGlvbiBkZWxldGVSdWxlKGNzc1J1bGUpIHtcbiAgICB2YXIgc2hlZXQgPSB0aGlzLmVsZW1lbnQuc2hlZXQ7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGNzc1J1bGUpO1xuICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybiBmYWxzZTtcbiAgICBzaGVldC5kZWxldGVSdWxlKGluZGV4KTtcbiAgICB0aGlzLmNzc1J1bGVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBpbmRleCBvZiBhIENTUyBSdWxlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZihjc3NSdWxlKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzUnVsZXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgfVxuICAvKipcbiAgICogR2VuZXJhdGUgYSBuZXcgQ1NTIHJ1bGUgYW5kIHJlcGxhY2UgdGhlIGV4aXN0aW5nIG9uZS5cbiAgICpcbiAgICogT25seSB1c2VkIGZvciBzb21lIG9sZCBicm93c2VycyBiZWNhdXNlIHRoZXkgY2FuJ3Qgc2V0IGEgc2VsZWN0b3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlcGxhY2VSdWxlID0gZnVuY3Rpb24gcmVwbGFjZVJ1bGUoY3NzUnVsZSwgcnVsZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihjc3NSdWxlKTtcbiAgICBpZiAoaW5kZXggPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gICAgdGhpcy5lbGVtZW50LnNoZWV0LmRlbGV0ZVJ1bGUoaW5kZXgpO1xuICAgIHRoaXMuY3NzUnVsZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnRSdWxlKHJ1bGUsIGluZGV4KTtcbiAgfVxuICAvKipcbiAgICogR2V0IGFsbCBydWxlcyBlbGVtZW50cy5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZ2V0UnVsZXMgPSBmdW5jdGlvbiBnZXRSdWxlcygpIHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50LnNoZWV0LmNzc1J1bGVzO1xuICB9O1xuXG4gIHJldHVybiBEb21SZW5kZXJlcjtcbn0oKTtcblxudmFyIGluc3RhbmNlQ291bnRlciA9IDA7XG5cbnZhciBKc3MgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBKc3Mob3B0aW9ucykge1xuICAgIHRoaXMuaWQgPSBpbnN0YW5jZUNvdW50ZXIrKztcbiAgICB0aGlzLnZlcnNpb24gPSBcIjEwLjcuMVwiO1xuICAgIHRoaXMucGx1Z2lucyA9IG5ldyBQbHVnaW5zUmVnaXN0cnkoKTtcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBpZDoge1xuICAgICAgICBtaW5pZnk6IGZhbHNlXG4gICAgICB9LFxuICAgICAgY3JlYXRlR2VuZXJhdGVJZDogY3JlYXRlR2VuZXJhdGVJZCxcbiAgICAgIFJlbmRlcmVyOiBpc0luQnJvd3NlciA/IERvbVJlbmRlcmVyIDogbnVsbCxcbiAgICAgIHBsdWdpbnM6IFtdXG4gICAgfTtcbiAgICB0aGlzLmdlbmVyYXRlSWQgPSBjcmVhdGVHZW5lcmF0ZUlkKHtcbiAgICAgIG1pbmlmeTogZmFsc2VcbiAgICB9KTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGx1Z2lucy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wbHVnaW5zLnVzZShwbHVnaW5zW2ldLCB7XG4gICAgICAgIHF1ZXVlOiAnaW50ZXJuYWwnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB0aGlzLnNldHVwKG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwYXJlcyB2YXJpb3VzIG9wdGlvbnMsIGFwcGxpZXMgcGx1Z2lucy5cbiAgICogU2hvdWxkIG5vdCBiZSB1c2VkIHR3aWNlIG9uIHRoZSBzYW1lIGluc3RhbmNlLCBiZWNhdXNlIHRoZXJlIGlzIG5vIHBsdWdpbnNcbiAgICogZGVkdXBsaWNhdGlvbiBsb2dpYy5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gSnNzLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0dXAgPSBmdW5jdGlvbiBzZXR1cChvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNyZWF0ZUdlbmVyYXRlSWQpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkID0gb3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmlkKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuaWQgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmlkLCBvcHRpb25zLmlkKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkIHx8IG9wdGlvbnMuaWQpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdGVJZCA9IHRoaXMub3B0aW9ucy5jcmVhdGVHZW5lcmF0ZUlkKHRoaXMub3B0aW9ucy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgIT0gbnVsbCkgdGhpcy5vcHRpb25zLmluc2VydGlvblBvaW50ID0gb3B0aW9ucy5pbnNlcnRpb25Qb2ludDtcblxuICAgIGlmICgnUmVuZGVyZXInIGluIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5SZW5kZXJlciA9IG9wdGlvbnMuUmVuZGVyZXI7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXNwcmVhZFxuXG5cbiAgICBpZiAob3B0aW9ucy5wbHVnaW5zKSB0aGlzLnVzZS5hcHBseSh0aGlzLCBvcHRpb25zLnBsdWdpbnMpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBTdHlsZSBTaGVldC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlU3R5bGVTaGVldCA9IGZ1bmN0aW9uIGNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICAgIGluZGV4ID0gX29wdGlvbnMuaW5kZXg7XG5cbiAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJykge1xuICAgICAgaW5kZXggPSByZWdpc3RyeS5pbmRleCA9PT0gMCA/IDAgOiByZWdpc3RyeS5pbmRleCArIDE7XG4gICAgfVxuXG4gICAgdmFyIHNoZWV0ID0gbmV3IFN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAganNzOiB0aGlzLFxuICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IHRoaXMuZ2VuZXJhdGVJZCxcbiAgICAgIGluc2VydGlvblBvaW50OiB0aGlzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQsXG4gICAgICBSZW5kZXJlcjogdGhpcy5vcHRpb25zLlJlbmRlcmVyLFxuICAgICAgaW5kZXg6IGluZGV4XG4gICAgfSkpO1xuICAgIHRoaXMucGx1Z2lucy5vblByb2Nlc3NTaGVldChzaGVldCk7XG4gICAgcmV0dXJuIHNoZWV0O1xuICB9XG4gIC8qKlxuICAgKiBEZXRhY2ggdGhlIFN0eWxlIFNoZWV0IGFuZCByZW1vdmUgaXQgZnJvbSB0aGUgcmVnaXN0cnkuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnJlbW92ZVN0eWxlU2hlZXQgPSBmdW5jdGlvbiByZW1vdmVTdHlsZVNoZWV0KHNoZWV0KSB7XG4gICAgc2hlZXQuZGV0YWNoKCk7XG4gICAgcmVnaXN0cnkucmVtb3ZlKHNoZWV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgcnVsZSB3aXRob3V0IGEgU3R5bGUgU2hlZXQuXG4gICAqIFtEZXByZWNhdGVkXSB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY3JlYXRlUnVsZSA9IGZ1bmN0aW9uIGNyZWF0ZVJ1bGUkMShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChzdHlsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdHlsZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvLyBFbmFibGUgcnVsZSB3aXRob3V0IG5hbWUgZm9yIGlubGluZSBzdHlsZXMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVJ1bGUodW5kZWZpbmVkLCBuYW1lLCBzdHlsZSk7XG4gICAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXVxuXG5cbiAgICB2YXIgcnVsZU9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGpzczogdGhpcyxcbiAgICAgIFJlbmRlcmVyOiB0aGlzLm9wdGlvbnMuUmVuZGVyZXJcbiAgICB9KTtcblxuICAgIGlmICghcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCkgcnVsZU9wdGlvbnMuZ2VuZXJhdGVJZCA9IHRoaXMuZ2VuZXJhdGVJZDtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmNsYXNzZXMpIHJ1bGVPcHRpb25zLmNsYXNzZXMgPSB7fTtcbiAgICBpZiAoIXJ1bGVPcHRpb25zLmtleWZyYW1lcykgcnVsZU9wdGlvbnMua2V5ZnJhbWVzID0ge307XG5cbiAgICB2YXIgcnVsZSA9IGNyZWF0ZVJ1bGUobmFtZSwgc3R5bGUsIHJ1bGVPcHRpb25zKTtcblxuICAgIGlmIChydWxlKSB0aGlzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogUmVnaXN0ZXIgcGx1Z2luLiBQYXNzZWQgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggYSBydWxlIGluc3RhbmNlLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51c2UgPSBmdW5jdGlvbiB1c2UoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgcGx1Z2luc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBwbHVnaW5zLmZvckVhY2goZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgX3RoaXMucGx1Z2lucy51c2UocGx1Z2luKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICByZXR1cm4gSnNzO1xufSgpO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgc3R5bGVzIG9iamVjdCB3aXRoIG9ubHkgcHJvcHMgdGhhdCBjb250YWluIGZ1bmN0aW9uIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gZ2V0RHluYW1pY1N0eWxlcyhzdHlsZXMpIHtcbiAgdmFyIHRvID0gbnVsbDtcblxuICBmb3IgKHZhciBrZXkgaW4gc3R5bGVzKSB7XG4gICAgdmFyIHZhbHVlID0gc3R5bGVzW2tleV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKCF0bykgdG8gPSB7fTtcbiAgICAgIHRvW2tleV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IGdldER5bmFtaWNTdHlsZXModmFsdWUpO1xuXG4gICAgICBpZiAoZXh0cmFjdGVkKSB7XG4gICAgICAgIGlmICghdG8pIHRvID0ge307XG4gICAgICAgIHRvW2tleV0gPSBleHRyYWN0ZWQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvO1xufVxuXG4vKipcbiAqIFNoZWV0c01hbmFnZXIgaXMgbGlrZSBhIFdlYWtNYXAgd2hpY2ggaXMgZGVzaWduZWQgdG8gY291bnQgU3R5bGVTaGVldFxuICogaW5zdGFuY2VzIGFuZCBhdHRhY2gvZGV0YWNoIGF1dG9tYXRpY2FsbHkuXG4gKi9cbnZhciBTaGVldHNNYW5hZ2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU2hlZXRzTWFuYWdlcigpIHtcbiAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zaGVldHMgPSBuZXcgV2Vha01hcCgpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNoZWV0c01hbmFnZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXQgPSBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnNoZWV0O1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoa2V5LCBzaGVldCkge1xuICAgIGlmICh0aGlzLnNoZWV0cy5oYXMoa2V5KSkgcmV0dXJuO1xuICAgIHRoaXMubGVuZ3RoKys7XG4gICAgdGhpcy5zaGVldHMuc2V0KGtleSwge1xuICAgICAgc2hlZXQ6IHNoZWV0LFxuICAgICAgcmVmczogMFxuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5tYW5hZ2UgPSBmdW5jdGlvbiBtYW5hZ2Uoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gdGhpcy5zaGVldHMuZ2V0KGtleSk7XG5cbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeS5yZWZzID09PSAwKSB7XG4gICAgICAgIGVudHJ5LnNoZWV0LmF0dGFjaCgpO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5yZWZzKys7XG4gICAgICByZXR1cm4gZW50cnkuc2hlZXQ7XG4gICAgfVxuXG4gICAgd2FybmluZyhmYWxzZSwgXCJbSlNTXSBTaGVldHNNYW5hZ2VyOiBjYW4ndCBmaW5kIHNoZWV0IHRvIG1hbmFnZVwiKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by51bm1hbmFnZSA9IGZ1bmN0aW9uIHVubWFuYWdlKGtleSkge1xuICAgIHZhciBlbnRyeSA9IHRoaXMuc2hlZXRzLmdldChrZXkpO1xuXG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICBpZiAoZW50cnkucmVmcyA+IDApIHtcbiAgICAgICAgZW50cnkucmVmcy0tO1xuICAgICAgICBpZiAoZW50cnkucmVmcyA9PT0gMCkgZW50cnkuc2hlZXQuZGV0YWNoKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiU2hlZXRzTWFuYWdlcjogY2FuJ3QgZmluZCBzaGVldCB0byB1bm1hbmFnZVwiKTtcbiAgICB9XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFNoZWV0c01hbmFnZXIsIFt7XG4gICAga2V5OiBcInNpemVcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmxlbmd0aDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU2hlZXRzTWFuYWdlcjtcbn0oKTtcblxuLyoqXG4gKiBBIGJldHRlciBhYnN0cmFjdGlvbiBvdmVyIENTUy5cbiAqXG4gKiBAY29weXJpZ2h0IE9sZWcgSXNvbmVuIChTbG9ib2Rza29pKSAvIElzb25lbiAyMDE0LXByZXNlbnRcbiAqIEB3ZWJzaXRlIGh0dHBzOi8vZ2l0aHViLmNvbS9jc3NpbmpzL2pzc1xuICogQGxpY2Vuc2UgTUlUXG4gKi9cblxuLyoqXG4gKiBFeHBvcnQgYSBjb25zdGFudCBpbmRpY2F0aW5nIGlmIHRoaXMgYnJvd3NlciBoYXMgQ1NTVE9NIHN1cHBvcnQuXG4gKiBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvdXBkYXRlcy8yMDE4LzAzL2Nzc29tXG4gKi9cbnZhciBoYXNDU1NUT01TdXBwb3J0ID0gdHlwZW9mIENTUyA9PT0gJ29iamVjdCcgJiYgQ1NTICE9IG51bGwgJiYgJ251bWJlcicgaW4gQ1NTO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIEpzcy5cbiAqL1xuXG52YXIgY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBKc3Mob3B0aW9ucyk7XG59O1xuLyoqXG4gKiBBIGdsb2JhbCBKc3MgaW5zdGFuY2UuXG4gKi9cblxudmFyIGpzcyA9IGNyZWF0ZSgpO1xuXG5leHBvcnQgZGVmYXVsdCBqc3M7XG5leHBvcnQgeyBSdWxlTGlzdCwgU2hlZXRzTWFuYWdlciwgU2hlZXRzUmVnaXN0cnksIGNyZWF0ZSwgY3JlYXRlR2VuZXJhdGVJZCwgY3JlYXRlUnVsZSwgZ2V0RHluYW1pY1N0eWxlcywgaGFzQ1NTVE9NU3VwcG9ydCwgcmVnaXN0cnkgYXMgc2hlZXRzLCB0b0Nzc1ZhbHVlIH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldERpc3BsYXlOYW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQ2xhc3NlcygpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgYmFzZUNsYXNzZXMgPSBvcHRpb25zLmJhc2VDbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlcyA9IG9wdGlvbnMubmV3Q2xhc3NlcyxcbiAgICAgIENvbXBvbmVudCA9IG9wdGlvbnMuQ29tcG9uZW50O1xuXG4gIGlmICghbmV3Q2xhc3Nlcykge1xuICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgfVxuXG4gIHZhciBuZXh0Q2xhc3NlcyA9IF9leHRlbmRzKHt9LCBiYXNlQ2xhc3Nlcyk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIG5ld0NsYXNzZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUgdmFsdWUgYFwiLmNvbmNhdChuZXdDbGFzc2VzLCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIG9mIFwiLmNvbmNhdChnZXREaXNwbGF5TmFtZShDb21wb25lbnQpLCBcIiBpcyBpbmNvcnJlY3QuXCIpLCAnWW91IG1pZ2h0IHdhbnQgdG8gdXNlIHRoZSBjbGFzc05hbWUgcHJvcCBpbnN0ZWFkLiddLmpvaW4oJ1xcbicpKTtcbiAgICAgIHJldHVybiBiYXNlQ2xhc3NlcztcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhuZXdDbGFzc2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFiYXNlQ2xhc3Nlc1trZXldICYmIG5ld0NsYXNzZXNba2V5XSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFtcIk1hdGVyaWFsLVVJOiBUaGUga2V5IGBcIi5jb25jYXQoa2V5LCBcImAgXCIpICsgXCJwcm92aWRlZCB0byB0aGUgY2xhc3NlcyBwcm9wIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBjYW4gb25seSBvdmVycmlkZSBvbmUgb2YgdGhlIGZvbGxvd2luZzogXCIuY29uY2F0KE9iamVjdC5rZXlzKGJhc2VDbGFzc2VzKS5qb2luKCcsJyksIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3Q2xhc3Nlc1trZXldICYmIHR5cGVvZiBuZXdDbGFzc2VzW2tleV0gIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoW1wiTWF0ZXJpYWwtVUk6IFRoZSBrZXkgYFwiLmNvbmNhdChrZXksIFwiYCBcIikgKyBcInByb3ZpZGVkIHRvIHRoZSBjbGFzc2VzIHByb3AgaXMgbm90IHZhbGlkIGZvciBcIi5jb25jYXQoZ2V0RGlzcGxheU5hbWUoQ29tcG9uZW50KSwgXCIuXCIpLCBcIllvdSBuZWVkIHRvIHByb3ZpZGUgYSBub24gZW1wdHkgc3RyaW5nIGluc3RlYWQgb2Y6IFwiLmNvbmNhdChuZXdDbGFzc2VzW2tleV0sIFwiLlwiKV0uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuZXdDbGFzc2VzW2tleV0pIHtcbiAgICAgIG5leHRDbGFzc2VzW2tleV0gPSBcIlwiLmNvbmNhdChiYXNlQ2xhc3Nlc1trZXldLCBcIiBcIikuY29uY2F0KG5ld0NsYXNzZXNba2V5XSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG5leHRDbGFzc2VzO1xufSIsIi8vIFVzZWQgaHR0cHM6Ly9naXRodWIuY29tL3RoaW5rbG9vcC9tdWx0aS1rZXktY2FjaGUgYXMgaW5zcGlyYXRpb25cbnZhciBtdWx0aUtleVN0b3JlID0ge1xuICBzZXQ6IGZ1bmN0aW9uIHNldChjYWNoZSwga2V5MSwga2V5MiwgdmFsdWUpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG5cbiAgICBpZiAoIXN1YkNhY2hlKSB7XG4gICAgICBzdWJDYWNoZSA9IG5ldyBNYXAoKTtcbiAgICAgIGNhY2hlLnNldChrZXkxLCBzdWJDYWNoZSk7XG4gICAgfVxuXG4gICAgc3ViQ2FjaGUuc2V0KGtleTIsIHZhbHVlKTtcbiAgfSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgcmV0dXJuIHN1YkNhY2hlID8gc3ViQ2FjaGUuZ2V0KGtleTIpIDogdW5kZWZpbmVkO1xuICB9LFxuICBkZWxldGU6IGZ1bmN0aW9uIF9kZWxldGUoY2FjaGUsIGtleTEsIGtleTIpIHtcbiAgICB2YXIgc3ViQ2FjaGUgPSBjYWNoZS5nZXQoa2V5MSk7XG4gICAgc3ViQ2FjaGUuZGVsZXRlKGtleTIpO1xuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbXVsdGlLZXlTdG9yZTsiLCJpbXBvcnQgbmVzdGVkIGZyb20gJy4uL1RoZW1lUHJvdmlkZXIvbmVzdGVkJztcbi8qKlxuICogVGhpcyBpcyB0aGUgbGlzdCBvZiB0aGUgc3R5bGUgcnVsZSBuYW1lIHdlIHVzZSBhcyBkcm9wIGluIHJlcGxhY2VtZW50IGZvciB0aGUgYnVpbHQtaW5cbiAqIHBzZXVkbyBjbGFzc2VzICg6Y2hlY2tlZCwgOmRpc2FibGVkLCA6Zm9jdXNlZCwgZXRjLikuXG4gKlxuICogV2h5IGRvIHRoZXkgZXhpc3QgaW4gdGhlIGZpcnN0IHBsYWNlP1xuICogVGhlc2UgY2xhc3NlcyBhcmUgdXNlZCBhdCBhIHNwZWNpZmljaXR5IG9mIDIuXG4gKiBJdCBhbGxvd3MgdGhlbSB0byBvdmVycmlkZSBwcmV2aW91c2x5IGRlZmluaWVkIHN0eWxlcyBhcyB3ZWxsIGFzXG4gKiBiZWluZyB1bnRvdWNoZWQgYnkgc2ltcGxlIHVzZXIgb3ZlcnJpZGVzLlxuICovXG5cbnZhciBwc2V1ZG9DbGFzc2VzID0gWydjaGVja2VkJywgJ2Rpc2FibGVkJywgJ2Vycm9yJywgJ2ZvY3VzZWQnLCAnZm9jdXNWaXNpYmxlJywgJ3JlcXVpcmVkJywgJ2V4cGFuZGVkJywgJ3NlbGVjdGVkJ107IC8vIFJldHVybnMgYSBmdW5jdGlvbiB3aGljaCBnZW5lcmF0ZXMgdW5pcXVlIGNsYXNzIG5hbWVzIGJhc2VkIG9uIGNvdW50ZXJzLlxuLy8gV2hlbiBuZXcgZ2VuZXJhdG9yIGZ1bmN0aW9uIGlzIGNyZWF0ZWQsIHJ1bGUgY291bnRlciBpcyByZXNldC5cbi8vIFdlIG5lZWQgdG8gcmVzZXQgdGhlIHJ1bGUgY291bnRlciBmb3IgU1NSIGZvciBlYWNoIHJlcXVlc3QuXG4vL1xuLy8gSXQncyBpbnNwaXJlZCBieVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Nzc2luanMvanNzL2Jsb2IvNGU2YTA1ZGQzZjdiNjU3MmZkZDNhYjIxNjg2MWQ5ZTQ0NmMyMDMzMS9zcmMvdXRpbHMvY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUuanNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIF9vcHRpb25zJGRpc2FibGVHbG9iYSA9IG9wdGlvbnMuZGlzYWJsZUdsb2JhbCxcbiAgICAgIGRpc2FibGVHbG9iYWwgPSBfb3B0aW9ucyRkaXNhYmxlR2xvYmEgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZGlzYWJsZUdsb2JhLFxuICAgICAgX29wdGlvbnMkcHJvZHVjdGlvblByID0gb3B0aW9ucy5wcm9kdWN0aW9uUHJlZml4LFxuICAgICAgcHJvZHVjdGlvblByZWZpeCA9IF9vcHRpb25zJHByb2R1Y3Rpb25QciA9PT0gdm9pZCAwID8gJ2pzcycgOiBfb3B0aW9ucyRwcm9kdWN0aW9uUHIsXG4gICAgICBfb3B0aW9ucyRzZWVkID0gb3B0aW9ucy5zZWVkLFxuICAgICAgc2VlZCA9IF9vcHRpb25zJHNlZWQgPT09IHZvaWQgMCA/ICcnIDogX29wdGlvbnMkc2VlZDtcbiAgdmFyIHNlZWRQcmVmaXggPSBzZWVkID09PSAnJyA/ICcnIDogXCJcIi5jb25jYXQoc2VlZCwgXCItXCIpO1xuICB2YXIgcnVsZUNvdW50ZXIgPSAwO1xuXG4gIHZhciBnZXROZXh0Q291bnRlcklkID0gZnVuY3Rpb24gZ2V0TmV4dENvdW50ZXJJZCgpIHtcbiAgICBydWxlQ291bnRlciArPSAxO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChydWxlQ291bnRlciA+PSAxZTEwKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgbWlnaHQgaGF2ZSBhIG1lbW9yeSBsZWFrLicsICdUaGUgcnVsZUNvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJycpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcnVsZUNvdW50ZXI7XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChydWxlLCBzdHlsZVNoZWV0KSB7XG4gICAgdmFyIG5hbWUgPSBzdHlsZVNoZWV0Lm9wdGlvbnMubmFtZTsgLy8gSXMgYSBnbG9iYWwgc3RhdGljIE1VSSBzdHlsZT9cblxuICAgIGlmIChuYW1lICYmIG5hbWUuaW5kZXhPZignTXVpJykgPT09IDAgJiYgIXN0eWxlU2hlZXQub3B0aW9ucy5saW5rICYmICFkaXNhYmxlR2xvYmFsKSB7XG4gICAgICAvLyBXZSBjYW4gdXNlIGEgc2hvcnRoYW5kIGNsYXNzIG5hbWUsIHdlIG5ldmVyIHVzZSB0aGUga2V5cyB0byBzdHlsZSB0aGUgY29tcG9uZW50cy5cbiAgICAgIGlmIChwc2V1ZG9DbGFzc2VzLmluZGV4T2YocnVsZS5rZXkpICE9PSAtMSkge1xuICAgICAgICByZXR1cm4gXCJNdWktXCIuY29uY2F0KHJ1bGUua2V5KTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWZpeCA9IFwiXCIuY29uY2F0KHNlZWRQcmVmaXgpLmNvbmNhdChuYW1lLCBcIi1cIikuY29uY2F0KHJ1bGUua2V5KTtcblxuICAgICAgaWYgKCFzdHlsZVNoZWV0Lm9wdGlvbnMudGhlbWVbbmVzdGVkXSB8fCBzZWVkICE9PSAnJykge1xuICAgICAgICByZXR1cm4gcHJlZml4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJcIi5jb25jYXQocHJlZml4LCBcIi1cIikuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQocHJvZHVjdGlvblByZWZpeCkuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7XG4gICAgfVxuXG4gICAgdmFyIHN1ZmZpeCA9IFwiXCIuY29uY2F0KHJ1bGUua2V5LCBcIi1cIikuY29uY2F0KGdldE5leHRDb3VudGVySWQoKSk7IC8vIEhlbHAgd2l0aCBkZWJ1Z2dhYmlsaXR5LlxuXG4gICAgaWYgKHN0eWxlU2hlZXQub3B0aW9ucy5jbGFzc05hbWVQcmVmaXgpIHtcbiAgICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3R5bGVTaGVldC5vcHRpb25zLmNsYXNzTmFtZVByZWZpeCwgXCItXCIpLmNvbmNhdChzdWZmaXgpO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChzZWVkUHJlZml4KS5jb25jYXQoc3VmZml4KTtcbiAgfTtcbn0iLCJpbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUnVsZSB9IGZyb20gJ2pzcyc7XG5cbnZhciBub3cgPSBEYXRlLm5vdygpO1xudmFyIGZuVmFsdWVzTnMgPSBcImZuVmFsdWVzXCIgKyBub3c7XG52YXIgZm5SdWxlTnMgPSBcImZuU3R5bGVcIiArICsrbm93O1xuXG52YXIgZnVuY3Rpb25QbHVnaW4gPSBmdW5jdGlvbiBmdW5jdGlvblBsdWdpbigpIHtcbiAgcmV0dXJuIHtcbiAgICBvbkNyZWF0ZVJ1bGU6IGZ1bmN0aW9uIG9uQ3JlYXRlUnVsZShuYW1lLCBkZWNsLCBvcHRpb25zKSB7XG4gICAgICBpZiAodHlwZW9mIGRlY2wgIT09ICdmdW5jdGlvbicpIHJldHVybiBudWxsO1xuICAgICAgdmFyIHJ1bGUgPSBjcmVhdGVSdWxlKG5hbWUsIHt9LCBvcHRpb25zKTtcbiAgICAgIHJ1bGVbZm5SdWxlTnNdID0gZGVjbDtcbiAgICAgIHJldHVybiBydWxlO1xuICAgIH0sXG4gICAgb25Qcm9jZXNzU3R5bGU6IGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGV4dHJhY3QgZnVuY3Rpb24gdmFsdWVzIGZyb20gdGhlIGRlY2xhcmF0aW9uLCBzbyB0aGF0IHdlIGNhbiBrZWVwIGNvcmUgdW5hd2FyZSBvZiB0aGVtLlxuICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGF0IG9ubHkgb25jZS5cbiAgICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gZXh0cmFjdCBmdW5jdGlvbnMgb24gZWFjaCBzdHlsZSB1cGRhdGUsIHNpbmNlIHRoaXMgY2FuIGhhcHBlbiBvbmx5IG9uY2UuXG4gICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IGZ1bmN0aW9uIHZhbHVlcyBpbnNpZGUgb2YgZnVuY3Rpb24gcnVsZXMuXG4gICAgICBpZiAoZm5WYWx1ZXNOcyBpbiBydWxlIHx8IGZuUnVsZU5zIGluIHJ1bGUpIHJldHVybiBzdHlsZTtcbiAgICAgIHZhciBmblZhbHVlcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBwcm9wIGluIHN0eWxlKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHN0eWxlW3Byb3BdO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSBjb250aW51ZTtcbiAgICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgICAgICBmblZhbHVlc1twcm9wXSA9IHZhbHVlO1xuICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuXG4gICAgICBydWxlW2ZuVmFsdWVzTnNdID0gZm5WYWx1ZXM7XG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfSxcbiAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoZGF0YSwgcnVsZSwgc2hlZXQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzdHlsZVJ1bGUgPSBydWxlOyAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgICAgdmFyIGZuUnVsZSA9IHN0eWxlUnVsZVtmblJ1bGVOc107IC8vIElmIHdlIGhhdmUgYSBzdHlsZSBmdW5jdGlvbiwgdGhlIGVudGlyZSBydWxlIGlzIGR5bmFtaWMgYW5kIHN0eWxlIG9iamVjdFxuICAgICAgLy8gd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoYXQgZnVuY3Rpb24uXG5cbiAgICAgIGlmIChmblJ1bGUpIHtcbiAgICAgICAgLy8gRW1wdHkgb2JqZWN0IHdpbGwgcmVtb3ZlIGFsbCBjdXJyZW50bHkgZGVmaW5lZCBwcm9wc1xuICAgICAgICAvLyBpbiBjYXNlIGZ1bmN0aW9uIHJ1bGUgcmV0dXJucyBhIGZhbHN5IHZhbHVlLlxuICAgICAgICBzdHlsZVJ1bGUuc3R5bGUgPSBmblJ1bGUoZGF0YSkgfHwge307XG5cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnKSB7XG4gICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZVJ1bGUuc3R5bGUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5bGVSdWxlLnN0eWxlW3Byb3BdID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoZmFsc2UsICdbSlNTXSBGdW5jdGlvbiB2YWx1ZXMgaW5zaWRlIGZ1bmN0aW9uIHJ1bGVzIGFyZSBub3Qgc3VwcG9ydGVkLicpIDogdm9pZCAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG5cblxuICAgICAgdmFyIGZuVmFsdWVzID0gc3R5bGVSdWxlW2ZuVmFsdWVzTnNdOyAvLyBJZiB3ZSBoYXZlIGEgZm4gdmFsdWVzIG1hcCwgaXQgaXMgYSBydWxlIHdpdGggZnVuY3Rpb24gdmFsdWVzLlxuXG4gICAgICBpZiAoZm5WYWx1ZXMpIHtcbiAgICAgICAgZm9yICh2YXIgX3Byb3AgaW4gZm5WYWx1ZXMpIHtcbiAgICAgICAgICBzdHlsZVJ1bGUucHJvcChfcHJvcCwgZm5WYWx1ZXNbX3Byb3BdKGRhdGEpLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uUGx1Z2luO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHsgUnVsZUxpc3QgfSBmcm9tICdqc3MnO1xuXG52YXIgYXQgPSAnQGdsb2JhbCc7XG52YXIgYXRQcmVmaXggPSAnQGdsb2JhbCAnO1xuXG52YXIgR2xvYmFsQ29udGFpbmVyUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbENvbnRhaW5lclJ1bGUoa2V5LCBzdHlsZXMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSAnZ2xvYmFsJztcbiAgICB0aGlzLmF0ID0gYXQ7XG4gICAgdGhpcy5ydWxlcyA9IHZvaWQgMDtcbiAgICB0aGlzLm9wdGlvbnMgPSB2b2lkIDA7XG4gICAgdGhpcy5rZXkgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5ydWxlcyA9IG5ldyBSdWxlTGlzdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuXG4gICAgZm9yICh2YXIgc2VsZWN0b3IgaW4gc3R5bGVzKSB7XG4gICAgICB0aGlzLnJ1bGVzLmFkZChzZWxlY3Rvciwgc3R5bGVzW3NlbGVjdG9yXSk7XG4gICAgfVxuXG4gICAgdGhpcy5ydWxlcy5wcm9jZXNzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIHJ1bGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IEdsb2JhbENvbnRhaW5lclJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMuZ2V0KG5hbWUpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYW5kIHJlZ2lzdGVyIHJ1bGUsIHJ1biBwbHVnaW5zLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hZGRSdWxlID0gZnVuY3Rpb24gYWRkUnVsZShuYW1lLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIHZhciBydWxlID0gdGhpcy5ydWxlcy5hZGQobmFtZSwgc3R5bGUsIG9wdGlvbnMpO1xuICAgIGlmIChydWxlKSB0aGlzLm9wdGlvbnMuanNzLnBsdWdpbnMub25Qcm9jZXNzUnVsZShydWxlKTtcbiAgICByZXR1cm4gcnVsZTtcbiAgfVxuICAvKipcbiAgICogR2V0IGluZGV4IG9mIGEgcnVsZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YocnVsZSkge1xuICAgIHJldHVybiB0aGlzLnJ1bGVzLmluZGV4T2YocnVsZSk7XG4gIH1cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIENTUyBzdHJpbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXMudG9TdHJpbmcoKTtcbiAgfTtcblxuICByZXR1cm4gR2xvYmFsQ29udGFpbmVyUnVsZTtcbn0oKTtcblxudmFyIEdsb2JhbFByZWZpeGVkUnVsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdsb2JhbFByZWZpeGVkUnVsZShrZXksIHN0eWxlLCBvcHRpb25zKSB7XG4gICAgdGhpcy50eXBlID0gJ2dsb2JhbCc7XG4gICAgdGhpcy5hdCA9IGF0O1xuICAgIHRoaXMub3B0aW9ucyA9IHZvaWQgMDtcbiAgICB0aGlzLnJ1bGUgPSB2b2lkIDA7XG4gICAgdGhpcy5pc1Byb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHRoaXMua2V5ID0gdm9pZCAwO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdmFyIHNlbGVjdG9yID0ga2V5LnN1YnN0cihhdFByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMucnVsZSA9IG9wdGlvbnMuanNzLmNyZWF0ZVJ1bGUoc2VsZWN0b3IsIHN0eWxlLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgcGFyZW50OiB0aGlzXG4gICAgfSkpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBHbG9iYWxQcmVmaXhlZFJ1bGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZSA/IHRoaXMucnVsZS50b1N0cmluZyhvcHRpb25zKSA6ICcnO1xuICB9O1xuXG4gIHJldHVybiBHbG9iYWxQcmVmaXhlZFJ1bGU7XG59KCk7XG5cbnZhciBzZXBhcmF0b3JSZWdFeHAgPSAvXFxzKixcXHMqL2c7XG5cbmZ1bmN0aW9uIGFkZFNjb3BlKHNlbGVjdG9yLCBzY29wZSkge1xuICB2YXIgcGFydHMgPSBzZWxlY3Rvci5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICB2YXIgc2NvcGVkID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIHNjb3BlZCArPSBzY29wZSArIFwiIFwiICsgcGFydHNbaV0udHJpbSgpO1xuICAgIGlmIChwYXJ0c1tpICsgMV0pIHNjb3BlZCArPSAnLCAnO1xuICB9XG5cbiAgcmV0dXJuIHNjb3BlZDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlTmVzdGVkR2xvYmFsQ29udGFpbmVyUnVsZShydWxlLCBzaGVldCkge1xuICB2YXIgb3B0aW9ucyA9IHJ1bGUub3B0aW9ucyxcbiAgICAgIHN0eWxlID0gcnVsZS5zdHlsZTtcbiAgdmFyIHJ1bGVzID0gc3R5bGUgPyBzdHlsZVthdF0gOiBudWxsO1xuICBpZiAoIXJ1bGVzKSByZXR1cm47XG5cbiAgZm9yICh2YXIgbmFtZSBpbiBydWxlcykge1xuICAgIHNoZWV0LmFkZFJ1bGUobmFtZSwgcnVsZXNbbmFtZV0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzZWxlY3RvcjogYWRkU2NvcGUobmFtZSwgcnVsZS5zZWxlY3RvcilcbiAgICB9KSk7XG4gIH1cblxuICBkZWxldGUgc3R5bGVbYXRdO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVQcmVmaXhlZEdsb2JhbFJ1bGUocnVsZSwgc2hlZXQpIHtcbiAgdmFyIG9wdGlvbnMgPSBydWxlLm9wdGlvbnMsXG4gICAgICBzdHlsZSA9IHJ1bGUuc3R5bGU7XG5cbiAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgIGlmIChwcm9wWzBdICE9PSAnQCcgfHwgcHJvcC5zdWJzdHIoMCwgYXQubGVuZ3RoKSAhPT0gYXQpIGNvbnRpbnVlO1xuICAgIHZhciBzZWxlY3RvciA9IGFkZFNjb3BlKHByb3Auc3Vic3RyKGF0Lmxlbmd0aCksIHJ1bGUuc2VsZWN0b3IpO1xuICAgIHNoZWV0LmFkZFJ1bGUoc2VsZWN0b3IsIHN0eWxlW3Byb3BdLCBfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgc2VsZWN0b3I6IHNlbGVjdG9yXG4gICAgfSkpO1xuICAgIGRlbGV0ZSBzdHlsZVtwcm9wXTtcbiAgfVxufVxuLyoqXG4gKiBDb252ZXJ0IG5lc3RlZCBydWxlcyB0byBzZXBhcmF0ZSwgcmVtb3ZlIHRoZW0gZnJvbSBvcmlnaW5hbCBzdHlsZXMuXG4gKlxuICogQHBhcmFtIHtSdWxlfSBydWxlXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cblxuZnVuY3Rpb24ganNzR2xvYmFsKCkge1xuICBmdW5jdGlvbiBvbkNyZWF0ZVJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKSB7XG4gICAgaWYgKCFuYW1lKSByZXR1cm4gbnVsbDtcblxuICAgIGlmIChuYW1lID09PSBhdCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxDb250YWluZXJSdWxlKG5hbWUsIHN0eWxlcywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWVbMF0gPT09ICdAJyAmJiBuYW1lLnN1YnN0cigwLCBhdFByZWZpeC5sZW5ndGgpID09PSBhdFByZWZpeCkge1xuICAgICAgcmV0dXJuIG5ldyBHbG9iYWxQcmVmaXhlZFJ1bGUobmFtZSwgc3R5bGVzLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG5cbiAgICBpZiAocGFyZW50KSB7XG4gICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdnbG9iYWwnIHx8IHBhcmVudC5vcHRpb25zLnBhcmVudCAmJiBwYXJlbnQub3B0aW9ucy5wYXJlbnQudHlwZSA9PT0gJ2dsb2JhbCcpIHtcbiAgICAgICAgb3B0aW9ucy5zY29wZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zY29wZWQgPT09IGZhbHNlKSB7XG4gICAgICBvcHRpb25zLnNlbGVjdG9yID0gbmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnIHx8ICFzaGVldCkgcmV0dXJuO1xuICAgIGhhbmRsZU5lc3RlZEdsb2JhbENvbnRhaW5lclJ1bGUocnVsZSwgc2hlZXQpO1xuICAgIGhhbmRsZVByZWZpeGVkR2xvYmFsUnVsZShydWxlLCBzaGVldCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uQ3JlYXRlUnVsZTogb25DcmVhdGVSdWxlLFxuICAgIG9uUHJvY2Vzc1J1bGU6IG9uUHJvY2Vzc1J1bGVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQganNzR2xvYmFsO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIHNlcGFyYXRvclJlZ0V4cCA9IC9cXHMqLFxccyovZztcbnZhciBwYXJlbnRSZWdFeHAgPSAvJi9nO1xudmFyIHJlZlJlZ0V4cCA9IC9cXCQoW1xcdy1dKykvZztcbi8qKlxuICogQ29udmVydCBuZXN0ZWQgcnVsZXMgdG8gc2VwYXJhdGUsIHJlbW92ZSB0aGVtIGZyb20gb3JpZ2luYWwgc3R5bGVzLlxuICpcbiAqIEBwYXJhbSB7UnVsZX0gcnVsZVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBqc3NOZXN0ZWQoKSB7XG4gIC8vIEdldCBhIGZ1bmN0aW9uIHRvIGJlIHVzZWQgZm9yICRyZWYgcmVwbGFjZW1lbnQuXG4gIGZ1bmN0aW9uIGdldFJlcGxhY2VSZWYoY29udGFpbmVyLCBzaGVldCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWF0Y2gsIGtleSkge1xuICAgICAgdmFyIHJ1bGUgPSBjb250YWluZXIuZ2V0UnVsZShrZXkpIHx8IHNoZWV0ICYmIHNoZWV0LmdldFJ1bGUoa2V5KTtcblxuICAgICAgaWYgKHJ1bGUpIHtcbiAgICAgICAgcnVsZSA9IHJ1bGU7XG4gICAgICAgIHJldHVybiBydWxlLnNlbGVjdG9yO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGZhbHNlLCBcIltKU1NdIENvdWxkIG5vdCBmaW5kIHRoZSByZWZlcmVuY2VkIHJ1bGUgXFxcIlwiICsga2V5ICsgXCJcXFwiIGluIFxcXCJcIiArIChjb250YWluZXIub3B0aW9ucy5tZXRhIHx8IGNvbnRhaW5lci50b1N0cmluZygpKSArIFwiXFxcIi5cIikgOiB2b2lkIDA7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlUGFyZW50UmVmcyhuZXN0ZWRQcm9wLCBwYXJlbnRQcm9wKSB7XG4gICAgdmFyIHBhcmVudFNlbGVjdG9ycyA9IHBhcmVudFByb3Auc3BsaXQoc2VwYXJhdG9yUmVnRXhwKTtcbiAgICB2YXIgbmVzdGVkU2VsZWN0b3JzID0gbmVzdGVkUHJvcC5zcGxpdChzZXBhcmF0b3JSZWdFeHApO1xuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyZW50U2VsZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcGFyZW50ID0gcGFyZW50U2VsZWN0b3JzW2ldO1xuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5lc3RlZFNlbGVjdG9ycy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbmVzdGVkID0gbmVzdGVkU2VsZWN0b3JzW2pdO1xuICAgICAgICBpZiAocmVzdWx0KSByZXN1bHQgKz0gJywgJzsgLy8gUmVwbGFjZSBhbGwgJiBieSB0aGUgcGFyZW50IG9yIHByZWZpeCAmIHdpdGggdGhlIHBhcmVudC5cblxuICAgICAgICByZXN1bHQgKz0gbmVzdGVkLmluZGV4T2YoJyYnKSAhPT0gLTEgPyBuZXN0ZWQucmVwbGFjZShwYXJlbnRSZWdFeHAsIHBhcmVudCkgOiBwYXJlbnQgKyBcIiBcIiArIG5lc3RlZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3B0aW9ucyhydWxlLCBjb250YWluZXIsIHByZXZPcHRpb25zKSB7XG4gICAgLy8gT3B0aW9ucyBoYXMgYmVlbiBhbHJlYWR5IGNyZWF0ZWQsIG5vdyB3ZSBvbmx5IGluY3JlYXNlIGluZGV4LlxuICAgIGlmIChwcmV2T3B0aW9ucykgcmV0dXJuIF9leHRlbmRzKHt9LCBwcmV2T3B0aW9ucywge1xuICAgICAgaW5kZXg6IHByZXZPcHRpb25zLmluZGV4ICsgMSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cblxuICAgIH0pO1xuICAgIHZhciBuZXN0aW5nTGV2ZWwgPSBydWxlLm9wdGlvbnMubmVzdGluZ0xldmVsO1xuICAgIG5lc3RpbmdMZXZlbCA9IG5lc3RpbmdMZXZlbCA9PT0gdW5kZWZpbmVkID8gMSA6IG5lc3RpbmdMZXZlbCArIDE7XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBydWxlLm9wdGlvbnMsIHtcbiAgICAgIG5lc3RpbmdMZXZlbDogbmVzdGluZ0xldmVsLFxuICAgICAgaW5kZXg6IGNvbnRhaW5lci5pbmRleE9mKHJ1bGUpICsgMSAvLyBXZSBkb24ndCBuZWVkIHRoZSBwYXJlbnQgbmFtZSB0byBiZSBzZXQgb3B0aW9ucyBmb3IgY2hsaWQuXG5cbiAgICB9KTtcblxuICAgIGRlbGV0ZSBvcHRpb25zLm5hbWU7XG4gICAgcmV0dXJuIG9wdGlvbnM7XG4gIH1cblxuICBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSwgc2hlZXQpIHtcbiAgICBpZiAocnVsZS50eXBlICE9PSAnc3R5bGUnKSByZXR1cm4gc3R5bGU7XG4gICAgdmFyIHN0eWxlUnVsZSA9IHJ1bGU7XG4gICAgdmFyIGNvbnRhaW5lciA9IHN0eWxlUnVsZS5vcHRpb25zLnBhcmVudDtcbiAgICB2YXIgb3B0aW9ucztcbiAgICB2YXIgcmVwbGFjZVJlZjtcblxuICAgIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHZhciBpc05lc3RlZCA9IHByb3AuaW5kZXhPZignJicpICE9PSAtMTtcbiAgICAgIHZhciBpc05lc3RlZENvbmRpdGlvbmFsID0gcHJvcFswXSA9PT0gJ0AnO1xuICAgICAgaWYgKCFpc05lc3RlZCAmJiAhaXNOZXN0ZWRDb25kaXRpb25hbCkgY29udGludWU7XG4gICAgICBvcHRpb25zID0gZ2V0T3B0aW9ucyhzdHlsZVJ1bGUsIGNvbnRhaW5lciwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChpc05lc3RlZCkge1xuICAgICAgICB2YXIgc2VsZWN0b3IgPSByZXBsYWNlUGFyZW50UmVmcyhwcm9wLCBzdHlsZVJ1bGUuc2VsZWN0b3IpOyAvLyBMYXppbHkgY3JlYXRlIHRoZSByZWYgcmVwbGFjZXIgZnVuY3Rpb24ganVzdCBvbmNlIGZvclxuICAgICAgICAvLyBhbGwgbmVzdGVkIHJ1bGVzIHdpdGhpbiB0aGUgc2hlZXQuXG5cbiAgICAgICAgaWYgKCFyZXBsYWNlUmVmKSByZXBsYWNlUmVmID0gZ2V0UmVwbGFjZVJlZihjb250YWluZXIsIHNoZWV0KTsgLy8gUmVwbGFjZSBhbGwgJHJlZnMuXG5cbiAgICAgICAgc2VsZWN0b3IgPSBzZWxlY3Rvci5yZXBsYWNlKHJlZlJlZ0V4cCwgcmVwbGFjZVJlZik7XG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHNlbGVjdG9yLCBzdHlsZVtwcm9wXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBzZWxlY3Rvcjogc2VsZWN0b3JcbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmIChpc05lc3RlZENvbmRpdGlvbmFsKSB7XG4gICAgICAgIC8vIFBsYWNlIGNvbmRpdGlvbmFsIHJpZ2h0IGFmdGVyIHRoZSBwYXJlbnQgcnVsZSB0byBlbnN1cmUgcmlnaHQgb3JkZXJpbmcuXG4gICAgICAgIGNvbnRhaW5lci5hZGRSdWxlKHByb3AsIHt9LCBvcHRpb25zKSAvLyBGbG93IGV4cGVjdHMgbW9yZSBvcHRpb25zIGJ1dCB0aGV5IGFyZW4ndCByZXF1aXJlZFxuICAgICAgICAvLyBBbmQgZmxvdyBkb2Vzbid0IGtub3cgdGhpcyB3aWxsIGFsd2F5cyBiZSBhIFN0eWxlUnVsZSB3aGljaCBoYXMgdGhlIGFkZFJ1bGUgbWV0aG9kXG4gICAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICAgIC5hZGRSdWxlKHN0eWxlUnVsZS5rZXksIHN0eWxlW3Byb3BdLCB7XG4gICAgICAgICAgc2VsZWN0b3I6IHN0eWxlUnVsZS5zZWxlY3RvclxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgZGVsZXRlIHN0eWxlW3Byb3BdO1xuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc05lc3RlZDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXZhciwgcHJlZmVyLXRlbXBsYXRlICovXG52YXIgdXBwZXJjYXNlUGF0dGVybiA9IC9bQS1aXS9nXG52YXIgbXNQYXR0ZXJuID0gL15tcy0vXG52YXIgY2FjaGUgPSB7fVxuXG5mdW5jdGlvbiB0b0h5cGhlbkxvd2VyKG1hdGNoKSB7XG4gIHJldHVybiAnLScgKyBtYXRjaC50b0xvd2VyQ2FzZSgpXG59XG5cbmZ1bmN0aW9uIGh5cGhlbmF0ZVN0eWxlTmFtZShuYW1lKSB7XG4gIGlmIChjYWNoZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgIHJldHVybiBjYWNoZVtuYW1lXVxuICB9XG5cbiAgdmFyIGhOYW1lID0gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sIHRvSHlwaGVuTG93ZXIpXG4gIHJldHVybiAoY2FjaGVbbmFtZV0gPSBtc1BhdHRlcm4udGVzdChoTmFtZSkgPyAnLScgKyBoTmFtZSA6IGhOYW1lKVxufVxuXG5leHBvcnQgZGVmYXVsdCBoeXBoZW5hdGVTdHlsZU5hbWVcbiIsImltcG9ydCBoeXBoZW5hdGUgZnJvbSAnaHlwaGVuYXRlLXN0eWxlLW5hbWUnO1xuXG4vKipcbiAqIENvbnZlcnQgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgdG8gZGFzaCBzZXBhcmF0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHN0eWxlXG4gKiBAcmV0dXJuIHtPYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gY29udmVydENhc2Uoc3R5bGUpIHtcbiAgdmFyIGNvbnZlcnRlZCA9IHt9O1xuXG4gIGZvciAodmFyIHByb3AgaW4gc3R5bGUpIHtcbiAgICB2YXIga2V5ID0gcHJvcC5pbmRleE9mKCctLScpID09PSAwID8gcHJvcCA6IGh5cGhlbmF0ZShwcm9wKTtcbiAgICBjb252ZXJ0ZWRba2V5XSA9IHN0eWxlW3Byb3BdO1xuICB9XG5cbiAgaWYgKHN0eWxlLmZhbGxiYWNrcykge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN0eWxlLmZhbGxiYWNrcykpIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBzdHlsZS5mYWxsYmFja3MubWFwKGNvbnZlcnRDYXNlKTtlbHNlIGNvbnZlcnRlZC5mYWxsYmFja3MgPSBjb252ZXJ0Q2FzZShzdHlsZS5mYWxsYmFja3MpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnZlcnRlZDtcbn1cbi8qKlxuICogQWxsb3cgY2FtZWwgY2FzZWQgcHJvcGVydHkgbmFtZXMgYnkgY29udmVydGluZyB0aGVtIGJhY2sgdG8gZGFzaGVyaXplZC5cbiAqXG4gKiBAcGFyYW0ge1J1bGV9IHJ1bGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgZnVuY3Rpb24gb25Qcm9jZXNzU3R5bGUoc3R5bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzdHlsZSkpIHtcbiAgICAgIC8vIEhhbmRsZSBydWxlcyBsaWtlIEBmb250LWZhY2UsIHdoaWNoIGNhbiBoYXZlIG11bHRpcGxlIHN0eWxlcyBpbiBhbiBhcnJheVxuICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHN0eWxlLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICBzdHlsZVtpbmRleF0gPSBjb252ZXJ0Q2FzZShzdHlsZVtpbmRleF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvbnZlcnRDYXNlKHN0eWxlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ2hhbmdlVmFsdWUodmFsdWUsIHByb3AsIHJ1bGUpIHtcbiAgICBpZiAocHJvcC5pbmRleE9mKCctLScpID09PSAwKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIGh5cGhlbmF0ZWRQcm9wID0gaHlwaGVuYXRlKHByb3ApOyAvLyBUaGVyZSB3YXMgbm8gY2FtZWwgY2FzZSBpbiBwbGFjZVxuXG4gICAgaWYgKHByb3AgPT09IGh5cGhlbmF0ZWRQcm9wKSByZXR1cm4gdmFsdWU7XG4gICAgcnVsZS5wcm9wKGh5cGhlbmF0ZWRQcm9wLCB2YWx1ZSk7IC8vIENvcmUgd2lsbCBpZ25vcmUgdGhhdCBwcm9wZXJ0eSB2YWx1ZSB3ZSBzZXQgdGhlIHByb3BlciBvbmUgYWJvdmUuXG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzU3R5bGU6IG9uUHJvY2Vzc1N0eWxlLFxuICAgIG9uQ2hhbmdlVmFsdWU6IG9uQ2hhbmdlVmFsdWVcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FtZWxDYXNlO1xuIiwiaW1wb3J0IHsgaGFzQ1NTVE9NU3VwcG9ydCB9IGZyb20gJ2pzcyc7XG5cbnZhciBweCA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLnB4IDogJ3B4JztcbnZhciBtcyA9IGhhc0NTU1RPTVN1cHBvcnQgJiYgQ1NTID8gQ1NTLm1zIDogJ21zJztcbnZhciBwZXJjZW50ID0gaGFzQ1NTVE9NU3VwcG9ydCAmJiBDU1MgPyBDU1MucGVyY2VudCA6ICclJztcbi8qKlxuICogR2VuZXJhdGVkIGpzcy1wbHVnaW4tZGVmYXVsdC11bml0IENTUyBwcm9wZXJ0eSB1bml0c1xuICpcbiAqIEB0eXBlIG9iamVjdFxuICovXG5cbnZhciBkZWZhdWx0VW5pdHMgPSB7XG4gIC8vIEFuaW1hdGlvbiBwcm9wZXJ0aWVzXG4gICdhbmltYXRpb24tZGVsYXknOiBtcyxcbiAgJ2FuaW1hdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBCYWNrZ3JvdW5kIHByb3BlcnRpZXNcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24nOiBweCxcbiAgJ2JhY2tncm91bmQtcG9zaXRpb24teCc6IHB4LFxuICAnYmFja2dyb3VuZC1wb3NpdGlvbi15JzogcHgsXG4gICdiYWNrZ3JvdW5kLXNpemUnOiBweCxcbiAgLy8gQm9yZGVyIFByb3BlcnRpZXNcbiAgYm9yZGVyOiBweCxcbiAgJ2JvcmRlci1ib3R0b20nOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItYm90dG9tLXdpZHRoJzogcHgsXG4gICdib3JkZXItbGVmdCc6IHB4LFxuICAnYm9yZGVyLWxlZnQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1yaWdodCc6IHB4LFxuICAnYm9yZGVyLXJpZ2h0LXdpZHRoJzogcHgsXG4gICdib3JkZXItdG9wJzogcHgsXG4gICdib3JkZXItdG9wLWxlZnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXRvcC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXdpZHRoJzogcHgsXG4gICdib3JkZXItYmxvY2snOiBweCxcbiAgJ2JvcmRlci1ibG9jay1lbmQnOiBweCxcbiAgJ2JvcmRlci1ibG9jay1lbmQtd2lkdGgnOiBweCxcbiAgJ2JvcmRlci1ibG9jay1zdGFydCc6IHB4LFxuICAnYm9yZGVyLWJsb2NrLXN0YXJ0LXdpZHRoJzogcHgsXG4gICdib3JkZXItYmxvY2std2lkdGgnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUnOiBweCxcbiAgJ2JvcmRlci1pbmxpbmUtZW5kJzogcHgsXG4gICdib3JkZXItaW5saW5lLWVuZC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1zdGFydCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS1zdGFydC13aWR0aCc6IHB4LFxuICAnYm9yZGVyLWlubGluZS13aWR0aCc6IHB4LFxuICAnYm9yZGVyLXN0YXJ0LXN0YXJ0LXJhZGl1cyc6IHB4LFxuICAnYm9yZGVyLXN0YXJ0LWVuZC1yYWRpdXMnOiBweCxcbiAgJ2JvcmRlci1lbmQtc3RhcnQtcmFkaXVzJzogcHgsXG4gICdib3JkZXItZW5kLWVuZC1yYWRpdXMnOiBweCxcbiAgLy8gTWFyZ2luIHByb3BlcnRpZXNcbiAgbWFyZ2luOiBweCxcbiAgJ21hcmdpbi1ib3R0b20nOiBweCxcbiAgJ21hcmdpbi1sZWZ0JzogcHgsXG4gICdtYXJnaW4tcmlnaHQnOiBweCxcbiAgJ21hcmdpbi10b3AnOiBweCxcbiAgJ21hcmdpbi1ibG9jayc6IHB4LFxuICAnbWFyZ2luLWJsb2NrLWVuZCc6IHB4LFxuICAnbWFyZ2luLWJsb2NrLXN0YXJ0JzogcHgsXG4gICdtYXJnaW4taW5saW5lJzogcHgsXG4gICdtYXJnaW4taW5saW5lLWVuZCc6IHB4LFxuICAnbWFyZ2luLWlubGluZS1zdGFydCc6IHB4LFxuICAvLyBQYWRkaW5nIHByb3BlcnRpZXNcbiAgcGFkZGluZzogcHgsXG4gICdwYWRkaW5nLWJvdHRvbSc6IHB4LFxuICAncGFkZGluZy1sZWZ0JzogcHgsXG4gICdwYWRkaW5nLXJpZ2h0JzogcHgsXG4gICdwYWRkaW5nLXRvcCc6IHB4LFxuICAncGFkZGluZy1ibG9jayc6IHB4LFxuICAncGFkZGluZy1ibG9jay1lbmQnOiBweCxcbiAgJ3BhZGRpbmctYmxvY2stc3RhcnQnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lJzogcHgsXG4gICdwYWRkaW5nLWlubGluZS1lbmQnOiBweCxcbiAgJ3BhZGRpbmctaW5saW5lLXN0YXJ0JzogcHgsXG4gIC8vIE1hc2sgcHJvcGVydGllc1xuICAnbWFzay1wb3NpdGlvbi14JzogcHgsXG4gICdtYXNrLXBvc2l0aW9uLXknOiBweCxcbiAgJ21hc2stc2l6ZSc6IHB4LFxuICAvLyBXaWR0aCBhbmQgaGVpZ2h0IHByb3BlcnRpZXNcbiAgaGVpZ2h0OiBweCxcbiAgd2lkdGg6IHB4LFxuICAnbWluLWhlaWdodCc6IHB4LFxuICAnbWF4LWhlaWdodCc6IHB4LFxuICAnbWluLXdpZHRoJzogcHgsXG4gICdtYXgtd2lkdGgnOiBweCxcbiAgLy8gUG9zaXRpb24gcHJvcGVydGllc1xuICBib3R0b206IHB4LFxuICBsZWZ0OiBweCxcbiAgdG9wOiBweCxcbiAgcmlnaHQ6IHB4LFxuICBpbnNldDogcHgsXG4gICdpbnNldC1ibG9jayc6IHB4LFxuICAnaW5zZXQtYmxvY2stZW5kJzogcHgsXG4gICdpbnNldC1ibG9jay1zdGFydCc6IHB4LFxuICAnaW5zZXQtaW5saW5lJzogcHgsXG4gICdpbnNldC1pbmxpbmUtZW5kJzogcHgsXG4gICdpbnNldC1pbmxpbmUtc3RhcnQnOiBweCxcbiAgLy8gU2hhZG93IHByb3BlcnRpZXNcbiAgJ2JveC1zaGFkb3cnOiBweCxcbiAgJ3RleHQtc2hhZG93JzogcHgsXG4gIC8vIENvbHVtbiBwcm9wZXJ0aWVzXG4gICdjb2x1bW4tZ2FwJzogcHgsXG4gICdjb2x1bW4tcnVsZSc6IHB4LFxuICAnY29sdW1uLXJ1bGUtd2lkdGgnOiBweCxcbiAgJ2NvbHVtbi13aWR0aCc6IHB4LFxuICAvLyBGb250IGFuZCB0ZXh0IHByb3BlcnRpZXNcbiAgJ2ZvbnQtc2l6ZSc6IHB4LFxuICAnZm9udC1zaXplLWRlbHRhJzogcHgsXG4gICdsZXR0ZXItc3BhY2luZyc6IHB4LFxuICAndGV4dC1kZWNvcmF0aW9uLXRoaWNrbmVzcyc6IHB4LFxuICAndGV4dC1pbmRlbnQnOiBweCxcbiAgJ3RleHQtc3Ryb2tlJzogcHgsXG4gICd0ZXh0LXN0cm9rZS13aWR0aCc6IHB4LFxuICAnd29yZC1zcGFjaW5nJzogcHgsXG4gIC8vIE1vdGlvbiBwcm9wZXJ0aWVzXG4gIG1vdGlvbjogcHgsXG4gICdtb3Rpb24tb2Zmc2V0JzogcHgsXG4gIC8vIE91dGxpbmUgcHJvcGVydGllc1xuICBvdXRsaW5lOiBweCxcbiAgJ291dGxpbmUtb2Zmc2V0JzogcHgsXG4gICdvdXRsaW5lLXdpZHRoJzogcHgsXG4gIC8vIFBlcnNwZWN0aXZlIHByb3BlcnRpZXNcbiAgcGVyc3BlY3RpdmU6IHB4LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXgnOiBwZXJjZW50LFxuICAncGVyc3BlY3RpdmUtb3JpZ2luLXknOiBwZXJjZW50LFxuICAvLyBUcmFuc2Zvcm0gcHJvcGVydGllc1xuICAndHJhbnNmb3JtLW9yaWdpbic6IHBlcmNlbnQsXG4gICd0cmFuc2Zvcm0tb3JpZ2luLXgnOiBwZXJjZW50LFxuICAndHJhbnNmb3JtLW9yaWdpbi15JzogcGVyY2VudCxcbiAgJ3RyYW5zZm9ybS1vcmlnaW4teic6IHBlcmNlbnQsXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydGllc1xuICAndHJhbnNpdGlvbi1kZWxheSc6IG1zLFxuICAndHJhbnNpdGlvbi1kdXJhdGlvbic6IG1zLFxuICAvLyBBbGlnbm1lbnQgcHJvcGVydGllc1xuICAndmVydGljYWwtYWxpZ24nOiBweCxcbiAgJ2ZsZXgtYmFzaXMnOiBweCxcbiAgLy8gU29tZSByYW5kb20gcHJvcGVydGllc1xuICAnc2hhcGUtbWFyZ2luJzogcHgsXG4gIHNpemU6IHB4LFxuICBnYXA6IHB4LFxuICAvLyBHcmlkIHByb3BlcnRpZXNcbiAgZ3JpZDogcHgsXG4gICdncmlkLWdhcCc6IHB4LFxuICAncm93LWdhcCc6IHB4LFxuICAnZ3JpZC1yb3ctZ2FwJzogcHgsXG4gICdncmlkLWNvbHVtbi1nYXAnOiBweCxcbiAgJ2dyaWQtdGVtcGxhdGUtcm93cyc6IHB4LFxuICAnZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zJzogcHgsXG4gICdncmlkLWF1dG8tcm93cyc6IHB4LFxuICAnZ3JpZC1hdXRvLWNvbHVtbnMnOiBweCxcbiAgLy8gTm90IGV4aXN0aW5nIHByb3BlcnRpZXMuXG4gIC8vIFVzZWQgdG8gYXZvaWQgaXNzdWVzIHdpdGgganNzLXBsdWdpbi1leHBhbmQgaW50ZWdyYXRpb24uXG4gICdib3gtc2hhZG93LXgnOiBweCxcbiAgJ2JveC1zaGFkb3cteSc6IHB4LFxuICAnYm94LXNoYWRvdy1ibHVyJzogcHgsXG4gICdib3gtc2hhZG93LXNwcmVhZCc6IHB4LFxuICAnZm9udC1saW5lLWhlaWdodCc6IHB4LFxuICAndGV4dC1zaGFkb3cteCc6IHB4LFxuICAndGV4dC1zaGFkb3cteSc6IHB4LFxuICAndGV4dC1zaGFkb3ctYmx1cic6IHB4XG59O1xuXG4vKipcbiAqIENsb25lcyB0aGUgb2JqZWN0IGFuZCBhZGRzIGEgY2FtZWwgY2FzZWQgcHJvcGVydHkgdmVyc2lvbi5cbiAqL1xuZnVuY3Rpb24gYWRkQ2FtZWxDYXNlZFZlcnNpb24ob2JqKSB7XG4gIHZhciByZWdFeHAgPSAvKC1bYS16XSkvZztcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgcmV0dXJuIHN0clsxXS50b1VwcGVyQ2FzZSgpO1xuICB9O1xuXG4gIHZhciBuZXdPYmogPSB7fTtcblxuICBmb3IgKHZhciBfa2V5IGluIG9iaikge1xuICAgIG5ld09ialtfa2V5XSA9IG9ialtfa2V5XTtcbiAgICBuZXdPYmpbX2tleS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZSldID0gb2JqW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIG5ld09iajtcbn1cblxudmFyIHVuaXRzID0gYWRkQ2FtZWxDYXNlZFZlcnNpb24oZGVmYXVsdFVuaXRzKTtcbi8qKlxuICogUmVjdXJzaXZlIGRlZXAgc3R5bGUgcGFzc2luZyBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGl0ZXJhdGUocHJvcCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB2YWx1ZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZVtpXSA9IGl0ZXJhdGUocHJvcCwgdmFsdWVbaV0sIG9wdGlvbnMpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgaWYgKHByb3AgPT09ICdmYWxsYmFja3MnKSB7XG4gICAgICBmb3IgKHZhciBpbm5lclByb3AgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFsdWVbaW5uZXJQcm9wXSA9IGl0ZXJhdGUoaW5uZXJQcm9wLCB2YWx1ZVtpbm5lclByb3BdLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgX2lubmVyUHJvcCBpbiB2YWx1ZSkge1xuICAgICAgICB2YWx1ZVtfaW5uZXJQcm9wXSA9IGl0ZXJhdGUocHJvcCArIFwiLVwiICsgX2lubmVyUHJvcCwgdmFsdWVbX2lubmVyUHJvcF0sIG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWx1ZSkgPT09IGZhbHNlKSB7XG4gICAgdmFyIHVuaXQgPSBvcHRpb25zW3Byb3BdIHx8IHVuaXRzW3Byb3BdOyAvLyBBZGQgdGhlIHVuaXQgaWYgYXZhaWxhYmxlLCBleGNlcHQgZm9yIHRoZSBzcGVjaWFsIGNhc2Ugb2YgMHB4LlxuXG4gICAgaWYgKHVuaXQgJiYgISh2YWx1ZSA9PT0gMCAmJiB1bml0ID09PSBweCkpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdW5pdCA9PT0gJ2Z1bmN0aW9uJyA/IHVuaXQodmFsdWUpLnRvU3RyaW5nKCkgOiBcIlwiICsgdmFsdWUgKyB1bml0O1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBBZGQgdW5pdCB0byBudW1lcmljIHZhbHVlcy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRlZmF1bHRVbml0KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBjYW1lbENhc2VkT3B0aW9ucyA9IGFkZENhbWVsQ2FzZWRWZXJzaW9uKG9wdGlvbnMpO1xuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgc3R5bGVbcHJvcF0gPSBpdGVyYXRlKHByb3AsIHN0eWxlW3Byb3BdLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0eWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gb25DaGFuZ2VWYWx1ZSh2YWx1ZSwgcHJvcCkge1xuICAgIHJldHVybiBpdGVyYXRlKHByb3AsIHZhbHVlLCBjYW1lbENhc2VkT3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBvblByb2Nlc3NTdHlsZSxcbiAgICBvbkNoYW5nZVZhbHVlOiBvbkNoYW5nZVZhbHVlXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmF1bHRVbml0O1xuIiwiaW1wb3J0IGlzSW5Ccm93c2VyIGZyb20gJ2lzLWluLWJyb3dzZXInO1xuaW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSc7XG5cbi8vIEV4cG9ydCBqYXZhc2NyaXB0IHN0eWxlIGFuZCBjc3Mgc3R5bGUgdmVuZG9yIHByZWZpeGVzLlxudmFyIGpzID0gJyc7XG52YXIgY3NzID0gJyc7XG52YXIgdmVuZG9yID0gJyc7XG52YXIgYnJvd3NlciA9ICcnO1xudmFyIGlzVG91Y2ggPSBpc0luQnJvd3NlciAmJiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7IC8vIFdlIHNob3VsZCBub3QgZG8gYW55dGhpbmcgaWYgcmVxdWlyZWQgc2VydmVyc2lkZS5cblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIC8vIE9yZGVyIG1hdHRlcnMuIFdlIG5lZWQgdG8gY2hlY2sgV2Via2l0IHRoZSBsYXN0IG9uZSBiZWNhdXNlXG4gIC8vIG90aGVyIHZlbmRvcnMgdXNlIHRvIGFkZCBXZWJraXQgcHJlZml4ZXMgdG8gc29tZSBwcm9wZXJ0aWVzXG4gIHZhciBqc0Nzc01hcCA9IHtcbiAgICBNb3o6ICctbW96LScsXG4gICAgbXM6ICctbXMtJyxcbiAgICBPOiAnLW8tJyxcbiAgICBXZWJraXQ6ICctd2Via2l0LSdcbiAgfTtcblxuICB2YXIgX2RvY3VtZW50JGNyZWF0ZUVsZW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpLFxuICAgICAgc3R5bGUgPSBfZG9jdW1lbnQkY3JlYXRlRWxlbWUuc3R5bGU7XG5cbiAgdmFyIHRlc3RQcm9wID0gJ1RyYW5zZm9ybSc7XG5cbiAgZm9yICh2YXIga2V5IGluIGpzQ3NzTWFwKSB7XG4gICAgaWYgKGtleSArIHRlc3RQcm9wIGluIHN0eWxlKSB7XG4gICAgICBqcyA9IGtleTtcbiAgICAgIGNzcyA9IGpzQ3NzTWFwW2tleV07XG4gICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gQ29ycmVjdGx5IGRldGVjdCB0aGUgRWRnZSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnbXNIeXBoZW5zJyBpbiBzdHlsZSkge1xuICAgIGpzID0gJ21zJztcbiAgICBjc3MgPSBqc0Nzc01hcC5tcztcbiAgICBicm93c2VyID0gJ2VkZ2UnO1xuICB9IC8vIENvcnJlY3RseSBkZXRlY3QgdGhlIFNhZmFyaSBicm93c2VyLlxuXG5cbiAgaWYgKGpzID09PSAnV2Via2l0JyAmJiAnLWFwcGxlLXRyYWlsaW5nLXdvcmQnIGluIHN0eWxlKSB7XG4gICAgdmVuZG9yID0gJ2FwcGxlJztcbiAgfVxufVxuLyoqXG4gKiBWZW5kb3IgcHJlZml4IHN0cmluZyBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci5cbiAqXG4gKiBAdHlwZSB7e2pzOiBTdHJpbmcsIGNzczogU3RyaW5nLCB2ZW5kb3I6IFN0cmluZywgYnJvd3NlcjogU3RyaW5nfX1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG52YXIgcHJlZml4ID0ge1xuICBqczoganMsXG4gIGNzczogY3NzLFxuICB2ZW5kb3I6IHZlbmRvcixcbiAgYnJvd3NlcjogYnJvd3NlcixcbiAgaXNUb3VjaDogaXNUb3VjaFxufTtcblxuLyoqXG4gKiBUZXN0IGlmIGEga2V5ZnJhbWUgYXQtcnVsZSBzaG91bGQgYmUgcHJlZml4ZWQgb3Igbm90XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHZlbmRvciBwcmVmaXggc3RyaW5nIGZvciB0aGUgY3VycmVudCBicm93c2VyLlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0ZWRLZXlmcmFtZXMoa2V5KSB7XG4gIC8vIEtleWZyYW1lcyBpcyBhbHJlYWR5IHByZWZpeGVkLiBlLmcuIGtleSA9ICdALXdlYmtpdC1rZXlmcmFtZXMgYSdcbiAgaWYgKGtleVsxXSA9PT0gJy0nKSByZXR1cm4ga2V5OyAvLyBObyBuZWVkIHRvIHByZWZpeCBJRS9FZGdlLiBPbGRlciBicm93c2VycyB3aWxsIGlnbm9yZSB1bnN1cHBvcnRlZCBydWxlcy5cbiAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWtleWZyYW1lc1xuXG4gIGlmIChwcmVmaXguanMgPT09ICdtcycpIHJldHVybiBrZXk7XG4gIHJldHVybiBcIkBcIiArIHByZWZpeC5jc3MgKyBcImtleWZyYW1lc1wiICsga2V5LnN1YnN0cigxMCk7XG59XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1hcHBlYXJhbmNlXG5cbnZhciBhcHBlYXJlbmNlID0ge1xuICBub1ByZWZpbGw6IFsnYXBwZWFyYW5jZSddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnYXBwZWFyYW5jZScpIHJldHVybiBmYWxzZTtcbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1jb2xvci1hZGp1c3RcblxudmFyIGNvbG9yQWRqdXN0ID0ge1xuICBub1ByZWZpbGw6IFsnY29sb3ItYWRqdXN0J10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICdjb2xvci1hZGp1c3QnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHJldHVybiBwcmVmaXguY3NzICsgXCJwcmludC1cIiArIHByb3A7XG4gICAgcmV0dXJuIHByb3A7XG4gIH1cbn07XG5cbnZhciByZWdFeHAgPSAvWy1cXHNdKyguKT8vZztcbi8qKlxuICogUmVwbGFjZXMgdGhlIGxldHRlciB3aXRoIHRoZSBjYXBpdGFsIGxldHRlclxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtYXRjaFxuICogQHBhcmFtIHtTdHJpbmd9IGNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHRvVXBwZXIobWF0Y2gsIGMpIHtcbiAgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJztcbn1cbi8qKlxuICogQ29udmVydCBkYXNoIHNlcGFyYXRlZCBzdHJpbmdzIHRvIGNhbWVsLWNhc2VkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cblxuZnVuY3Rpb24gY2FtZWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWdFeHAsIHRvVXBwZXIpO1xufVxuXG4vKipcbiAqIENvbnZlcnQgZGFzaCBzZXBhcmF0ZWQgc3RyaW5ncyB0byBwYXNjYWwgY2FzZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFzY2FsaXplKHN0cikge1xuICByZXR1cm4gY2FtZWxpemUoXCItXCIgKyBzdHIpO1xufVxuXG4vLyBidXQgd2UgY2FuIHVzZSBhIGxvbmdoYW5kIHByb3BlcnR5IGluc3RlYWQuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bWFza1xuXG52YXIgbWFzayA9IHtcbiAgbm9QcmVmaWxsOiBbJ21hc2snXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXm1hc2svLnRlc3QocHJvcCkpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdXZWJraXQnKSB7XG4gICAgICB2YXIgbG9uZ2hhbmQgPSAnbWFzay1pbWFnZSc7XG5cbiAgICAgIGlmIChjYW1lbGl6ZShsb25naGFuZCkgaW4gc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcmVmaXguanMgKyBwYXNjYWxpemUobG9uZ2hhbmQpIGluIHN0eWxlKSB7XG4gICAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRleHQtb3JpZW50YXRpb25cblxudmFyIHRleHRPcmllbnRhdGlvbiA9IHtcbiAgbm9QcmVmaWxsOiBbJ3RleHQtb3JpZW50YXRpb24nXSxcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RleHQtb3JpZW50YXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJyAmJiAhcHJlZml4LmlzVG91Y2gpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxuLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXRyYW5zZm9ybVxuXG52YXIgdHJhbnNmb3JtID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNmb3JtJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSwgb3B0aW9ucykge1xuICAgIGlmIChwcm9wICE9PSAndHJhbnNmb3JtJykgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKG9wdGlvbnMudHJhbnNmb3JtKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD10cmFuc2l0aW9uXG5cbnZhciB0cmFuc2l0aW9uID0ge1xuICBub1ByZWZpbGw6IFsndHJhbnNpdGlvbiddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUsIG9wdGlvbnMpIHtcbiAgICBpZiAocHJvcCAhPT0gJ3RyYW5zaXRpb24nKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAob3B0aW9ucy50cmFuc2l0aW9uKSB7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJlZml4LmNzcyArIHByb3A7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD13cml0aW5nLW1vZGVcblxudmFyIHdyaXRpbmdNb2RlID0ge1xuICBub1ByZWZpbGw6IFsnd3JpdGluZy1tb2RlJ10sXG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKSB7XG4gICAgaWYgKHByb3AgIT09ICd3cml0aW5nLW1vZGUnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnV2Via2l0JyB8fCBwcmVmaXguanMgPT09ICdtcycgJiYgcHJlZml4LmJyb3dzZXIgIT09ICdlZGdlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9dXNlci1zZWxlY3RcblxudmFyIHVzZXJTZWxlY3QgPSB7XG4gIG5vUHJlZmlsbDogWyd1c2VyLXNlbGVjdCddLFxuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAndXNlci1zZWxlY3QnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96JyB8fCBwcmVmaXguanMgPT09ICdtcycgfHwgcHJlZml4LnZlbmRvciA9PT0gJ2FwcGxlJykge1xuICAgICAgcmV0dXJuIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9bXVsdGljb2x1bW5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3N0Y3NzL2F1dG9wcmVmaXhlci9pc3N1ZXMvNDkxXG4vLyBodHRwczovL2dpdGh1Yi5jb20vcG9zdGNzcy9hdXRvcHJlZml4ZXIvaXNzdWVzLzE3N1xuXG52YXIgYnJlYWtQcm9wc09sZCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlKSB7XG4gICAgaWYgKCEvXmJyZWFrLS8udGVzdChwcm9wKSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ1dlYmtpdCcpIHtcbiAgICAgIHZhciBqc1Byb3AgPSBcIldlYmtpdENvbHVtblwiICsgcGFzY2FsaXplKHByb3ApO1xuICAgICAgcmV0dXJuIGpzUHJvcCBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBcImNvbHVtbi1cIiArIHByb3AgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnTW96Jykge1xuICAgICAgdmFyIF9qc1Byb3AgPSBcInBhZ2VcIiArIHBhc2NhbGl6ZShwcm9wKTtcblxuICAgICAgcmV0dXJuIF9qc1Byb3AgaW4gc3R5bGUgPyBcInBhZ2UtXCIgKyBwcm9wIDogZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3Bvc3Rjc3MvYXV0b3ByZWZpeGVyL2lzc3Vlcy8zMjQuXG5cbnZhciBpbmxpbmVMb2dpY2FsT2xkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICBpZiAoIS9eKGJvcmRlcnxtYXJnaW58cGFkZGluZyktaW5saW5lLy50ZXN0KHByb3ApKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHByZWZpeC5qcyA9PT0gJ01veicpIHJldHVybiBwcm9wO1xuICAgIHZhciBuZXdQcm9wID0gcHJvcC5yZXBsYWNlKCctaW5saW5lJywgJycpO1xuICAgIHJldHVybiBwcmVmaXguanMgKyBwYXNjYWxpemUobmV3UHJvcCkgaW4gc3R5bGUgPyBwcmVmaXguY3NzICsgbmV3UHJvcCA6IGZhbHNlO1xuICB9XG59O1xuXG4vLyBDYW1lbGl6YXRpb24gaXMgcmVxdWlyZWQgYmVjYXVzZSB3ZSBjYW4ndCB0ZXN0IHVzaW5nLlxuLy8gQ1NTIHN5bnRheCBmb3IgZS5nLiBpbiBGRi5cblxudmFyIHVucHJlZml4ZWQgPSB7XG4gIHN1cHBvcnRlZFByb3BlcnR5OiBmdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBzdHlsZSkge1xuICAgIHJldHVybiBjYW1lbGl6ZShwcm9wKSBpbiBzdHlsZSA/IHByb3AgOiBmYWxzZTtcbiAgfVxufTtcblxudmFyIHByZWZpeGVkID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgcGFzY2FsaXplZCA9IHBhc2NhbGl6ZShwcm9wKTsgLy8gUmV0dXJuIGN1c3RvbSBDU1MgdmFyaWFibGUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nKSByZXR1cm4gcHJvcDsgLy8gUmV0dXJuIGFscmVhZHkgcHJlZml4ZWQgdmFsdWUgd2l0aG91dCBwcmVmaXhpbmcuXG5cbiAgICBpZiAocHJvcFswXSA9PT0gJy0nICYmIHByb3BbMV0gPT09ICctJykgcmV0dXJuIHByb3A7XG4gICAgaWYgKHByZWZpeC5qcyArIHBhc2NhbGl6ZWQgaW4gc3R5bGUpIHJldHVybiBwcmVmaXguY3NzICsgcHJvcDsgLy8gVHJ5IHdlYmtpdCBmYWxsYmFjay5cblxuICAgIGlmIChwcmVmaXguanMgIT09ICdXZWJraXQnICYmIFwiV2Via2l0XCIgKyBwYXNjYWxpemVkIGluIHN0eWxlKSByZXR1cm4gXCItd2Via2l0LVwiICsgcHJvcDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn07XG5cbi8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zY3JvbGwtc25hcFxuXG52YXIgc2Nyb2xsU25hcCA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3ApIHtcbiAgICBpZiAocHJvcC5zdWJzdHJpbmcoMCwgMTEpICE9PSAnc2Nyb2xsLXNuYXAnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAocHJlZml4LmpzID09PSAnbXMnKSB7XG4gICAgICByZXR1cm4gXCJcIiArIHByZWZpeC5jc3MgKyBwcm9wO1xuICAgIH1cblxuICAgIHJldHVybiBwcm9wO1xuICB9XG59O1xuXG4vLyBodHRwczovL2Nhbml1c2UuY29tLyNzZWFyY2g9b3ZlcnNjcm9sbC1iZWhhdmlvclxuXG52YXIgb3ZlcnNjcm9sbEJlaGF2aW9yID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCkge1xuICAgIGlmIChwcm9wICE9PSAnb3ZlcnNjcm9sbC1iZWhhdmlvcicpIHJldHVybiBmYWxzZTtcblxuICAgIGlmIChwcmVmaXguanMgPT09ICdtcycpIHtcbiAgICAgIHJldHVybiBwcmVmaXguY3NzICsgXCJzY3JvbGwtY2hhaW5pbmdcIjtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcDtcbiAgfVxufTtcblxudmFyIHByb3BNYXAgPSB7XG4gICdmbGV4LWdyb3cnOiAnZmxleC1wb3NpdGl2ZScsXG4gICdmbGV4LXNocmluayc6ICdmbGV4LW5lZ2F0aXZlJyxcbiAgJ2ZsZXgtYmFzaXMnOiAnZmxleC1wcmVmZXJyZWQtc2l6ZScsXG4gICdqdXN0aWZ5LWNvbnRlbnQnOiAnZmxleC1wYWNrJyxcbiAgb3JkZXI6ICdmbGV4LW9yZGVyJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2ZsZXgtYWxpZ24nLFxuICAnYWxpZ24tY29udGVudCc6ICdmbGV4LWxpbmUtcGFjaycgLy8gJ2FsaWduLXNlbGYnIGlzIGhhbmRsZWQgYnkgJ2FsaWduLXNlbGYnIHBsdWdpbi5cblxufTsgLy8gU3VwcG9ydCBvbGQgZmxleCBzcGVjIGZyb20gMjAxMi5cblxudmFyIGZsZXgyMDEyID0ge1xuICBzdXBwb3J0ZWRQcm9wZXJ0eTogZnVuY3Rpb24gc3VwcG9ydGVkUHJvcGVydHkocHJvcCwgc3R5bGUpIHtcbiAgICB2YXIgbmV3UHJvcCA9IHByb3BNYXBbcHJvcF07XG4gICAgaWYgKCFuZXdQcm9wKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gIH1cbn07XG5cbnZhciBwcm9wTWFwJDEgPSB7XG4gIGZsZXg6ICdib3gtZmxleCcsXG4gICdmbGV4LWdyb3cnOiAnYm94LWZsZXgnLFxuICAnZmxleC1kaXJlY3Rpb24nOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICBvcmRlcjogJ2JveC1vcmRpbmFsLWdyb3VwJyxcbiAgJ2FsaWduLWl0ZW1zJzogJ2JveC1hbGlnbicsXG4gICdmbGV4LWZsb3cnOiBbJ2JveC1vcmllbnQnLCAnYm94LWRpcmVjdGlvbiddLFxuICAnanVzdGlmeS1jb250ZW50JzogJ2JveC1wYWNrJ1xufTtcbnZhciBwcm9wS2V5cyA9IE9iamVjdC5rZXlzKHByb3BNYXAkMSk7XG5cbnZhciBwcmVmaXhDc3MgPSBmdW5jdGlvbiBwcmVmaXhDc3MocCkge1xuICByZXR1cm4gcHJlZml4LmNzcyArIHA7XG59OyAvLyBTdXBwb3J0IG9sZCBmbGV4IHNwZWMgZnJvbSAyMDA5LlxuXG5cbnZhciBmbGV4MjAwOSA9IHtcbiAgc3VwcG9ydGVkUHJvcGVydHk6IGZ1bmN0aW9uIHN1cHBvcnRlZFByb3BlcnR5KHByb3AsIHN0eWxlLCBfcmVmKSB7XG4gICAgdmFyIG11bHRpcGxlID0gX3JlZi5tdWx0aXBsZTtcblxuICAgIGlmIChwcm9wS2V5cy5pbmRleE9mKHByb3ApID4gLTEpIHtcbiAgICAgIHZhciBuZXdQcm9wID0gcHJvcE1hcCQxW3Byb3BdO1xuXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkobmV3UHJvcCkpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wKSBpbiBzdHlsZSA/IHByZWZpeC5jc3MgKyBuZXdQcm9wIDogZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghbXVsdGlwbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghKHByZWZpeC5qcyArIHBhc2NhbGl6ZShuZXdQcm9wWzBdKSBpbiBzdHlsZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld1Byb3AubWFwKHByZWZpeENzcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG4vLyBwbHVnaW5zID0gW1xuLy8gICAuLi5wbHVnaW5zLFxuLy8gICAgYnJlYWtQcm9wc09sZCxcbi8vICAgIGlubGluZUxvZ2ljYWxPbGQsXG4vLyAgICB1bnByZWZpeGVkLFxuLy8gICAgcHJlZml4ZWQsXG4vLyAgICBzY3JvbGxTbmFwLFxuLy8gICAgZmxleDIwMTIsXG4vLyAgICBmbGV4MjAwOVxuLy8gXVxuLy8gUGx1Z2lucyB3aXRob3V0ICdub1ByZWZpbGwnIHZhbHVlLCBnb2luZyBsYXN0LlxuLy8gJ2ZsZXgtKicgcGx1Z2lucyBzaG91bGQgYmUgYXQgdGhlIGJvdHRvbS5cbi8vICdmbGV4MjAwOScgZ29pbmcgYWZ0ZXIgJ2ZsZXgyMDEyJy5cbi8vICdwcmVmaXhlZCcgZ29pbmcgYWZ0ZXIgJ3VucHJlZml4ZWQnXG5cbnZhciBwbHVnaW5zID0gW2FwcGVhcmVuY2UsIGNvbG9yQWRqdXN0LCBtYXNrLCB0ZXh0T3JpZW50YXRpb24sIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgd3JpdGluZ01vZGUsIHVzZXJTZWxlY3QsIGJyZWFrUHJvcHNPbGQsIGlubGluZUxvZ2ljYWxPbGQsIHVucHJlZml4ZWQsIHByZWZpeGVkLCBzY3JvbGxTbmFwLCBvdmVyc2Nyb2xsQmVoYXZpb3IsIGZsZXgyMDEyLCBmbGV4MjAwOV07XG52YXIgcHJvcGVydHlEZXRlY3RvcnMgPSBwbHVnaW5zLmZpbHRlcihmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pLm1hcChmdW5jdGlvbiAocCkge1xuICByZXR1cm4gcC5zdXBwb3J0ZWRQcm9wZXJ0eTtcbn0pO1xudmFyIG5vUHJlZmlsbCA9IHBsdWdpbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7XG4gIHJldHVybiBwLm5vUHJlZmlsbDtcbn0pLnJlZHVjZShmdW5jdGlvbiAoYSwgcCkge1xuICBhLnB1c2guYXBwbHkoYSwgX3RvQ29uc3VtYWJsZUFycmF5KHAubm9QcmVmaWxsKSk7XG4gIHJldHVybiBhO1xufSwgW10pO1xuXG52YXIgZWw7XG52YXIgY2FjaGUgPSB7fTtcblxuaWYgKGlzSW5Ccm93c2VyKSB7XG4gIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBXZSB0ZXN0IGV2ZXJ5IHByb3BlcnR5IG9uIHZlbmRvciBwcmVmaXggcmVxdWlyZW1lbnQuXG4gIC8vIE9uY2UgdGVzdGVkLCByZXN1bHQgaXMgY2FjaGVkLiBJdCBnaXZlcyB1cyB1cCB0byA3MCUgcGVyZiBib29zdC5cbiAgLy8gaHR0cDovL2pzcGVyZi5jb20vZWxlbWVudC1zdHlsZS1vYmplY3QtYWNjZXNzLXZzLXBsYWluLW9iamVjdFxuICAvL1xuICAvLyBQcmVmaWxsIGNhY2hlIHdpdGgga25vd24gY3NzIHByb3BlcnRpZXMgdG8gcmVkdWNlIGFtb3VudCBvZlxuICAvLyBwcm9wZXJ0aWVzIHdlIG5lZWQgdG8gZmVhdHVyZSB0ZXN0IGF0IHJ1bnRpbWUuXG4gIC8vIGh0dHA6Ly9kYXZpZHdhbHNoLm5hbWUvdmVuZG9yLXByZWZpeFxuXG4gIHZhciBjb21wdXRlZCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgJycpO1xuXG4gIGZvciAodmFyIGtleSQxIGluIGNvbXB1dGVkKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuICAgIGlmICghaXNOYU4oa2V5JDEpKSBjYWNoZVtjb21wdXRlZFtrZXkkMV1dID0gY29tcHV0ZWRba2V5JDFdO1xuICB9IC8vIFByb3BlcnRpZXMgdGhhdCBjYW5ub3QgYmUgY29ycmVjdGx5IGRldGVjdGVkIHVzaW5nIHRoZVxuICAvLyBjYWNoZSBwcmVmaWxsIG1ldGhvZC5cblxuXG4gIG5vUHJlZmlsbC5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIGRlbGV0ZSBjYWNoZVt4XTtcbiAgfSk7XG59XG4vKipcbiAqIFRlc3QgaWYgYSBwcm9wZXJ0eSBpcyBzdXBwb3J0ZWQsIHJldHVybnMgc3VwcG9ydGVkIHByb3BlcnR5IHdpdGggdmVuZG9yXG4gKiBwcmVmaXggaWYgcmVxdWlyZWQuIFJldHVybnMgYGZhbHNlYCBpZiBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wIGRhc2ggc2VwYXJhdGVkXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuXG5mdW5jdGlvbiBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICAvLyBGb3Igc2VydmVyLXNpZGUgcmVuZGVyaW5nLlxuICBpZiAoIWVsKSByZXR1cm4gcHJvcDsgLy8gUmVtb3ZlIGNhY2hlIGZvciBiZW5jaG1hcmsgdGVzdHMgb3IgcmV0dXJuIHByb3BlcnR5IGZyb20gdGhlIGNhY2hlLlxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ2JlbmNobWFyaycgJiYgY2FjaGVbcHJvcF0gIT0gbnVsbCkge1xuICAgIHJldHVybiBjYWNoZVtwcm9wXTtcbiAgfSAvLyBDaGVjayBpZiAndHJhbnNpdGlvbicgb3IgJ3RyYW5zZm9ybScgbmF0aXZlbHkgc3VwcG9ydGVkIGluIGJyb3dzZXIuXG5cblxuICBpZiAocHJvcCA9PT0gJ3RyYW5zaXRpb24nIHx8IHByb3AgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgb3B0aW9uc1twcm9wXSA9IHByb3AgaW4gZWwuc3R5bGU7XG4gIH0gLy8gRmluZCBhIHBsdWdpbiBmb3IgY3VycmVudCBwcmVmaXggcHJvcGVydHkuXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BlcnR5RGV0ZWN0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgY2FjaGVbcHJvcF0gPSBwcm9wZXJ0eURldGVjdG9yc1tpXShwcm9wLCBlbC5zdHlsZSwgb3B0aW9ucyk7IC8vIEJyZWFrIGxvb3AsIGlmIHZhbHVlIGZvdW5kLlxuXG4gICAgaWYgKGNhY2hlW3Byb3BdKSBicmVhaztcbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG4gIC8vIEZpcmVmb3ggY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgZm9yIGludmFsaWQgcHJvcGVydGllcywgZS5nLiwgXCIwXCIuXG5cblxuICB0cnkge1xuICAgIGVsLnN0eWxlW3Byb3BdID0gJyc7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZVtwcm9wXTtcbn1cblxudmFyIGNhY2hlJDEgPSB7fTtcbnZhciB0cmFuc2l0aW9uUHJvcGVydGllcyA9IHtcbiAgdHJhbnNpdGlvbjogMSxcbiAgJ3RyYW5zaXRpb24tcHJvcGVydHknOiAxLFxuICAnLXdlYmtpdC10cmFuc2l0aW9uJzogMSxcbiAgJy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eSc6IDFcbn07XG52YXIgdHJhbnNQcm9wc1JlZ0V4cCA9IC8oXlxccypbXFx3LV0rKXwsIChcXHMqW1xcdy1dKykoPyFbXigpXSpcXCkpL2c7XG52YXIgZWwkMTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSB0cmFuc2l0aW9uL3RyYW5zZm9ybSBpZiBuZWVkZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG1hdGNoXG4gKiBAcGFyYW0ge1N0cmluZ30gcDFcbiAqIEBwYXJhbSB7U3RyaW5nfSBwMlxuICogQHJldHVybiB7U3RyaW5nfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcHJlZml4VHJhbnNpdGlvbkNhbGxiYWNrKG1hdGNoLCBwMSwgcDIpIHtcbiAgaWYgKHAxID09PSAndmFyJykgcmV0dXJuICd2YXInO1xuICBpZiAocDEgPT09ICdhbGwnKSByZXR1cm4gJ2FsbCc7XG4gIGlmIChwMiA9PT0gJ2FsbCcpIHJldHVybiAnLCBhbGwnO1xuICB2YXIgcHJlZml4ZWRWYWx1ZSA9IHAxID8gc3VwcG9ydGVkUHJvcGVydHkocDEpIDogXCIsIFwiICsgc3VwcG9ydGVkUHJvcGVydHkocDIpO1xuICBpZiAoIXByZWZpeGVkVmFsdWUpIHJldHVybiBwMSB8fCBwMjtcbiAgcmV0dXJuIHByZWZpeGVkVmFsdWU7XG59XG5cbmlmIChpc0luQnJvd3NlcikgZWwkMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbi8qKlxuICogUmV0dXJucyBwcmVmaXhlZCB2YWx1ZSBpZiBuZWVkZWQuIFJldHVybnMgYGZhbHNlYCBpZiB2YWx1ZSBpcyBub3Qgc3VwcG9ydGVkLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydGVkVmFsdWUocHJvcGVydHksIHZhbHVlKSB7XG4gIC8vIEZvciBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuXG4gIHZhciBwcmVmaXhlZFZhbHVlID0gdmFsdWU7XG4gIGlmICghZWwkMSB8fCBwcm9wZXJ0eSA9PT0gJ2NvbnRlbnQnKSByZXR1cm4gdmFsdWU7IC8vIEl0IGlzIGEgc3RyaW5nIG9yIGEgbnVtYmVyIGFzIGEgc3RyaW5nIGxpa2UgJzEnLlxuICAvLyBXZSB3YW50IG9ubHkgcHJlZml4YWJsZSB2YWx1ZXMgaGVyZS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xuXG4gIGlmICh0eXBlb2YgcHJlZml4ZWRWYWx1ZSAhPT0gJ3N0cmluZycgfHwgIWlzTmFOKHBhcnNlSW50KHByZWZpeGVkVmFsdWUsIDEwKSkpIHtcbiAgICByZXR1cm4gcHJlZml4ZWRWYWx1ZTtcbiAgfSAvLyBDcmVhdGUgY2FjaGUga2V5IGZvciBjdXJyZW50IHZhbHVlLlxuXG5cbiAgdmFyIGNhY2hlS2V5ID0gcHJvcGVydHkgKyBwcmVmaXhlZFZhbHVlOyAvLyBSZW1vdmUgY2FjaGUgZm9yIGJlbmNobWFyayB0ZXN0cyBvciByZXR1cm4gdmFsdWUgZnJvbSBjYWNoZS5cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdiZW5jaG1hcmsnICYmIGNhY2hlJDFbY2FjaGVLZXldICE9IG51bGwpIHtcbiAgICByZXR1cm4gY2FjaGUkMVtjYWNoZUtleV07XG4gIH0gLy8gSUUgY2FuIGV2ZW4gdGhyb3cgYW4gZXJyb3IgaW4gc29tZSBjYXNlcywgZm9yIGUuZy4gc3R5bGUuY29udGVudCA9ICdiYXInLlxuXG5cbiAgdHJ5IHtcbiAgICAvLyBUZXN0IHZhbHVlIGFzIGl0IGlzLlxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG4gICAgY2FjaGUkMVtjYWNoZUtleV0gPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgJ3RyYW5zaXRpb24nIG9yICd0cmFuc2l0aW9uLXByb3BlcnR5JyBwcm9wZXJ0eS5cblxuXG4gIGlmICh0cmFuc2l0aW9uUHJvcGVydGllc1twcm9wZXJ0eV0pIHtcbiAgICBwcmVmaXhlZFZhbHVlID0gcHJlZml4ZWRWYWx1ZS5yZXBsYWNlKHRyYW5zUHJvcHNSZWdFeHAsIHByZWZpeFRyYW5zaXRpb25DYWxsYmFjayk7XG4gIH0gZWxzZSBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgLy8gVmFsdWUgd2l0aCBhIHZlbmRvciBwcmVmaXguXG4gICAgcHJlZml4ZWRWYWx1ZSA9IHByZWZpeC5jc3MgKyBwcmVmaXhlZFZhbHVlOyAvLyBIYXJkY29kZSB0ZXN0IHRvIGNvbnZlcnQgXCJmbGV4XCIgdG8gXCItbXMtZmxleGJveFwiIGZvciBJRTEwLlxuXG4gICAgaWYgKHByZWZpeGVkVmFsdWUgPT09ICctbXMtZmxleCcpIGVsJDEuc3R5bGVbcHJvcGVydHldID0gJy1tcy1mbGV4Ym94JzsgLy8gVGVzdCBwcmVmaXhlZCB2YWx1ZS5cblxuICAgIGVsJDEuc3R5bGVbcHJvcGVydHldID0gcHJlZml4ZWRWYWx1ZTsgLy8gUmV0dXJuIGZhbHNlIGlmIHZhbHVlIG5vdCBzdXBwb3J0ZWQuXG5cbiAgICBpZiAoZWwkMS5zdHlsZVtwcm9wZXJ0eV0gPT09ICcnKSB7XG4gICAgICBjYWNoZSQxW2NhY2hlS2V5XSA9IGZhbHNlO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSAvLyBSZXNldCBzdHlsZXMgZm9yIGN1cnJlbnQgcHJvcGVydHkuXG5cblxuICBlbCQxLnN0eWxlW3Byb3BlcnR5XSA9ICcnOyAvLyBXcml0ZSBjdXJyZW50IHZhbHVlIHRvIGNhY2hlLlxuXG4gIGNhY2hlJDFbY2FjaGVLZXldID0gcHJlZml4ZWRWYWx1ZTtcbiAgcmV0dXJuIGNhY2hlJDFbY2FjaGVLZXldO1xufVxuXG5leHBvcnQgeyBwcmVmaXgsIHN1cHBvcnRlZEtleWZyYW1lcywgc3VwcG9ydGVkUHJvcGVydHksIHN1cHBvcnRlZFZhbHVlIH07XG4iLCJpbXBvcnQgeyBzdXBwb3J0ZWRLZXlmcmFtZXMsIHN1cHBvcnRlZFZhbHVlLCBzdXBwb3J0ZWRQcm9wZXJ0eSB9IGZyb20gJ2Nzcy12ZW5kb3InO1xuaW1wb3J0IHsgdG9Dc3NWYWx1ZSB9IGZyb20gJ2pzcyc7XG5cbi8qKlxuICogQWRkIHZlbmRvciBwcmVmaXggdG8gYSBwcm9wZXJ0eSBuYW1lIHdoZW4gbmVlZGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24ganNzVmVuZG9yUHJlZml4ZXIoKSB7XG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1J1bGUocnVsZSkge1xuICAgIGlmIChydWxlLnR5cGUgPT09ICdrZXlmcmFtZXMnKSB7XG4gICAgICB2YXIgYXRSdWxlID0gcnVsZTtcbiAgICAgIGF0UnVsZS5hdCA9IHN1cHBvcnRlZEtleWZyYW1lcyhhdFJ1bGUuYXQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWZpeFN0eWxlKHN0eWxlKSB7XG4gICAgZm9yICh2YXIgcHJvcCBpbiBzdHlsZSkge1xuICAgICAgdmFyIHZhbHVlID0gc3R5bGVbcHJvcF07XG5cbiAgICAgIGlmIChwcm9wID09PSAnZmFsbGJhY2tzJyAmJiBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBzdHlsZVtwcm9wXSA9IHZhbHVlLm1hcChwcmVmaXhTdHlsZSk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlUHJvcCA9IGZhbHNlO1xuICAgICAgdmFyIHN1cHBvcnRlZFByb3AgPSBzdXBwb3J0ZWRQcm9wZXJ0eShwcm9wKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRQcm9wICYmIHN1cHBvcnRlZFByb3AgIT09IHByb3ApIGNoYW5nZVByb3AgPSB0cnVlO1xuICAgICAgdmFyIGNoYW5nZVZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc3VwcG9ydGVkVmFsdWUkMSA9IHN1cHBvcnRlZFZhbHVlKHN1cHBvcnRlZFByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKTtcbiAgICAgIGlmIChzdXBwb3J0ZWRWYWx1ZSQxICYmIHN1cHBvcnRlZFZhbHVlJDEgIT09IHZhbHVlKSBjaGFuZ2VWYWx1ZSA9IHRydWU7XG5cbiAgICAgIGlmIChjaGFuZ2VQcm9wIHx8IGNoYW5nZVZhbHVlKSB7XG4gICAgICAgIGlmIChjaGFuZ2VQcm9wKSBkZWxldGUgc3R5bGVbcHJvcF07XG4gICAgICAgIHN0eWxlW3N1cHBvcnRlZFByb3AgfHwgcHJvcF0gPSBzdXBwb3J0ZWRWYWx1ZSQxIHx8IHZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uUHJvY2Vzc1N0eWxlKHN0eWxlLCBydWxlKSB7XG4gICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgIHJldHVybiBwcmVmaXhTdHlsZShzdHlsZSk7XG4gIH1cblxuICBmdW5jdGlvbiBvbkNoYW5nZVZhbHVlKHZhbHVlLCBwcm9wKSB7XG4gICAgcmV0dXJuIHN1cHBvcnRlZFZhbHVlKHByb3AsIHRvQ3NzVmFsdWUodmFsdWUpKSB8fCB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgb25Qcm9jZXNzUnVsZTogb25Qcm9jZXNzUnVsZSxcbiAgICBvblByb2Nlc3NTdHlsZTogb25Qcm9jZXNzU3R5bGUsXG4gICAgb25DaGFuZ2VWYWx1ZTogb25DaGFuZ2VWYWx1ZVxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBqc3NWZW5kb3JQcmVmaXhlcjtcbiIsIi8qKlxuICogU29ydCBwcm9wcyBieSBsZW5ndGguXG4gKi9cbmZ1bmN0aW9uIGpzc1Byb3BzU29ydCgpIHtcbiAgdmFyIHNvcnQgPSBmdW5jdGlvbiBzb3J0KHByb3AwLCBwcm9wMSkge1xuICAgIGlmIChwcm9wMC5sZW5ndGggPT09IHByb3AxLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHByb3AwID4gcHJvcDEgPyAxIDogLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3AwLmxlbmd0aCAtIHByb3AxLmxlbmd0aDtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIG9uUHJvY2Vzc1N0eWxlOiBmdW5jdGlvbiBvblByb2Nlc3NTdHlsZShzdHlsZSwgcnVsZSkge1xuICAgICAgaWYgKHJ1bGUudHlwZSAhPT0gJ3N0eWxlJykgcmV0dXJuIHN0eWxlO1xuICAgICAgdmFyIG5ld1N0eWxlID0ge307XG4gICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhzdHlsZSkuc29ydChzb3J0KTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdTdHlsZVtwcm9wc1tpXV0gPSBzdHlsZVtwcm9wc1tpXV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdTdHlsZTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGpzc1Byb3BzU29ydDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBjcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSBmcm9tICcuLi9jcmVhdGVHZW5lcmF0ZUNsYXNzTmFtZSc7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICdqc3MnO1xuaW1wb3J0IGpzc1ByZXNldCBmcm9tICcuLi9qc3NQcmVzZXQnOyAvLyBEZWZhdWx0IEpTUyBpbnN0YW5jZS5cblxudmFyIGpzcyA9IGNyZWF0ZShqc3NQcmVzZXQoKSk7IC8vIFVzZSBhIHNpbmdsZXRvbiBvciB0aGUgcHJvdmlkZWQgb25lIGJ5IHRoZSBjb250ZXh0LlxuLy9cbi8vIFRoZSBjb3VudGVyLWJhc2VkIGFwcHJvYWNoIGRvZXNuJ3QgdG9sZXJhdGUgYW55IG1pc3Rha2UuXG4vLyBJdCdzIG11Y2ggc2FmZXIgdG8gdXNlIHRoZSBzYW1lIGNvdW50ZXIgZXZlcnl3aGVyZS5cblxudmFyIGdlbmVyYXRlQ2xhc3NOYW1lID0gY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUoKTsgLy8gRXhwb3J0ZWQgZm9yIHRlc3QgcHVycG9zZXNcblxuZXhwb3J0IHZhciBzaGVldHNNYW5hZ2VyID0gbmV3IE1hcCgpO1xudmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICBkaXNhYmxlR2VuZXJhdGlvbjogZmFsc2UsXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBnZW5lcmF0ZUNsYXNzTmFtZSxcbiAganNzOiBqc3MsXG4gIHNoZWV0c0NhY2hlOiBudWxsLFxuICBzaGVldHNNYW5hZ2VyOiBzaGVldHNNYW5hZ2VyLFxuICBzaGVldHNSZWdpc3RyeTogbnVsbFxufTtcbmV4cG9ydCB2YXIgU3R5bGVzQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZGVmYXVsdE9wdGlvbnMpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBTdHlsZXNDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1N0eWxlc0NvbnRleHQnO1xufVxuXG52YXIgaW5qZWN0Rmlyc3ROb2RlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3R5bGVzUHJvdmlkZXIocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkaW5qZWN0Rmlyc3QgPSBwcm9wcy5pbmplY3RGaXJzdCxcbiAgICAgIGluamVjdEZpcnN0ID0gX3Byb3BzJGluamVjdEZpcnN0ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbmplY3RGaXJzdCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlR2VuZXJhdCA9IHByb3BzLmRpc2FibGVHZW5lcmF0aW9uLFxuICAgICAgZGlzYWJsZUdlbmVyYXRpb24gPSBfcHJvcHMkZGlzYWJsZUdlbmVyYXQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVHZW5lcmF0LFxuICAgICAgbG9jYWxPcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluamVjdEZpcnN0XCIsIFwiZGlzYWJsZUdlbmVyYXRpb25cIl0pO1xuXG4gIHZhciBvdXRlck9wdGlvbnMgPSBSZWFjdC51c2VDb250ZXh0KFN0eWxlc0NvbnRleHQpO1xuXG4gIHZhciBjb250ZXh0ID0gX2V4dGVuZHMoe30sIG91dGVyT3B0aW9ucywge1xuICAgIGRpc2FibGVHZW5lcmF0aW9uOiBkaXNhYmxlR2VuZXJhdGlvblxuICB9LCBsb2NhbE9wdGlvbnMpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnICYmICFjb250ZXh0LnNoZWV0c01hbmFnZXIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgbmVlZCB0byB1c2UgdGhlIFNlcnZlclN0eWxlU2hlZXRzIEFQSSB3aGVuIHJlbmRlcmluZyBvbiB0aGUgc2VydmVyLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKGNvbnRleHQuanNzLm9wdGlvbnMuaW5zZXJ0aW9uUG9pbnQgJiYgaW5qZWN0Rmlyc3QpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01hdGVyaWFsLVVJOiBZb3UgY2Fubm90IHVzZSBhIGN1c3RvbSBpbnNlcnRpb25Qb2ludCBhbmQgPFN0eWxlc0NvbnRleHQgaW5qZWN0Rmlyc3Q+IGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoaW5qZWN0Rmlyc3QgJiYgbG9jYWxPcHRpb25zLmpzcykge1xuICAgICAgY29uc29sZS5lcnJvcignTWF0ZXJpYWwtVUk6IFlvdSBjYW5ub3QgdXNlIHRoZSBqc3MgYW5kIGluamVjdEZpcnN0IHByb3BzIGF0IHRoZSBzYW1lIHRpbWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250ZXh0Lmpzcy5vcHRpb25zLmluc2VydGlvblBvaW50ICYmIGluamVjdEZpcnN0ICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKCFpbmplY3RGaXJzdE5vZGUpIHtcbiAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZDtcbiAgICAgIGluamVjdEZpcnN0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJ211aS1pbmplY3QtZmlyc3QnKTtcbiAgICAgIGhlYWQuaW5zZXJ0QmVmb3JlKGluamVjdEZpcnN0Tm9kZSwgaGVhZC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmpzcyA9IGNyZWF0ZSh7XG4gICAgICBwbHVnaW5zOiBqc3NQcmVzZXQoKS5wbHVnaW5zLFxuICAgICAgaW5zZXJ0aW9uUG9pbnQ6IGluamVjdEZpcnN0Tm9kZVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN0eWxlc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dFxuICB9LCBjaGlsZHJlbik7XG59XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTdHlsZXNQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFlvdSBjYW4gZGlzYWJsZSB0aGUgZ2VuZXJhdGlvbiBvZiB0aGUgc3R5bGVzIHdpdGggdGhpcyBvcHRpb24uXG4gICAqIEl0IGNhbiBiZSB1c2VmdWwgd2hlbiB0cmF2ZXJzaW5nIHRoZSBSZWFjdCB0cmVlIG91dHNpZGUgb2YgdGhlIEhUTUxcbiAgICogcmVuZGVyaW5nIHN0ZXAgb24gdGhlIHNlcnZlci5cbiAgICogTGV0J3Mgc2F5IHlvdSBhcmUgdXNpbmcgcmVhY3QtYXBvbGxvIHRvIGV4dHJhY3QgYWxsXG4gICAqIHRoZSBxdWVyaWVzIG1hZGUgYnkgdGhlIGludGVyZmFjZSBzZXJ2ZXItc2lkZSAtIHlvdSBjYW4gc2lnbmlmaWNhbnRseSBzcGVlZCB1cCB0aGUgdHJhdmVyc2FsIHdpdGggdGhpcyBwcm9wLlxuICAgKi9cbiAgZGlzYWJsZUdlbmVyYXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBKU1MncyBjbGFzcyBuYW1lIGdlbmVyYXRvci5cbiAgICovXG4gIGdlbmVyYXRlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCwgdGhlIHN0eWxlcyBhcmUgaW5qZWN0ZWQgbGFzdCBpbiB0aGUgPGhlYWQ+IGVsZW1lbnQgb2YgdGhlIHBhZ2UuXG4gICAqIEFzIGEgcmVzdWx0LCB0aGV5IGdhaW4gbW9yZSBzcGVjaWZpY2l0eSB0aGFuIGFueSBvdGhlciBzdHlsZSBzaGVldC5cbiAgICogSWYgeW91IHdhbnQgdG8gb3ZlcnJpZGUgTWF0ZXJpYWwtVUkncyBzdHlsZXMsIHNldCB0aGlzIHByb3AuXG4gICAqL1xuICBpbmplY3RGaXJzdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEpTUydzIGluc3RhbmNlLlxuICAgKi9cbiAganNzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogQmV0YSBmZWF0dXJlLlxuICAgKlxuICAgKiBDYWNoZSBmb3IgdGhlIHNoZWV0cy5cbiAgICovXG4gIHNoZWV0c0NhY2hlOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqXG4gICAqIFRoZSBzaGVldHNNYW5hZ2VyIGlzIHVzZWQgdG8gZGVkdXBsaWNhdGUgc3R5bGUgc2hlZXQgaW5qZWN0aW9uIGluIHRoZSBwYWdlLlxuICAgKiBJdCdzIGRlZHVwbGljYXRpbmcgdXNpbmcgdGhlICh0aGVtZSwgc3R5bGVzKSBjb3VwbGUuXG4gICAqIE9uIHRoZSBzZXJ2ZXIsIHlvdSBzaG91bGQgcHJvdmlkZSBhIG5ldyBpbnN0YW5jZSBmb3IgZWFjaCByZXF1ZXN0LlxuICAgKi9cbiAgc2hlZXRzTWFuYWdlcjogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKlxuICAgKiBDb2xsZWN0IHRoZSBzaGVldHMuXG4gICAqL1xuICBzaGVldHNSZWdpc3RyeTogUHJvcFR5cGVzLm9iamVjdFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gU3R5bGVzUHJvdmlkZXIucHJvcFR5cGVzID0gZXhhY3RQcm9wKFN0eWxlc1Byb3ZpZGVyLnByb3BUeXBlcykgOiB2b2lkIDA7XG59IiwiaW1wb3J0IGZ1bmN0aW9ucyBmcm9tICdqc3MtcGx1Z2luLXJ1bGUtdmFsdWUtZnVuY3Rpb24nO1xuaW1wb3J0IGdsb2JhbCBmcm9tICdqc3MtcGx1Z2luLWdsb2JhbCc7XG5pbXBvcnQgbmVzdGVkIGZyb20gJ2pzcy1wbHVnaW4tbmVzdGVkJztcbmltcG9ydCBjYW1lbENhc2UgZnJvbSAnanNzLXBsdWdpbi1jYW1lbC1jYXNlJztcbmltcG9ydCBkZWZhdWx0VW5pdCBmcm9tICdqc3MtcGx1Z2luLWRlZmF1bHQtdW5pdCc7XG5pbXBvcnQgdmVuZG9yUHJlZml4ZXIgZnJvbSAnanNzLXBsdWdpbi12ZW5kb3ItcHJlZml4ZXInO1xuaW1wb3J0IHByb3BzU29ydCBmcm9tICdqc3MtcGx1Z2luLXByb3BzLXNvcnQnOyAvLyBTdWJzZXQgb2YganNzLXByZXNldC1kZWZhdWx0IHdpdGggb25seSB0aGUgcGx1Z2lucyB0aGUgTWF0ZXJpYWwtVUkgY29tcG9uZW50cyBhcmUgdXNpbmcuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGpzc1ByZXNldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBwbHVnaW5zOiBbZnVuY3Rpb25zKCksIGdsb2JhbCgpLCBuZXN0ZWQoKSwgY2FtZWxDYXNlKCksIGRlZmF1bHRVbml0KCksIC8vIERpc2FibGUgdGhlIHZlbmRvciBwcmVmaXhlciBzZXJ2ZXItc2lkZSwgaXQgZG9lcyBub3RoaW5nLlxuICAgIC8vIFRoaXMgd2F5LCB3ZSBjYW4gZ2V0IGEgcGVyZm9ybWFuY2UgYm9vc3QuXG4gICAgLy8gSW4gdGhlIGRvY3VtZW50YXRpb24sIHdlIGFyZSB1c2luZyBgYXV0b3ByZWZpeGVyYCB0byBzb2x2ZSB0aGlzIHByb2JsZW0uXG4gICAgdHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogdmVuZG9yUHJlZml4ZXIoKSwgcHJvcHNTb3J0KCldXG4gIH07XG59IiwiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuLy8gR2xvYmFsIGluZGV4IGNvdW50ZXIgdG8gcHJlc2VydmUgc291cmNlIG9yZGVyLlxuLy8gV2UgY3JlYXRlIHRoZSBzdHlsZSBzaGVldCBkdXJpbmcgdGhlIGNyZWF0aW9uIG9mIHRoZSBjb21wb25lbnQsXG4vLyBjaGlsZHJlbiBhcmUgaGFuZGxlZCBhZnRlciB0aGUgcGFyZW50cywgc28gdGhlIG9yZGVyIG9mIHN0eWxlIGVsZW1lbnRzIHdvdWxkIGJlIHBhcmVudC0+Y2hpbGQuXG4vLyBJdCBpcyBhIHByb2JsZW0gdGhvdWdoIHdoZW4gYSBwYXJlbnQgcGFzc2VzIGEgY2xhc3NOYW1lXG4vLyB3aGljaCBuZWVkcyB0byBvdmVycmlkZSBhbnkgY2hpbGQncyBzdHlsZXMuXG4vLyBTdHlsZVNoZWV0IG9mIHRoZSBjaGlsZCBoYXMgYSBoaWdoZXIgc3BlY2lmaWNpdHksIGJlY2F1c2Ugb2YgdGhlIHNvdXJjZSBvcmRlci5cbi8vIFNvIG91ciBzb2x1dGlvbiBpcyB0byByZW5kZXIgc2hlZXRzIHRoZW0gaW4gdGhlIHJldmVyc2Ugb3JkZXIgY2hpbGQtPnNoZWV0LCBzb1xuLy8gdGhhdCBwYXJlbnQgaGFzIGEgaGlnaGVyIHNwZWNpZmljaXR5LlxudmFyIGluZGV4Q291bnRlciA9IC0xZTk7XG5leHBvcnQgZnVuY3Rpb24gaW5jcmVtZW50KCkge1xuICBpbmRleENvdW50ZXIgKz0gMTtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChpbmRleENvdW50ZXIgPj0gMCkge1xuICAgICAgY29uc29sZS53YXJuKFsnTWF0ZXJpYWwtVUk6IFlvdSBtaWdodCBoYXZlIGEgbWVtb3J5IGxlYWsuJywgJ1RoZSBpbmRleENvdW50ZXIgaXMgbm90IHN1cHBvc2VkIHRvIGdyb3cgdGhhdCBtdWNoLiddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5kZXhDb3VudGVyO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF90eXBlb2YgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZlwiO1xuaW1wb3J0IHsgZGVlcG1lcmdlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCBub29wVGhlbWUgZnJvbSAnLi9ub29wVGhlbWUnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3R5bGVzQ3JlYXRvcihzdHlsZXNPckNyZWF0b3IpIHtcbiAgdmFyIHRoZW1pbmdFbmFibGVkID0gdHlwZW9mIHN0eWxlc09yQ3JlYXRvciA9PT0gJ2Z1bmN0aW9uJztcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChfdHlwZW9mKHN0eWxlc09yQ3JlYXRvcikgIT09ICdvYmplY3QnICYmICF0aGVtaW5nRW5hYmxlZCkge1xuICAgICAgY29uc29sZS5lcnJvcihbJ01hdGVyaWFsLVVJOiBUaGUgYHN0eWxlc2AgYXJndW1lbnQgcHJvdmlkZWQgaXMgaW52YWxpZC4nLCAnWW91IG5lZWQgdG8gcHJvdmlkZSBhIGZ1bmN0aW9uIGdlbmVyYXRpbmcgdGhlIHN0eWxlcyBvciBhIHN0eWxlcyBvYmplY3QuJ10uam9pbignXFxuJykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUodGhlbWUsIG5hbWUpIHtcbiAgICAgIHZhciBzdHlsZXM7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHN0eWxlcyA9IHRoZW1pbmdFbmFibGVkID8gc3R5bGVzT3JDcmVhdG9yKHRoZW1lKSA6IHN0eWxlc09yQ3JlYXRvcjtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGlmICh0aGVtaW5nRW5hYmxlZCA9PT0gdHJ1ZSAmJiB0aGVtZSA9PT0gbm9vcFRoZW1lKSB7XG4gICAgICAgICAgICAvLyBUT0RPOiBwcmVwZW5kIGVycm9yIG1lc3NhZ2UvbmFtZSBpbnN0ZWFkXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBgc3R5bGVzYCBhcmd1bWVudCBwcm92aWRlZCBpcyBpbnZhbGlkLicsICdZb3UgYXJlIHByb3ZpZGluZyBhIGZ1bmN0aW9uIHdpdGhvdXQgYSB0aGVtZSBpbiB0aGUgY29udGV4dC4nLCAnT25lIG9mIHRoZSBwYXJlbnQgZWxlbWVudHMgbmVlZHMgdG8gdXNlIGEgVGhlbWVQcm92aWRlci4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW5hbWUgfHwgIXRoZW1lLm92ZXJyaWRlcyB8fCAhdGhlbWUub3ZlcnJpZGVzW25hbWVdKSB7XG4gICAgICAgIHJldHVybiBzdHlsZXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdmVycmlkZXMgPSB0aGVtZS5vdmVycmlkZXNbbmFtZV07XG5cbiAgICAgIHZhciBzdHlsZXNXaXRoT3ZlcnJpZGVzID0gX2V4dGVuZHMoe30sIHN0eWxlcyk7XG5cbiAgICAgIE9iamVjdC5rZXlzKG92ZXJyaWRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZXNXaXRoT3ZlcnJpZGVzW2tleV0pIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ01hdGVyaWFsLVVJOiBZb3UgYXJlIHRyeWluZyB0byBvdmVycmlkZSBhIHN0eWxlIHRoYXQgZG9lcyBub3QgZXhpc3QuJywgXCJGaXggdGhlIGBcIi5jb25jYXQoa2V5LCBcImAga2V5IG9mIGB0aGVtZS5vdmVycmlkZXMuXCIpLmNvbmNhdChuYW1lLCBcImAuXCIpXS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3R5bGVzV2l0aE92ZXJyaWRlc1trZXldID0gZGVlcG1lcmdlKHN0eWxlc1dpdGhPdmVycmlkZXNba2V5XSwgb3ZlcnJpZGVzW2tleV0pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3R5bGVzV2l0aE92ZXJyaWRlcztcbiAgICB9LFxuICAgIG9wdGlvbnM6IHt9XG4gIH07XG59IiwiLy8gV2UgdXNlIHRoZSBzYW1lIGVtcHR5IG9iamVjdCB0byByZWYgY291bnQgdGhlIHN0eWxlcyB0aGF0IGRvbid0IG5lZWQgYSB0aGVtZSBvYmplY3QuXG52YXIgbm9vcFRoZW1lID0ge307XG5leHBvcnQgZGVmYXVsdCBub29wVGhlbWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldER5bmFtaWNTdHlsZXMgfSBmcm9tICdqc3MnO1xuaW1wb3J0IG1lcmdlQ2xhc3NlcyBmcm9tICcuLi9tZXJnZUNsYXNzZXMnO1xuaW1wb3J0IG11bHRpS2V5U3RvcmUgZnJvbSAnLi9tdWx0aUtleVN0b3JlJztcbmltcG9ydCB1c2VUaGVtZSBmcm9tICcuLi91c2VUaGVtZSc7XG5pbXBvcnQgeyBTdHlsZXNDb250ZXh0IH0gZnJvbSAnLi4vU3R5bGVzUHJvdmlkZXInO1xuaW1wb3J0IHsgaW5jcmVtZW50IH0gZnJvbSAnLi9pbmRleENvdW50ZXInO1xuaW1wb3J0IGdldFN0eWxlc0NyZWF0b3IgZnJvbSAnLi4vZ2V0U3R5bGVzQ3JlYXRvcic7XG5pbXBvcnQgbm9vcFRoZW1lIGZyb20gJy4uL2dldFN0eWxlc0NyZWF0b3Ivbm9vcFRoZW1lJztcblxuZnVuY3Rpb24gZ2V0Q2xhc3NlcyhfcmVmLCBjbGFzc2VzLCBDb21wb25lbnQpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmLnN0eWxlc09wdGlvbnM7XG5cbiAgaWYgKHN0eWxlc09wdGlvbnMuZGlzYWJsZUdlbmVyYXRpb24pIHtcbiAgICByZXR1cm4gY2xhc3NlcyB8fCB7fTtcbiAgfVxuXG4gIGlmICghc3RhdGUuY2FjaGVDbGFzc2VzKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzID0ge1xuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBmaW5hbGl6ZWQgY2xhc3NlcyB2YWx1ZS5cbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgLy8gQ2FjaGUgZm9yIHRoZSBsYXN0IHVzZWQgY2xhc3NlcyBwcm9wIHBvaW50ZXIuXG4gICAgICBsYXN0UHJvcDogbnVsbCxcbiAgICAgIC8vIENhY2hlIGZvciB0aGUgbGFzdCB1c2VkIHJlbmRlcmVkIGNsYXNzZXMgcG9pbnRlci5cbiAgICAgIGxhc3RKU1M6IHt9XG4gICAgfTtcbiAgfSAvLyBUcmFja3MgaWYgZWl0aGVyIHRoZSByZW5kZXJlZCBjbGFzc2VzIG9yIGNsYXNzZXMgcHJvcCBoYXMgY2hhbmdlZCxcbiAgLy8gcmVxdWlyaW5nIHRoZSBnZW5lcmF0aW9uIG9mIGEgbmV3IGZpbmFsaXplZCBjbGFzc2VzIG9iamVjdC5cblxuXG4gIHZhciBnZW5lcmF0ZSA9IGZhbHNlO1xuXG4gIGlmIChzdGF0ZS5jbGFzc2VzICE9PSBzdGF0ZS5jYWNoZUNsYXNzZXMubGFzdEpTUykge1xuICAgIHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTID0gc3RhdGUuY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoY2xhc3NlcyAhPT0gc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wKSB7XG4gICAgc3RhdGUuY2FjaGVDbGFzc2VzLmxhc3RQcm9wID0gY2xhc3NlcztcbiAgICBnZW5lcmF0ZSA9IHRydWU7XG4gIH1cblxuICBpZiAoZ2VuZXJhdGUpIHtcbiAgICBzdGF0ZS5jYWNoZUNsYXNzZXMudmFsdWUgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHN0YXRlLmNhY2hlQ2xhc3Nlcy5sYXN0SlNTLFxuICAgICAgbmV3Q2xhc3NlczogY2xhc3NlcyxcbiAgICAgIENvbXBvbmVudDogQ29tcG9uZW50XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc3RhdGUuY2FjaGVDbGFzc2VzLnZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdHRhY2goX3JlZjIsIHByb3BzKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgdGhlbWUgPSBfcmVmMi50aGVtZSxcbiAgICAgIHN0eWxlc09wdGlvbnMgPSBfcmVmMi5zdHlsZXNPcHRpb25zLFxuICAgICAgc3R5bGVzQ3JlYXRvciA9IF9yZWYyLnN0eWxlc0NyZWF0b3IsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcblxuICBpZiAoc3R5bGVzT3B0aW9ucy5kaXNhYmxlR2VuZXJhdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGVldE1hbmFnZXIgPSBtdWx0aUtleVN0b3JlLmdldChzdHlsZXNPcHRpb25zLnNoZWV0c01hbmFnZXIsIHN0eWxlc0NyZWF0b3IsIHRoZW1lKTtcblxuICBpZiAoIXNoZWV0TWFuYWdlcikge1xuICAgIHNoZWV0TWFuYWdlciA9IHtcbiAgICAgIHJlZnM6IDAsXG4gICAgICBzdGF0aWNTaGVldDogbnVsbCxcbiAgICAgIGR5bmFtaWNTdHlsZXM6IG51bGxcbiAgICB9O1xuICAgIG11bHRpS2V5U3RvcmUuc2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHNoZWV0TWFuYWdlcik7XG4gIH1cblxuICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBzdHlsZXNDcmVhdG9yLm9wdGlvbnMsIHN0eWxlc09wdGlvbnMsIHtcbiAgICB0aGVtZTogdGhlbWUsXG4gICAgZmxpcDogdHlwZW9mIHN0eWxlc09wdGlvbnMuZmxpcCA9PT0gJ2Jvb2xlYW4nID8gc3R5bGVzT3B0aW9ucy5mbGlwIDogdGhlbWUuZGlyZWN0aW9uID09PSAncnRsJ1xuICB9KTtcblxuICBvcHRpb25zLmdlbmVyYXRlSWQgPSBvcHRpb25zLnNlcnZlckdlbmVyYXRlQ2xhc3NOYW1lIHx8IG9wdGlvbnMuZ2VuZXJhdGVDbGFzc05hbWU7XG4gIHZhciBzaGVldHNSZWdpc3RyeSA9IHN0eWxlc09wdGlvbnMuc2hlZXRzUmVnaXN0cnk7XG5cbiAgaWYgKHNoZWV0TWFuYWdlci5yZWZzID09PSAwKSB7XG4gICAgdmFyIHN0YXRpY1NoZWV0O1xuXG4gICAgaWYgKHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgIHN0YXRpY1NoZWV0ID0gbXVsdGlLZXlTdG9yZS5nZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZXMgPSBzdHlsZXNDcmVhdG9yLmNyZWF0ZSh0aGVtZSwgbmFtZSk7XG5cbiAgICBpZiAoIXN0YXRpY1NoZWV0KSB7XG4gICAgICBzdGF0aWNTaGVldCA9IHN0eWxlc09wdGlvbnMuanNzLmNyZWF0ZVN0eWxlU2hlZXQoc3R5bGVzLCBfZXh0ZW5kcyh7XG4gICAgICAgIGxpbms6IGZhbHNlXG4gICAgICB9LCBvcHRpb25zKSk7XG4gICAgICBzdGF0aWNTaGVldC5hdHRhY2goKTtcblxuICAgICAgaWYgKHN0eWxlc09wdGlvbnMuc2hlZXRzQ2FjaGUpIHtcbiAgICAgICAgbXVsdGlLZXlTdG9yZS5zZXQoc3R5bGVzT3B0aW9ucy5zaGVldHNDYWNoZSwgc3R5bGVzQ3JlYXRvciwgdGhlbWUsIHN0YXRpY1NoZWV0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hlZXRzUmVnaXN0cnkpIHtcbiAgICAgIHNoZWV0c1JlZ2lzdHJ5LmFkZChzdGF0aWNTaGVldCk7XG4gICAgfVxuXG4gICAgc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0ID0gc3RhdGljU2hlZXQ7XG4gICAgc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMgPSBnZXREeW5hbWljU3R5bGVzKHN0eWxlcyk7XG4gIH1cblxuICBpZiAoc2hlZXRNYW5hZ2VyLmR5bmFtaWNTdHlsZXMpIHtcbiAgICB2YXIgZHluYW1pY1NoZWV0ID0gc3R5bGVzT3B0aW9ucy5qc3MuY3JlYXRlU3R5bGVTaGVldChzaGVldE1hbmFnZXIuZHluYW1pY1N0eWxlcywgX2V4dGVuZHMoe1xuICAgICAgbGluazogdHJ1ZVxuICAgIH0sIG9wdGlvbnMpKTtcbiAgICBkeW5hbWljU2hlZXQudXBkYXRlKHByb3BzKTtcbiAgICBkeW5hbWljU2hlZXQuYXR0YWNoKCk7XG4gICAgc3RhdGUuZHluYW1pY1NoZWV0ID0gZHluYW1pY1NoZWV0O1xuICAgIHN0YXRlLmNsYXNzZXMgPSBtZXJnZUNsYXNzZXMoe1xuICAgICAgYmFzZUNsYXNzZXM6IHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldC5jbGFzc2VzLFxuICAgICAgbmV3Q2xhc3NlczogZHluYW1pY1NoZWV0LmNsYXNzZXNcbiAgICB9KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkuYWRkKGR5bmFtaWNTaGVldCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN0YXRlLmNsYXNzZXMgPSBzaGVldE1hbmFnZXIuc3RhdGljU2hlZXQuY2xhc3NlcztcbiAgfVxuXG4gIHNoZWV0TWFuYWdlci5yZWZzICs9IDE7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZShfcmVmMywgcHJvcHMpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjMuc3RhdGU7XG5cbiAgaWYgKHN0YXRlLmR5bmFtaWNTaGVldCkge1xuICAgIHN0YXRlLmR5bmFtaWNTaGVldC51cGRhdGUocHJvcHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaChfcmVmNCkge1xuICB2YXIgc3RhdGUgPSBfcmVmNC5zdGF0ZSxcbiAgICAgIHRoZW1lID0gX3JlZjQudGhlbWUsXG4gICAgICBzdHlsZXNPcHRpb25zID0gX3JlZjQuc3R5bGVzT3B0aW9ucyxcbiAgICAgIHN0eWxlc0NyZWF0b3IgPSBfcmVmNC5zdHlsZXNDcmVhdG9yO1xuXG4gIGlmIChzdHlsZXNPcHRpb25zLmRpc2FibGVHZW5lcmF0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoZWV0TWFuYWdlciA9IG11bHRpS2V5U3RvcmUuZ2V0KHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICBzaGVldE1hbmFnZXIucmVmcyAtPSAxO1xuICB2YXIgc2hlZXRzUmVnaXN0cnkgPSBzdHlsZXNPcHRpb25zLnNoZWV0c1JlZ2lzdHJ5O1xuXG4gIGlmIChzaGVldE1hbmFnZXIucmVmcyA9PT0gMCkge1xuICAgIG11bHRpS2V5U3RvcmUuZGVsZXRlKHN0eWxlc09wdGlvbnMuc2hlZXRzTWFuYWdlciwgc3R5bGVzQ3JlYXRvciwgdGhlbWUpO1xuICAgIHN0eWxlc09wdGlvbnMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc2hlZXRNYW5hZ2VyLnN0YXRpY1NoZWV0KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHNoZWV0TWFuYWdlci5zdGF0aWNTaGVldCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHN0YXRlLmR5bmFtaWNTaGVldCkge1xuICAgIHN0eWxlc09wdGlvbnMuanNzLnJlbW92ZVN0eWxlU2hlZXQoc3RhdGUuZHluYW1pY1NoZWV0KTtcblxuICAgIGlmIChzaGVldHNSZWdpc3RyeSkge1xuICAgICAgc2hlZXRzUmVnaXN0cnkucmVtb3ZlKHN0YXRlLmR5bmFtaWNTaGVldCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVzZVN5bmNocm9ub3VzRWZmZWN0KGZ1bmMsIHZhbHVlcykge1xuICB2YXIga2V5ID0gUmVhY3QudXNlUmVmKFtdKTtcbiAgdmFyIG91dHB1dDsgLy8gU3RvcmUgXCJnZW5lcmF0aW9uXCIga2V5LiBKdXN0IHJldHVybnMgYSBuZXcgb2JqZWN0IGV2ZXJ5IHRpbWVcblxuICB2YXIgY3VycmVudEtleSA9IFJlYWN0LnVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSwgdmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgLy8gXCJ0aGUgZmlyc3QgcmVuZGVyXCIsIG9yIFwibWVtbyBkcm9wcGVkIHRoZSB2YWx1ZVwiXG5cbiAgaWYgKGtleS5jdXJyZW50ICE9PSBjdXJyZW50S2V5KSB7XG4gICAga2V5LmN1cnJlbnQgPSBjdXJyZW50S2V5O1xuICAgIG91dHB1dCA9IGZ1bmMoKTtcbiAgfVxuXG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChvdXRwdXQpIHtcbiAgICAgICAgb3V0cHV0KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2N1cnJlbnRLZXldIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1ha2VTdHlsZXMoc3R5bGVzT3JDcmVhdG9yKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgIGNsYXNzTmFtZVByZWZpeE9wdGlvbiA9IG9wdGlvbnMuY2xhc3NOYW1lUHJlZml4LFxuICAgICAgQ29tcG9uZW50ID0gb3B0aW9ucy5Db21wb25lbnQsXG4gICAgICBfb3B0aW9ucyRkZWZhdWx0VGhlbWUgPSBvcHRpb25zLmRlZmF1bHRUaGVtZSxcbiAgICAgIGRlZmF1bHRUaGVtZSA9IF9vcHRpb25zJGRlZmF1bHRUaGVtZSA9PT0gdm9pZCAwID8gbm9vcFRoZW1lIDogX29wdGlvbnMkZGVmYXVsdFRoZW1lLFxuICAgICAgc3R5bGVzT3B0aW9uczIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMob3B0aW9ucywgW1wibmFtZVwiLCBcImNsYXNzTmFtZVByZWZpeFwiLCBcIkNvbXBvbmVudFwiLCBcImRlZmF1bHRUaGVtZVwiXSk7XG5cbiAgdmFyIHN0eWxlc0NyZWF0b3IgPSBnZXRTdHlsZXNDcmVhdG9yKHN0eWxlc09yQ3JlYXRvcik7XG4gIHZhciBjbGFzc05hbWVQcmVmaXggPSBuYW1lIHx8IGNsYXNzTmFtZVByZWZpeE9wdGlvbiB8fCAnbWFrZVN0eWxlcyc7XG4gIHN0eWxlc0NyZWF0b3Iub3B0aW9ucyA9IHtcbiAgICBpbmRleDogaW5jcmVtZW50KCksXG4gICAgbmFtZTogbmFtZSxcbiAgICBtZXRhOiBjbGFzc05hbWVQcmVmaXgsXG4gICAgY2xhc3NOYW1lUHJlZml4OiBjbGFzc05hbWVQcmVmaXhcbiAgfTtcblxuICB2YXIgdXNlU3R5bGVzID0gZnVuY3Rpb24gdXNlU3R5bGVzKCkge1xuICAgIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKSB8fCBkZWZhdWx0VGhlbWU7XG5cbiAgICB2YXIgc3R5bGVzT3B0aW9ucyA9IF9leHRlbmRzKHt9LCBSZWFjdC51c2VDb250ZXh0KFN0eWxlc0NvbnRleHQpLCBzdHlsZXNPcHRpb25zMik7XG5cbiAgICB2YXIgaW5zdGFuY2UgPSBSZWFjdC51c2VSZWYoKTtcbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gUmVhY3QudXNlUmVmKCk7XG4gICAgdXNlU3luY2hyb25vdXNFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB7XG4gICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgIHN0YXRlOiB7fSxcbiAgICAgICAgc3R5bGVzQ3JlYXRvcjogc3R5bGVzQ3JlYXRvcixcbiAgICAgICAgc3R5bGVzT3B0aW9uczogc3R5bGVzT3B0aW9ucyxcbiAgICAgICAgdGhlbWU6IHRoZW1lXG4gICAgICB9O1xuICAgICAgYXR0YWNoKGN1cnJlbnQsIHByb3BzKTtcbiAgICAgIHNob3VsZFVwZGF0ZS5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBpbnN0YW5jZS5jdXJyZW50ID0gY3VycmVudDtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRldGFjaChjdXJyZW50KTtcbiAgICAgIH07XG4gICAgfSwgW3RoZW1lLCBzdHlsZXNDcmVhdG9yXSk7XG4gICAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChzaG91bGRVcGRhdGUuY3VycmVudCkge1xuICAgICAgICB1cGRhdGUoaW5zdGFuY2UuY3VycmVudCwgcHJvcHMpO1xuICAgICAgfVxuXG4gICAgICBzaG91bGRVcGRhdGUuY3VycmVudCA9IHRydWU7XG4gICAgfSk7XG4gICAgdmFyIGNsYXNzZXMgPSBnZXRDbGFzc2VzKGluc3RhbmNlLmN1cnJlbnQsIHByb3BzLmNsYXNzZXMsIENvbXBvbmVudCk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKGNsYXNzZXMpO1xuICAgIH1cblxuICAgIHJldHVybiBjbGFzc2VzO1xuICB9O1xuXG4gIHJldHVybiB1c2VTdHlsZXM7XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbnZhciBUaGVtZUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBUaGVtZUNvbnRleHQuZGlzcGxheU5hbWUgPSAnVGhlbWVDb250ZXh0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgVGhlbWVDb250ZXh0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGhlbWVDb250ZXh0IGZyb20gJy4vVGhlbWVDb250ZXh0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICB2YXIgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHRoZW1lKTtcbiAgfVxuXG4gIHJldHVybiB0aGVtZTtcbn0iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfdHlwZW9mIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2ZcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuIGl0ZW0gJiYgX3R5cGVvZihpdGVtKSA9PT0gJ29iamVjdCcgJiYgaXRlbS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7XG4gICAgY2xvbmU6IHRydWVcbiAgfTtcbiAgdmFyIG91dHB1dCA9IG9wdGlvbnMuY2xvbmUgPyBfZXh0ZW5kcyh7fSwgdGFyZ2V0KSA6IHRhcmdldDtcblxuICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpICYmIGlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAvLyBBdm9pZCBwcm90b3R5cGUgcG9sbHV0aW9uXG4gICAgICBpZiAoa2V5ID09PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1BsYWluT2JqZWN0KHNvdXJjZVtrZXldKSAmJiBrZXkgaW4gdGFyZ2V0KSB7XG4gICAgICAgIG91dHB1dFtrZXldID0gZGVlcG1lcmdlKHRhcmdldFtrZXldLCBzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXRwdXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn0iLCIvKipcbiAqIFdBUk5JTkc6IERvbid0IGltcG9ydCB0aGlzIGRpcmVjdGx5LlxuICogVXNlIGBNdWlFcnJvcmAgZnJvbSBgQG1hdGVyaWFsLXVpL3V0aWxzL21hY3Jvcy9NdWlFcnJvci5tYWNyb2AgaW5zdGVhZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2RlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdE11aUVycm9yTWVzc2FnZShjb2RlKSB7XG4gIC8vIEFwcGx5IGJhYmVsLXBsdWdpbi10cmFuc2Zvcm0tdGVtcGxhdGUtbGl0ZXJhbHMgaW4gbG9vc2UgbW9kZVxuICAvLyBsb29zZSBtb2RlIGlzIHNhZmUgaWZmIHdlJ3JlIGNvbmNhdGVuYXRpbmcgcHJpbWl0aXZlc1xuICAvLyBzZWUgaHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvZW4vYmFiZWwtcGx1Z2luLXRyYW5zZm9ybS10ZW1wbGF0ZS1saXRlcmFscyNsb29zZVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIHByZWZlci10ZW1wbGF0ZSAqL1xuICB2YXIgdXJsID0gJ2h0dHBzOi8vbWF0ZXJpYWwtdWkuY29tL3Byb2R1Y3Rpb24tZXJyb3IvP2NvZGU9JyArIGNvZGU7XG5cbiAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyByZXN0IHBhcmFtcyBvdmVyLXRyYW5zcGlsZSBmb3IgdGhpcyBjYXNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuICAgIHVybCArPSAnJmFyZ3NbXT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tpXSk7XG4gIH1cblxuICByZXR1cm4gJ01pbmlmaWVkIE1hdGVyaWFsLVVJIGVycm9yICMnICsgY29kZSArICc7IHZpc2l0ICcgKyB1cmwgKyAnIGZvciB0aGUgZnVsbCBtZXNzYWdlLic7XG4gIC8qIGVzbGludC1lbmFibGUgcHJlZmVyLXRlbXBsYXRlICovXG59IiwiZnVuY3Rpb24gdG9WYWwobWl4KSB7XG5cdHZhciBrLCB5LCBzdHI9Jyc7XG5cblx0aWYgKHR5cGVvZiBtaXggPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBtaXggPT09ICdudW1iZXInKSB7XG5cdFx0c3RyICs9IG1peDtcblx0fSBlbHNlIGlmICh0eXBlb2YgbWl4ID09PSAnb2JqZWN0Jykge1xuXHRcdGlmIChBcnJheS5pc0FycmF5KG1peCkpIHtcblx0XHRcdGZvciAoaz0wOyBrIDwgbWl4Lmxlbmd0aDsgaysrKSB7XG5cdFx0XHRcdGlmIChtaXhba10pIHtcblx0XHRcdFx0XHRpZiAoeSA9IHRvVmFsKG1peFtrXSkpIHtcblx0XHRcdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdFx0XHRzdHIgKz0geTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yIChrIGluIG1peCkge1xuXHRcdFx0XHRpZiAobWl4W2tdKSB7XG5cdFx0XHRcdFx0c3RyICYmIChzdHIgKz0gJyAnKTtcblx0XHRcdFx0XHRzdHIgKz0gaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcblx0dmFyIGk9MCwgdG1wLCB4LCBzdHI9Jyc7XG5cdHdoaWxlIChpIDwgYXJndW1lbnRzLmxlbmd0aCkge1xuXHRcdGlmICh0bXAgPSBhcmd1bWVudHNbaSsrXSkge1xuXHRcdFx0aWYgKHggPSB0b1ZhbCh0bXApKSB7XG5cdFx0XHRcdHN0ciAmJiAoc3RyICs9ICcgJyk7XG5cdFx0XHRcdHN0ciArPSB4XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBzdHI7XG59XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gZnJvbSBcIi4vc3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItTGlnaHQud29mZjJcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyBmcm9tIFwiLi9zdHlsZXMvZm9udHMvTm90b1NhbnNLUi1MaWdodC53b2ZmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzJfX18gZnJvbSBcIi4vc3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItTGlnaHQub3RmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18gZnJvbSBcIi4vc3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItUmVndWxhci53b2ZmMlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF80X19fIGZyb20gXCIuL3N0eWxlcy9mb250cy9Ob3RvU2Fuc0tSLVJlZ3VsYXIud29mZlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fIGZyb20gXCIuL3N0eWxlcy9mb250cy9Ob3RvU2Fuc0tSLVJlZ3VsYXIub3RmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18gZnJvbSBcIi4vc3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItTWVkaXVtLndvZmYyXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18gZnJvbSBcIi4vc3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItTWVkaXVtLndvZmZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOF9fXyBmcm9tIFwiLi9zdHlsZXMvZm9udHMvTm90b1NhbnNLUi1NZWRpdW0ub3RmXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18gZnJvbSBcIi4vc3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItQm9sZC53b2ZmMlwiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMF9fXyBmcm9tIFwiLi9zdHlsZXMvZm9udHMvTm90b1NhbnNLUi1Cb2xkLndvZmZcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMTFfX18gZnJvbSBcIi4vc3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItQm9sZC5vdGZcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzVfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfN19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzhfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF85X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTBfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTFfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xMV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTm90byBTYW5zIENKSyBLUlxcXCIsIEJsaW5rTWFjU3lzdGVtRm9udCwgXFxcIlNlZ29lIFVJXFxcIiwgXFxcIlJvYm90b1xcXCIsIFxcXCJPeHlnZW5cXFwiLCBcXFwiVWJ1bnR1XFxcIiwgXFxcIkNhbnRhcmVsbFxcXCIsXFxuICAgIFxcXCJGaXJhIFNhbnNcXFwiLCBcXFwiRHJvaWQgU2Fuc1xcXCIsIFxcXCJIZWx2ZXRpY2EgTmV1ZVxcXCIsIHNhbnMtc2VyaWY7XFxuICBmb250LXN0eWxlOiBcXFwibm9ybWFsXFxcIjtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcblxcbmNvZGUge1xcbiAgZm9udC1mYW1pbHk6IHNvdXJjZS1jb2RlLXBybywgTWVubG8sIE1vbmFjbywgQ29uc29sYXMsIFxcXCJDb3VyaWVyIE5ld1xcXCIsIG1vbm9zcGFjZTtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIk5vdG8gU2FucyBDSksgS1JcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDEwMDtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksXFxuICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksXFxuICAgIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTm90byBTYW5zIENKSyBLUlxcXCI7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSxcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSxcXG4gICAgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyArIFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIik7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJOb3RvIFNhbnMgQ0pLIEtSXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLFxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLFxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fICsgXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKTtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIk5vdG8gU2FucyBDSksgS1JcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLFxcbiAgICB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMTFfX18gKyBcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaW5kZXguY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsU0FBUztFQUNUOzJEQUN5RDtFQUN6RCxvQkFBb0I7RUFDcEIsZ0JBQWdCO0VBQ2hCLG1DQUFtQztFQUNuQyxrQ0FBa0M7QUFDcEM7O0FBRUE7RUFDRSwrRUFBK0U7QUFDakY7O0FBRUE7RUFDRSwrQkFBK0I7RUFDL0Isa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQjs7OERBRTZEO0FBQy9EOztBQUVBO0VBQ0UsK0JBQStCO0VBQy9CLGtCQUFrQjtFQUNsQixtQkFBbUI7RUFDbkI7OzhEQUUrRDtBQUNqRTs7QUFFQTtFQUNFLCtCQUErQjtFQUMvQixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCOzs4REFFOEQ7QUFDaEU7O0FBRUE7RUFDRSwrQkFBK0I7RUFDL0Isa0JBQWtCO0VBQ2xCLGlCQUFpQjtFQUNqQjt3SEFDcUg7QUFDdkhcIixcInNvdXJjZXNDb250ZW50XCI6W1wiYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBmb250LWZhbWlseTogXFxcIk5vdG8gU2FucyBDSksgS1JcXFwiLCBCbGlua01hY1N5c3RlbUZvbnQsIFxcXCJTZWdvZSBVSVxcXCIsIFxcXCJSb2JvdG9cXFwiLCBcXFwiT3h5Z2VuXFxcIiwgXFxcIlVidW50dVxcXCIsIFxcXCJDYW50YXJlbGxcXFwiLFxcbiAgICBcXFwiRmlyYSBTYW5zXFxcIiwgXFxcIkRyb2lkIFNhbnNcXFwiLCBcXFwiSGVsdmV0aWNhIE5ldWVcXFwiLCBzYW5zLXNlcmlmO1xcbiAgZm9udC1zdHlsZTogXFxcIm5vcm1hbFxcXCI7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbn1cXG5cXG5jb2RlIHtcXG4gIGZvbnQtZmFtaWx5OiBzb3VyY2UtY29kZS1wcm8sIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCBcXFwiQ291cmllciBOZXdcXFwiLCBtb25vc3BhY2U7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJOb3RvIFNhbnMgQ0pLIEtSXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiAxMDA7XFxuICBzcmM6IHVybChcXFwic3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItTGlnaHQud29mZjJcXFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksXFxuICAgIHVybChcXFwic3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItTGlnaHQud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLFxcbiAgICB1cmwoXFxcInN0eWxlcy9mb250cy9Ob3RvU2Fuc0tSLUxpZ2h0Lm90ZlxcXCIpIGZvcm1hdChcXFwidHJ1ZXR5cGVcXFwiKTtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIk5vdG8gU2FucyBDSksgS1JcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIHNyYzogdXJsKFxcXCJzdHlsZXMvZm9udHMvTm90b1NhbnNLUi1SZWd1bGFyLndvZmYyXFxcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLFxcbiAgICB1cmwoXFxcInN0eWxlcy9mb250cy9Ob3RvU2Fuc0tSLVJlZ3VsYXIud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLFxcbiAgICB1cmwoXFxcInN0eWxlcy9mb250cy9Ob3RvU2Fuc0tSLVJlZ3VsYXIub3RmXFxcIikgZm9ybWF0KFxcXCJ0cnVldHlwZVxcXCIpO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTm90byBTYW5zIENKSyBLUlxcXCI7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgc3JjOiB1cmwoXFxcInN0eWxlcy9mb250cy9Ob3RvU2Fuc0tSLU1lZGl1bS53b2ZmMlxcXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSxcXG4gICAgdXJsKFxcXCJzdHlsZXMvZm9udHMvTm90b1NhbnNLUi1NZWRpdW0ud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpLFxcbiAgICB1cmwoXFxcInN0eWxlcy9mb250cy9Ob3RvU2Fuc0tSLU1lZGl1bS5vdGZcXFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIik7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJOb3RvIFNhbnMgQ0pLIEtSXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgc3JjOiB1cmwoXFxcInN0eWxlcy9mb250cy9Ob3RvU2Fuc0tSLUJvbGQud29mZjJcXFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksXFxuICAgIHVybChcXFwic3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItQm9sZC53b2ZmXFxcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIiksIHVybChcXFwic3R5bGVzL2ZvbnRzL05vdG9TYW5zS1ItQm9sZC5vdGZcXFwiKSBmb3JtYXQoXFxcInRydWV0eXBlXFxcIik7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgJiYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXSk7IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvcHRpb25zID0ge307XG4gIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlLCBuby1wYXJhbS1yZWFzc2lnblxuXG5cbiAgdXJsID0gdXJsICYmIHVybC5fX2VzTW9kdWxlID8gdXJsLmRlZmF1bHQgOiB1cmw7XG5cbiAgaWYgKHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl0vLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbi8qXG4gTW9kZXJuaXpyIDMuMC4wcHJlIChDdXN0b20gQnVpbGQpIHwgTUlUXG4qL1xuJ3VzZSBzdHJpY3QnO3ZhciBhYT1yZXF1aXJlKFwicmVhY3RcIiksbT1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxyPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24geShhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1pZighYWEpdGhyb3cgRXJyb3IoeSgyMjcpKTt2YXIgYmE9bmV3IFNldCxjYT17fTtmdW5jdGlvbiBkYShhLGIpe2VhKGEsYik7ZWEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGVhKGEsYil7Y2FbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWJhLmFkZChiW2FdKX1cbnZhciBmYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksaGE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGlhPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG5qYT17fSxrYT17fTtmdW5jdGlvbiBsYShhKXtpZihpYS5jYWxsKGthLGEpKXJldHVybiEwO2lmKGlhLmNhbGwoamEsYSkpcmV0dXJuITE7aWYoaGEudGVzdChhKSlyZXR1cm4ga2FbYV09ITA7amFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gbWEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBuYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxtYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIEIoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciBEPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0RbYl09bmV3IEIoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgb2E9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBwYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShvYSxcbnBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EscGEpO0RbYl09bmV3IEIoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbkQueGxpbmtIcmVmPW5ldyBCKFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtEW2FdPW5ldyBCKGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHFhKGEsYixjLGQpe3ZhciBlPUQuaGFzT3duUHJvcGVydHkoYik/RFtiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KG5hKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9sYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIHJhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHNhPTYwMTAzLHRhPTYwMTA2LHVhPTYwMTA3LHdhPTYwMTA4LHhhPTYwMTE0LHlhPTYwMTA5LHphPTYwMTEwLEFhPTYwMTEyLEJhPTYwMTEzLENhPTYwMTIwLERhPTYwMTE1LEVhPTYwMTE2LEZhPTYwMTIxLEdhPTYwMTI4LEhhPTYwMTI5LElhPTYwMTMwLEphPTYwMTMxO1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIEU9U3ltYm9sLmZvcjtzYT1FKFwicmVhY3QuZWxlbWVudFwiKTt0YT1FKFwicmVhY3QucG9ydGFsXCIpO3VhPUUoXCJyZWFjdC5mcmFnbWVudFwiKTt3YT1FKFwicmVhY3Quc3RyaWN0X21vZGVcIik7eGE9RShcInJlYWN0LnByb2ZpbGVyXCIpO3lhPUUoXCJyZWFjdC5wcm92aWRlclwiKTt6YT1FKFwicmVhY3QuY29udGV4dFwiKTtBYT1FKFwicmVhY3QuZm9yd2FyZF9yZWZcIik7QmE9RShcInJlYWN0LnN1c3BlbnNlXCIpO0NhPUUoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpO0RhPUUoXCJyZWFjdC5tZW1vXCIpO0VhPUUoXCJyZWFjdC5sYXp5XCIpO0ZhPUUoXCJyZWFjdC5ibG9ja1wiKTtFKFwicmVhY3Quc2NvcGVcIik7R2E9RShcInJlYWN0Lm9wYXF1ZS5pZFwiKTtIYT1FKFwicmVhY3QuZGVidWdfdHJhY2VfbW9kZVwiKTtJYT1FKFwicmVhY3Qub2Zmc2NyZWVuXCIpO0phPUUoXCJyZWFjdC5sZWdhY3lfaGlkZGVuXCIpfVxudmFyIEthPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBMYShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9S2EmJmFbS2FdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9dmFyIE1hO2Z1bmN0aW9uIE5hKGEpe2lmKHZvaWQgMD09PU1hKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO01hPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitNYSthfXZhciBPYT0hMTtcbmZ1bmN0aW9uIFBhKGEsYil7aWYoIWF8fE9hKXJldHVyblwiXCI7T2E9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGspe3ZhciBkPWt9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChrKXtkPWt9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChrKXtkPWt9YSgpfX1jYXRjaChrKXtpZihrJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGsuc3RhY2spe2Zvcih2YXIgZT1rLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pcmV0dXJuXCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTt3aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7T2E9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9OYShhKTpcIlwifVxuZnVuY3Rpb24gUWEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE5hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTmEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE5hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTmEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPVBhKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPVBhKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAyMjpyZXR1cm4gYT1QYShhLnR5cGUuX3JlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9UGEoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBSYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHVhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSB4YTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB3YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEJhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIENhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHphOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIHlhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIEFhOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO1xucmV0dXJuIGEuZGlzcGxheU5hbWV8fChcIlwiIT09Yj9cIkZvcndhcmRSZWYoXCIrYitcIilcIjpcIkZvcndhcmRSZWZcIik7Y2FzZSBEYTpyZXR1cm4gUmEoYS50eXBlKTtjYXNlIEZhOnJldHVybiBSYShhLl9yZW5kZXIpO2Nhc2UgRWE6Yj1hLl9wYXlsb2FkO2E9YS5faW5pdDt0cnl7cmV0dXJuIFJhKGEoYikpfWNhdGNoKGMpe319cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiAkYShhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnFhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBhYihhLGIpeyRhKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/YmIoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmYmIoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gYmIoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gZGIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gZWIoYSxiKXthPW0oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1kYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih5KDkxKSk7cmV0dXJuIG0oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IoeSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHkoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBrYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBsYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIG1iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9sYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBuYixvYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1rYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtuYj1uYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtuYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1uYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBwYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHFiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHJiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhxYikuZm9yRWFjaChmdW5jdGlvbihhKXtyYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3FiW2JdPXFiW2FdfSl9KTtmdW5jdGlvbiBzYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cWIuaGFzT3duUHJvcGVydHkoYSkmJnFiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHRiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXNiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHViPW0oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB2YihhLGIpe2lmKGIpe2lmKHViW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IoeSg2MCkpO2lmKCEoXCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IoeSg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IoeSg2MikpO319XG5mdW5jdGlvbiB3YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcih5KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYihhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEliKCl7fXZhciBKYj1HYixLYj0hMSxMYj0hMTtmdW5jdGlvbiBNYigpe2lmKG51bGwhPT16Ynx8bnVsbCE9PUFiKUliKCksRmIoKX1cbmZ1bmN0aW9uIE5iKGEsYixjKXtpZihMYilyZXR1cm4gYShiLGMpO0xiPSEwO3RyeXtyZXR1cm4gSmIoYSxiLGMpfWZpbmFsbHl7TGI9ITEsTWIoKX19XG5mdW5jdGlvbiBPYihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKG51bGw9PT1jKXJldHVybiBudWxsO3ZhciBkPURiKGMpO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT1cbnR5cGVvZiBjKXRocm93IEVycm9yKHkoMjMxLGIsdHlwZW9mIGMpKTtyZXR1cm4gY312YXIgUGI9ITE7aWYoZmEpdHJ5e3ZhciBRYj17fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoUWIsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe1BiPSEwfX0pO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLFFiLFFiKTt3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYil9Y2F0Y2goYSl7UGI9ITF9ZnVuY3Rpb24gUmIoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG4pe3RoaXMub25FcnJvcihuKX19dmFyIFNiPSExLFRiPW51bGwsVWI9ITEsVmI9bnVsbCxXYj17b25FcnJvcjpmdW5jdGlvbihhKXtTYj0hMDtUYj1hfX07ZnVuY3Rpb24gWGIoYSxiLGMsZCxlLGYsZyxoLGspe1NiPSExO1RiPW51bGw7UmIuYXBwbHkoV2IsYXJndW1lbnRzKX1cbmZ1bmN0aW9uIFliKGEsYixjLGQsZSxmLGcsaCxrKXtYYi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoU2Ipe2lmKFNiKXt2YXIgbD1UYjtTYj0hMTtUYj1udWxsfWVsc2UgdGhyb3cgRXJyb3IoeSgxOTgpKTtVYnx8KFViPSEwLFZiPWwpfX1mdW5jdGlvbiBaYihhKXt2YXIgYj1hLGM9YTtpZihhLmFsdGVybmF0ZSlmb3IoO2IucmV0dXJuOyliPWIucmV0dXJuO2Vsc2V7YT1iO2RvIGI9YSwwIT09KGIuZmxhZ3MmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uICRiKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gYWMoYSl7aWYoWmIoYSkhPT1hKXRocm93IEVycm9yKHkoMTg4KSk7fVxuZnVuY3Rpb24gYmMoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9WmIoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IoeSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gYWMoZSksYTtpZihmPT09ZClyZXR1cm4gYWMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih5KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHkoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IoeSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBjYyhhKXthPWJjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gZGMoYSxiKXtmb3IodmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWI7KXtpZihiPT09YXx8Yj09PWMpcmV0dXJuITA7Yj1iLnJldHVybn1yZXR1cm4hMX12YXIgZWMsZmMsZ2MsaGMsaWM9ITEsamM9W10sa2M9bnVsbCxsYz1udWxsLG1jPW51bGwsbmM9bmV3IE1hcCxvYz1uZXcgTWFwLHBjPVtdLHFjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIHJjKGEsYixjLGQsZSl7cmV0dXJue2Jsb2NrZWRPbjphLGRvbUV2ZW50TmFtZTpiLGV2ZW50U3lzdGVtRmxhZ3M6Y3wxNixuYXRpdmVFdmVudDplLHRhcmdldENvbnRhaW5lcnM6W2RdfX1mdW5jdGlvbiBzYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOmtjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpsYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjptYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6bmMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6b2MuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiB0YyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXJjKGIsYyxkLGUsZiksbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZmYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB1YyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBrYz10YyhrYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gbGM9dGMobGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIG1jPXRjKG1jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7bmMuc2V0KGYsdGMobmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLG9jLnNldChmLHRjKG9jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIHZjKGEpe3ZhciBiPXdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9WmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9JGIoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7aGMoYS5sYW5lUHJpb3JpdHksZnVuY3Rpb24oKXtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7Z2MoYyl9KX0pO3JldHVybn19ZWxzZSBpZigzPT09YiYmYy5zdGF0ZU5vZGUuaHlkcmF0ZSl7YS5ibG9ja2VkT249Mz09PWMudGFnP2Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtyZXR1cm59fWEuYmxvY2tlZE9uPW51bGx9XG5mdW5jdGlvbiB4YyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7Zm9yKHZhciBiPWEudGFyZ2V0Q29udGFpbmVyczswPGIubGVuZ3RoOyl7dmFyIGM9eWMoYS5kb21FdmVudE5hbWUsYS5ldmVudFN5c3RlbUZsYWdzLGJbMF0sYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWMpcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJmZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIHpjKGEsYixjKXt4YyhhKSYmYy5kZWxldGUoYil9XG5mdW5jdGlvbiBBYygpe2ZvcihpYz0hMTswPGpjLmxlbmd0aDspe3ZhciBhPWpjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1DYihhLmJsb2NrZWRPbik7bnVsbCE9PWEmJmVjKGEpO2JyZWFrfWZvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXthLmJsb2NrZWRPbj1jO2JyZWFrfWIuc2hpZnQoKX1udWxsPT09YS5ibG9ja2VkT24mJmpjLnNoaWZ0KCl9bnVsbCE9PWtjJiZ4YyhrYykmJihrYz1udWxsKTtudWxsIT09bGMmJnhjKGxjKSYmKGxjPW51bGwpO251bGwhPT1tYyYmeGMobWMpJiYobWM9bnVsbCk7bmMuZm9yRWFjaCh6Yyk7b2MuZm9yRWFjaCh6Yyl9XG5mdW5jdGlvbiBCYyhhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsaWN8fChpYz0hMCxyLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxBYykpKX1cbmZ1bmN0aW9uIENjKGEpe2Z1bmN0aW9uIGIoYil7cmV0dXJuIEJjKGIsYSl9aWYoMDxqYy5sZW5ndGgpe0JjKGpjWzBdLGEpO2Zvcih2YXIgYz0xO2M8amMubGVuZ3RoO2MrKyl7dmFyIGQ9amNbY107ZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCl9fW51bGwhPT1rYyYmQmMoa2MsYSk7bnVsbCE9PWxjJiZCYyhsYyxhKTtudWxsIT09bWMmJkJjKG1jLGEpO25jLmZvckVhY2goYik7b2MuZm9yRWFjaChiKTtmb3IoYz0wO2M8cGMubGVuZ3RoO2MrKylkPXBjW2NdLGQuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpO2Zvcig7MDxwYy5sZW5ndGgmJihjPXBjWzBdLG51bGw9PT1jLmJsb2NrZWRPbik7KXZjKGMpLG51bGw9PT1jLmJsb2NrZWRPbiYmcGMuc2hpZnQoKX1cbmZ1bmN0aW9uIERjKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIEVjPXthbmltYXRpb25lbmQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpEYyhcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpEYyhcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LEZjPXt9LEdjPXt9O1xuZmEmJihHYz1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBFYy5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBFYy5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBFYy50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIEhjKGEpe2lmKEZjW2FdKXJldHVybiBGY1thXTtpZighRWNbYV0pcmV0dXJuIGE7dmFyIGI9RWNbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gR2MpcmV0dXJuIEZjW2FdPWJbY107cmV0dXJuIGF9XG52YXIgSWM9SGMoXCJhbmltYXRpb25lbmRcIiksSmM9SGMoXCJhbmltYXRpb25pdGVyYXRpb25cIiksS2M9SGMoXCJhbmltYXRpb25zdGFydFwiKSxMYz1IYyhcInRyYW5zaXRpb25lbmRcIiksTWM9bmV3IE1hcCxOYz1uZXcgTWFwLE9jPVtcImFib3J0XCIsXCJhYm9ydFwiLEljLFwiYW5pbWF0aW9uRW5kXCIsSmMsXCJhbmltYXRpb25JdGVyYXRpb25cIixLYyxcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcblwibG9zdHBvaW50ZXJjYXB0dXJlXCIsXCJsb3N0UG9pbnRlckNhcHR1cmVcIixcInBsYXlpbmdcIixcInBsYXlpbmdcIixcInByb2dyZXNzXCIsXCJwcm9ncmVzc1wiLFwic2Vla2luZ1wiLFwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLExjLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBQYyhhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXTtlPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO05jLnNldChkLGIpO01jLnNldChkLGUpO2RhKGUsW2RdKX19dmFyIFFjPXIudW5zdGFibGVfbm93O1FjKCk7dmFyIEY9ODtcbmZ1bmN0aW9uIFJjKGEpe2lmKDAhPT0oMSZhKSlyZXR1cm4gRj0xNSwxO2lmKDAhPT0oMiZhKSlyZXR1cm4gRj0xNCwyO2lmKDAhPT0oNCZhKSlyZXR1cm4gRj0xMyw0O3ZhciBiPTI0JmE7aWYoMCE9PWIpcmV0dXJuIEY9MTIsYjtpZigwIT09KGEmMzIpKXJldHVybiBGPTExLDMyO2I9MTkyJmE7aWYoMCE9PWIpcmV0dXJuIEY9MTAsYjtpZigwIT09KGEmMjU2KSlyZXR1cm4gRj05LDI1NjtiPTM1ODQmYTtpZigwIT09YilyZXR1cm4gRj04LGI7aWYoMCE9PShhJjQwOTYpKXJldHVybiBGPTcsNDA5NjtiPTQxODYxMTImYTtpZigwIT09YilyZXR1cm4gRj02LGI7Yj02MjkxNDU2MCZhO2lmKDAhPT1iKXJldHVybiBGPTUsYjtpZihhJjY3MTA4ODY0KXJldHVybiBGPTQsNjcxMDg4NjQ7aWYoMCE9PShhJjEzNDIxNzcyOCkpcmV0dXJuIEY9MywxMzQyMTc3Mjg7Yj04MDUzMDYzNjgmYTtpZigwIT09YilyZXR1cm4gRj0yLGI7aWYoMCE9PSgxMDczNzQxODI0JmEpKXJldHVybiBGPTEsMTA3Mzc0MTgyNDtcbkY9ODtyZXR1cm4gYX1mdW5jdGlvbiBTYyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gMTU7Y2FzZSA5ODpyZXR1cm4gMTA7Y2FzZSA5NzpjYXNlIDk2OnJldHVybiA4O2Nhc2UgOTU6cmV0dXJuIDI7ZGVmYXVsdDpyZXR1cm4gMH19ZnVuY3Rpb24gVGMoYSl7c3dpdGNoKGEpe2Nhc2UgMTU6Y2FzZSAxNDpyZXR1cm4gOTk7Y2FzZSAxMzpjYXNlIDEyOmNhc2UgMTE6Y2FzZSAxMDpyZXR1cm4gOTg7Y2FzZSA5OmNhc2UgODpjYXNlIDc6Y2FzZSA2OmNhc2UgNDpjYXNlIDU6cmV0dXJuIDk3O2Nhc2UgMzpjYXNlIDI6Y2FzZSAxOnJldHVybiA5NTtjYXNlIDA6cmV0dXJuIDkwO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzNTgsYSkpO319XG5mdW5jdGlvbiBVYyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiBGPTA7dmFyIGQ9MCxlPTAsZj1hLmV4cGlyZWRMYW5lcyxnPWEuc3VzcGVuZGVkTGFuZXMsaD1hLnBpbmdlZExhbmVzO2lmKDAhPT1mKWQ9ZixlPUY9MTU7ZWxzZSBpZihmPWMmMTM0MjE3NzI3LDAhPT1mKXt2YXIgaz1mJn5nOzAhPT1rPyhkPVJjKGspLGU9Rik6KGgmPWYsMCE9PWgmJihkPVJjKGgpLGU9RikpfWVsc2UgZj1jJn5nLDAhPT1mPyhkPVJjKGYpLGU9Rik6MCE9PWgmJihkPVJjKGgpLGU9Rik7aWYoMD09PWQpcmV0dXJuIDA7ZD0zMS1WYyhkKTtkPWMmKCgwPmQ/MDoxPDxkKTw8MSktMTtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZnKSl7UmMoYik7aWYoZTw9RilyZXR1cm4gYjtGPWV9Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1WYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIFdjKGEpe2E9YS5wZW5kaW5nTGFuZXMmLTEwNzM3NDE4MjU7cmV0dXJuIDAhPT1hP2E6YSYxMDczNzQxODI0PzEwNzM3NDE4MjQ6MH1mdW5jdGlvbiBYYyhhLGIpe3N3aXRjaChhKXtjYXNlIDE1OnJldHVybiAxO2Nhc2UgMTQ6cmV0dXJuIDI7Y2FzZSAxMjpyZXR1cm4gYT1ZYygyNCZ+YiksMD09PWE/WGMoMTAsYik6YTtjYXNlIDEwOnJldHVybiBhPVljKDE5MiZ+YiksMD09PWE/WGMoOCxiKTphO2Nhc2UgODpyZXR1cm4gYT1ZYygzNTg0Jn5iKSwwPT09YSYmKGE9WWMoNDE4NjExMiZ+YiksMD09PWEmJihhPTUxMikpLGE7Y2FzZSAyOnJldHVybiBiPVljKDgwNTMwNjM2OCZ+YiksMD09PWImJihiPTI2ODQzNTQ1NiksYn10aHJvdyBFcnJvcih5KDM1OCxhKSk7fWZ1bmN0aW9uIFljKGEpe3JldHVybiBhJi1hfWZ1bmN0aW9uIFpjKGEpe2Zvcih2YXIgYj1bXSxjPTA7MzE+YztjKyspYi5wdXNoKGEpO3JldHVybiBifVxuZnVuY3Rpb24gJGMoYSxiLGMpe2EucGVuZGluZ0xhbmVzfD1iO3ZhciBkPWItMTthLnN1c3BlbmRlZExhbmVzJj1kO2EucGluZ2VkTGFuZXMmPWQ7YT1hLmV2ZW50VGltZXM7Yj0zMS1WYyhiKTthW2JdPWN9dmFyIFZjPU1hdGguY2x6MzI/TWF0aC5jbHozMjphZCxiZD1NYXRoLmxvZyxjZD1NYXRoLkxOMjtmdW5jdGlvbiBhZChhKXtyZXR1cm4gMD09PWE/MzI6MzEtKGJkKGEpL2NkfDApfDB9dmFyIGRkPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksZWQ9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksZmQ9ITA7ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7S2J8fEliKCk7dmFyIGU9aGQsZj1LYjtLYj0hMDt0cnl7SGIoZSxhLGIsYyxkKX1maW5hbGx5eyhLYj1mKXx8TWIoKX19ZnVuY3Rpb24gaWQoYSxiLGMsZCl7ZWQoZGQsaGQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQpe2lmKGZkKXt2YXIgZTtpZigoZT0wPT09KGImNCkpJiYwPGpjLmxlbmd0aCYmLTE8cWMuaW5kZXhPZihhKSlhPXJjKG51bGwsYSxiLGMsZCksamMucHVzaChhKTtlbHNle3ZhciBmPXljKGEsYixjLGQpO2lmKG51bGw9PT1mKWUmJnNjKGEsZCk7ZWxzZXtpZihlKXtpZigtMTxxYy5pbmRleE9mKGEpKXthPXJjKGYsYSxiLGMsZCk7amMucHVzaChhKTtyZXR1cm59aWYodWMoZixhLGIsYyxkKSlyZXR1cm47c2MoYSxkKX1qZChhLGIsZCxudWxsLGMpfX19fVxuZnVuY3Rpb24geWMoYSxiLGMsZCl7dmFyIGU9eGIoZCk7ZT13YyhlKTtpZihudWxsIT09ZSl7dmFyIGY9WmIoZSk7aWYobnVsbD09PWYpZT1udWxsO2Vsc2V7dmFyIGc9Zi50YWc7aWYoMTM9PT1nKXtlPSRiKGYpO2lmKG51bGwhPT1lKXJldHVybiBlO2U9bnVsbH1lbHNlIGlmKDM9PT1nKXtpZihmLnN0YXRlTm9kZS5oeWRyYXRlKXJldHVybiAzPT09Zi50YWc/Zi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2U9bnVsbH1lbHNlIGYhPT1lJiYoZT1udWxsKX19amQoYSxiLGQsZSxjKTtyZXR1cm4gbnVsbH12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7XG5mdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9ZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31tKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1tKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9bSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9bSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9bSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPW0oe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1tKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPW0oe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1tKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPW0oe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPW0oe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1tKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1tKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1mYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtmYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9ZmEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1mYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihmYSl7dmFyIHhlO2lmKGZhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7YT1yZTtpZihLYilhKGIpO2Vsc2V7S2I9ITA7dHJ5e0diKGEsYil9ZmluYWxseXtLYj0hMSxNYigpfX19fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2UsSWU9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIEplKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKWlmKCFJZS5jYWxsKGIsY1tkXSl8fCFIZShhW2NbZF1dLGJbY1tkXV0pKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEtlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIExlKGEsYil7dmFyIGM9S2UoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9S2UoYyl9fWZ1bmN0aW9uIE1lKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TWUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTmUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gT2UoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBQZT1mYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmT2UoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSmUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuUGMoXCJjYW5jZWwgY2FuY2VsIGNsaWNrIGNsaWNrIGNsb3NlIGNsb3NlIGNvbnRleHRtZW51IGNvbnRleHRNZW51IGNvcHkgY29weSBjdXQgY3V0IGF1eGNsaWNrIGF1eENsaWNrIGRibGNsaWNrIGRvdWJsZUNsaWNrIGRyYWdlbmQgZHJhZ0VuZCBkcmFnc3RhcnQgZHJhZ1N0YXJ0IGRyb3AgZHJvcCBmb2N1c2luIGZvY3VzIGZvY3Vzb3V0IGJsdXIgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSxcbjApO1BjKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO1BjKE9jLDIpO2Zvcih2YXIgVmU9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLFdlPTA7V2U8VmUubGVuZ3RoO1dlKyspTmMuc2V0KFZlW1dlXSwwKTtlYShcIm9uTW91c2VFbnRlclwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO1xuZWEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtlYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2VhKFwib25Qb2ludGVyTGVhdmVcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7ZGEoXCJvbkNoYW5nZVwiLFwiY2hhbmdlIGNsaWNrIGZvY3VzaW4gZm9jdXNvdXQgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25TZWxlY3RcIixcImZvY3Vzb3V0IGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXNpbiBrZXlkb3duIGtleXVwIG1vdXNlZG93biBtb3VzZXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkJlZm9yZUlucHV0XCIsW1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdKTtkYShcIm9uQ29tcG9zaXRpb25FbmRcIixcImNvbXBvc2l0aW9uZW5kIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmRhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixcImNvbXBvc2l0aW9udXBkYXRlIGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTt2YXIgWGU9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLFllPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KFhlKSk7XG5mdW5jdGlvbiBaZShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztZYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO1plKGUsaCxsKTtmPWt9fX1pZihVYil0aHJvdyBhPVZiLFViPSExLFZiPW51bGwsYTt9XG5mdW5jdGlvbiBHKGEsYil7dmFyIGM9JGUoYiksZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KGFmKGIsYSwyLCExKSxjLmFkZChkKSl9dmFyIGJmPVwiX3JlYWN0TGlzdGVuaW5nXCIrTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7ZnVuY3Rpb24gY2YoYSl7YVtiZl18fChhW2JmXT0hMCxiYS5mb3JFYWNoKGZ1bmN0aW9uKGIpe1llLmhhcyhiKXx8ZGYoYiwhMSxhLG51bGwpO2RmKGIsITAsYSxudWxsKX0pKX1cbmZ1bmN0aW9uIGRmKGEsYixjLGQpe3ZhciBlPTQ8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzRdP2FyZ3VtZW50c1s0XTowLGY9YztcInNlbGVjdGlvbmNoYW5nZVwiPT09YSYmOSE9PWMubm9kZVR5cGUmJihmPWMub3duZXJEb2N1bWVudCk7aWYobnVsbCE9PWQmJiFiJiZZZS5oYXMoYSkpe2lmKFwic2Nyb2xsXCIhPT1hKXJldHVybjtlfD0yO2Y9ZH12YXIgZz0kZShmKSxoPWErXCJfX1wiKyhiP1wiY2FwdHVyZVwiOlwiYnViYmxlXCIpO2cuaGFzKGgpfHwoYiYmKGV8PTQpLGFmKGYsYSxlLGIpLGcuYWRkKGgpKX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQpe3ZhciBlPU5jLmdldChiKTtzd2l0Y2godm9pZCAwPT09ZT8yOmUpe2Nhc2UgMDplPWdkO2JyZWFrO2Nhc2UgMTplPWlkO2JyZWFrO2RlZmF1bHQ6ZT1oZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshUGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gamQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz13YyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59TmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPU1jLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCx4PWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOng9XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6eD1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgSWM6Y2FzZSBKYzpjYXNlIEtjOms9SGQ7YnJlYWs7Y2FzZSBMYzprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB3PTAhPT0oYiY0KSx6PSF3JiZcInNjcm9sbFwiPT09YSx1PXc/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dz1bXTtmb3IodmFyIHQ9ZCxxO251bGwhPT1cbnQ7KXtxPXQ7dmFyIHY9cS5zdGF0ZU5vZGU7NT09PXEudGFnJiZudWxsIT09diYmKHE9dixudWxsIT09dSYmKHY9T2IodCx1KSxudWxsIT12JiZ3LnB1c2goZWYodCx2LHEpKSkpO2lmKHopYnJlYWs7dD10LnJldHVybn0wPHcubGVuZ3RoJiYoaD1uZXcgayhoLHgsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6d30pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJjA9PT0oYiYxNikmJih4PWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJih3Yyh4KXx8eFtmZl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZih4PWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLHg9eD93Yyh4KTpudWxsLG51bGwhPT1cbngmJih6PVpiKHgpLHghPT16fHw1IT09eC50YWcmJjYhPT14LnRhZykpeD1udWxsfWVsc2Ugaz1udWxsLHg9ZDtpZihrIT09eCl7dz1CZDt2PVwib25Nb3VzZUxlYXZlXCI7dT1cIm9uTW91c2VFbnRlclwiO3Q9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl3PVRkLHY9XCJvblBvaW50ZXJMZWF2ZVwiLHU9XCJvblBvaW50ZXJFbnRlclwiLHQ9XCJwb2ludGVyXCI7ej1udWxsPT1rP2g6dWUoayk7cT1udWxsPT14P2g6dWUoeCk7aD1uZXcgdyh2LHQrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD16O2gucmVsYXRlZFRhcmdldD1xO3Y9bnVsbDt3YyhlKT09PWQmJih3PW5ldyB3KHUsdCtcImVudGVyXCIseCxjLGUpLHcudGFyZ2V0PXEsdy5yZWxhdGVkVGFyZ2V0PXosdj13KTt6PXY7aWYoayYmeCliOnt3PWs7dT14O3Q9MDtmb3IocT13O3E7cT1nZihxKSl0Kys7cT0wO2Zvcih2PXU7djt2PWdmKHYpKXErKztmb3IoOzA8dC1xOyl3PWdmKHcpLHQtLTtmb3IoOzA8cS10Oyl1PVxuZ2YodSkscS0tO2Zvcig7dC0tOyl7aWYodz09PXV8fG51bGwhPT11JiZ3PT09dS5hbHRlcm5hdGUpYnJlYWsgYjt3PWdmKHcpO3U9Z2YodSl9dz1udWxsfWVsc2Ugdz1udWxsO251bGwhPT1rJiZoZihnLGgsayx3LCExKTtudWxsIT09eCYmbnVsbCE9PXomJmhmKGcseix4LHcsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIEo9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSlKPUZlO2Vsc2V7Sj1EZTt2YXIgSz1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKEo9RWUpO2lmKEomJihKPUooYSxkKSkpe25lKGcsSixjLGUpO2JyZWFrIGF9SyYmSyhhLGgsZCk7XCJmb2N1c291dFwiPT09YSYmKEs9aC5fd3JhcHBlclN0YXRlKSYmXG5LLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmJiKGgsXCJudW1iZXJcIixoLnZhbHVlKX1LPWQ/dWUoZCk6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmlmKG1lKEspfHxcInRydWVcIj09PUsuY29udGVudEVkaXRhYmxlKVFlPUssUmU9ZCxTZT1udWxsO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOlNlPVJlPVFlPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOlRlPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpUZT0hMTtVZShnLGMsZSk7YnJlYWs7Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmlmKFBlKWJyZWFrO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6VWUoZyxjLGUpfXZhciBRO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBMPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpMPVwib25Db21wb3NpdGlvbkVuZFwiO2JyZWFrIGI7XG5jYXNlIFwiY29tcG9zaXRpb251cGRhdGVcIjpMPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9TD12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoTD1cIm9uQ29tcG9zaXRpb25FbmRcIik6XCJrZXlkb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihMPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO0wmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PUw/XCJvbkNvbXBvc2l0aW9uRW5kXCI9PT1MJiZpZSYmKFE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSxLPW9lKGQsTCksMDxLLmxlbmd0aCYmKEw9bmV3IExkKEwsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpMLGxpc3RlbmVyczpLfSksUT9MLmRhdGE9UTooUT1oZShjKSxudWxsIT09USYmKEwuZGF0YT1RKSkpKTtpZihRPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLDA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcblwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPVEpfXNlKGcsYil9KX1mdW5jdGlvbiBlZihhLGIsYyl7cmV0dXJue2luc3RhbmNlOmEsbGlzdGVuZXI6YixjdXJyZW50VGFyZ2V0OmN9fWZ1bmN0aW9uIG9lKGEsYil7Zm9yKHZhciBjPWIrXCJDYXB0dXJlXCIsZD1bXTtudWxsIT09YTspe3ZhciBlPWEsZj1lLnN0YXRlTm9kZTs1PT09ZS50YWcmJm51bGwhPT1mJiYoZT1mLGY9T2IoYSxjKSxudWxsIT1mJiZkLnVuc2hpZnQoZWYoYSxmLGUpKSxmPU9iKGEsYiksbnVsbCE9ZiYmZC5wdXNoKGVmKGEsZixlKSkpO2E9YS5yZXR1cm59cmV0dXJuIGR9ZnVuY3Rpb24gZ2YoYSl7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIGhmKGEsYixjLGQsZSl7Zm9yKHZhciBmPWIuX3JlYWN0TmFtZSxnPVtdO251bGwhPT1jJiZjIT09ZDspe3ZhciBoPWMsaz1oLmFsdGVybmF0ZSxsPWguc3RhdGVOb2RlO2lmKG51bGwhPT1rJiZrPT09ZClicmVhazs1PT09aC50YWcmJm51bGwhPT1sJiYoaD1sLGU/KGs9T2IoYyxmKSxudWxsIT1rJiZnLnVuc2hpZnQoZWYoYyxrLGgpKSk6ZXx8KGs9T2IoYyxmKSxudWxsIT1rJiZnLnB1c2goZWYoYyxrLGgpKSkpO2M9Yy5yZXR1cm59MCE9PWcubGVuZ3RoJiZhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmd9KX1mdW5jdGlvbiBqZigpe312YXIga2Y9bnVsbCxsZj1udWxsO2Z1bmN0aW9uIG1mKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIG5mKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgb2Y9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAscGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIHFmKGEpezE9PT1hLm5vZGVUeXBlP2EudGV4dENvbnRlbnQ9XCJcIjo5PT09YS5ub2RlVHlwZSYmKGE9YS5ib2R5LG51bGwhPWEmJihhLnRleHRDb250ZW50PVwiXCIpKX1cbmZ1bmN0aW9uIHJmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfWZ1bmN0aW9uIHNmKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciB0Zj0wO2Z1bmN0aW9uIHVmKGEpe3JldHVybnskJHR5cGVvZjpHYSx0b1N0cmluZzphLHZhbHVlT2Y6YX19dmFyIHZmPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLHdmPVwiX19yZWFjdEZpYmVyJFwiK3ZmLHhmPVwiX19yZWFjdFByb3BzJFwiK3ZmLGZmPVwiX19yZWFjdENvbnRhaW5lciRcIit2Zix5Zj1cIl9fcmVhY3RFdmVudHMkXCIrdmY7XG5mdW5jdGlvbiB3YyhhKXt2YXIgYj1hW3dmXTtpZihiKXJldHVybiBiO2Zvcih2YXIgYz1hLnBhcmVudE5vZGU7Yzspe2lmKGI9Y1tmZl18fGNbd2ZdKXtjPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1iLmNoaWxkfHxudWxsIT09YyYmbnVsbCE9PWMuY2hpbGQpZm9yKGE9c2YoYSk7bnVsbCE9PWE7KXtpZihjPWFbd2ZdKXJldHVybiBjO2E9c2YoYSl9cmV0dXJuIGJ9YT1jO2M9YS5wYXJlbnROb2RlfXJldHVybiBudWxsfWZ1bmN0aW9uIENiKGEpe2E9YVt3Zl18fGFbZmZdO3JldHVybiFhfHw1IT09YS50YWcmJjYhPT1hLnRhZyYmMTMhPT1hLnRhZyYmMyE9PWEudGFnP251bGw6YX1mdW5jdGlvbiB1ZShhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYS5zdGF0ZU5vZGU7dGhyb3cgRXJyb3IoeSgzMykpO31mdW5jdGlvbiBEYihhKXtyZXR1cm4gYVt4Zl18fG51bGx9XG5mdW5jdGlvbiAkZShhKXt2YXIgYj1hW3lmXTt2b2lkIDA9PT1iJiYoYj1hW3lmXT1uZXcgU2V0KTtyZXR1cm4gYn12YXIgemY9W10sQWY9LTE7ZnVuY3Rpb24gQmYoYSl7cmV0dXJue2N1cnJlbnQ6YX19ZnVuY3Rpb24gSChhKXswPkFmfHwoYS5jdXJyZW50PXpmW0FmXSx6ZltBZl09bnVsbCxBZi0tKX1mdW5jdGlvbiBJKGEsYil7QWYrKzt6ZltBZl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBDZj17fSxNPUJmKENmKSxOPUJmKCExKSxEZj1DZjtcbmZ1bmN0aW9uIEVmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gQ2Y7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9ZnVuY3Rpb24gRmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiBHZigpe0goTik7SChNKX1mdW5jdGlvbiBIZihhLGIsYyl7aWYoTS5jdXJyZW50IT09Q2YpdGhyb3cgRXJyb3IoeSgxNjgpKTtJKE0sYik7SShOLGMpfVxuZnVuY3Rpb24gSWYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih5KDEwOCxSYShiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBtKHt9LGMsZCl9ZnVuY3Rpb24gSmYoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fENmO0RmPU0uY3VycmVudDtJKE0sYSk7SShOLE4uY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gS2YoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHkoMTY5KSk7Yz8oYT1JZihhLGIsRGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKE4pLEgoTSksSShNLGEpKTpIKE4pO0koTixjKX1cbnZhciBMZj1udWxsLE1mPW51bGwsTmY9ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHksT2Y9ci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrLFBmPXIudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssUWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxSZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxTZj1yLnVuc3RhYmxlX25vdyxUZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLFVmPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksVmY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxXZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFhmPXIudW5zdGFibGVfTG93UHJpb3JpdHksWWY9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksWmY9e30sJGY9dm9pZCAwIT09UmY/UmY6ZnVuY3Rpb24oKXt9LGFnPW51bGwsYmc9bnVsbCxjZz0hMSxkZz1TZigpLE89MUU0PmRnP1NmOmZ1bmN0aW9uKCl7cmV0dXJuIFNmKCktZGd9O1xuZnVuY3Rpb24gZWcoKXtzd2l0Y2goVGYoKSl7Y2FzZSBVZjpyZXR1cm4gOTk7Y2FzZSBWZjpyZXR1cm4gOTg7Y2FzZSBXZjpyZXR1cm4gOTc7Y2FzZSBYZjpyZXR1cm4gOTY7Y2FzZSBZZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMzMikpO319ZnVuY3Rpb24gZmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIFVmO2Nhc2UgOTg6cmV0dXJuIFZmO2Nhc2UgOTc6cmV0dXJuIFdmO2Nhc2UgOTY6cmV0dXJuIFhmO2Nhc2UgOTU6cmV0dXJuIFlmO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGdnKGEsYil7YT1mZyhhKTtyZXR1cm4gTmYoYSxiKX1mdW5jdGlvbiBoZyhhLGIsYyl7YT1mZyhhKTtyZXR1cm4gT2YoYSxiLGMpfWZ1bmN0aW9uIGlnKCl7aWYobnVsbCE9PWJnKXt2YXIgYT1iZztiZz1udWxsO1BmKGEpfWpnKCl9XG5mdW5jdGlvbiBqZygpe2lmKCFjZyYmbnVsbCE9PWFnKXtjZz0hMDt2YXIgYT0wO3RyeXt2YXIgYj1hZztnZyg5OSxmdW5jdGlvbigpe2Zvcig7YTxiLmxlbmd0aDthKyspe3ZhciBjPWJbYV07ZG8gYz1jKCEwKTt3aGlsZShudWxsIT09Yyl9fSk7YWc9bnVsbH1jYXRjaChjKXt0aHJvdyBudWxsIT09YWcmJihhZz1hZy5zbGljZShhKzEpKSxPZihVZixpZyksYzt9ZmluYWxseXtjZz0hMX19fXZhciBrZz1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBsZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW0oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgbWc9QmYobnVsbCksbmc9bnVsbCxvZz1udWxsLHBnPW51bGw7ZnVuY3Rpb24gcWcoKXtwZz1vZz1uZz1udWxsfVxuZnVuY3Rpb24gcmcoYSl7dmFyIGI9bWcuY3VycmVudDtIKG1nKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHNnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKChhLmNoaWxkTGFuZXMmYik9PT1iKWlmKG51bGw9PT1jfHwoYy5jaGlsZExhbmVzJmIpPT09YilicmVhaztlbHNlIGMuY2hpbGRMYW5lc3w9YjtlbHNlIGEuY2hpbGRMYW5lc3w9YixudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9Yik7YT1hLnJldHVybn19ZnVuY3Rpb24gdGcoYSxiKXtuZz1hO3BnPW9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYodWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gdmcoYSxiKXtpZihwZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpcGc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PW9nKXtpZihudWxsPT09bmcpdGhyb3cgRXJyb3IoeSgzMDgpKTtvZz1iO25nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2Ugb2c9b2cubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHdnPSExO2Z1bmN0aW9uIHhnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsZmlyc3RCYXNlVXBkYXRlOm51bGwsbGFzdEJhc2VVcGRhdGU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHlnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIHpnKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fWZ1bmN0aW9uIEFnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hKXthPWEuc2hhcmVkO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9fVxuZnVuY3Rpb24gQmcoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIENnKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7d2c9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbj1hLmFsdGVybmF0ZTtpZihudWxsIT09bil7bj1uLnVwZGF0ZVF1ZXVlO3ZhciBBPW4ubGFzdEJhc2VVcGRhdGU7QSE9PWcmJihudWxsPT09QT9uLmZpcnN0QmFzZVVwZGF0ZT1sOkEubmV4dD1sLG4ubGFzdEJhc2VVcGRhdGU9ayl9fWlmKG51bGwhPT1mKXtBPWUuYmFzZVN0YXRlO2c9MDtuPWw9az1udWxsO2Rve2g9Zi5sYW5lO3ZhciBwPWYuZXZlbnRUaW1lO2lmKChkJmgpPT09aCl7bnVsbCE9PW4mJihuPW4ubmV4dD17ZXZlbnRUaW1lOnAsbGFuZTowLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLFxubmV4dDpudWxsfSk7YTp7dmFyIEM9YSx4PWY7aD1iO3A9Yztzd2l0Y2goeC50YWcpe2Nhc2UgMTpDPXgucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyl7QT1DLmNhbGwocCxBLGgpO2JyZWFrIGF9QT1DO2JyZWFrIGE7Y2FzZSAzOkMuZmxhZ3M9Qy5mbGFncyYtNDA5N3w2NDtjYXNlIDA6Qz14LnBheWxvYWQ7aD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQz9DLmNhbGwocCxBLGgpOkM7aWYobnVsbD09PWh8fHZvaWQgMD09PWgpYnJlYWsgYTtBPW0oe30sQSxoKTticmVhayBhO2Nhc2UgMjp3Zz0hMH19bnVsbCE9PWYuY2FsbGJhY2smJihhLmZsYWdzfD0zMixoPWUuZWZmZWN0cyxudWxsPT09aD9lLmVmZmVjdHM9W2ZdOmgucHVzaChmKSl9ZWxzZSBwPXtldmVudFRpbWU6cCxsYW5lOmgsdGFnOmYudGFnLHBheWxvYWQ6Zi5wYXlsb2FkLGNhbGxiYWNrOmYuY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bj8obD1uPXAsaz1BKTpuPW4ubmV4dD1wLGd8PWg7Zj1mLm5leHQ7aWYobnVsbD09PVxuZilpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSBmPWgubmV4dCxoLm5leHQ9bnVsbCxlLmxhc3RCYXNlVXBkYXRlPWgsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpO251bGw9PT1uJiYoaz1BKTtlLmJhc2VTdGF0ZT1rO2UuZmlyc3RCYXNlVXBkYXRlPWw7ZS5sYXN0QmFzZVVwZGF0ZT1uO0RnfD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9QX19ZnVuY3Rpb24gRWcoYSxiLGMpe2E9Yi5lZmZlY3RzO2IuZWZmZWN0cz1udWxsO2lmKG51bGwhPT1hKWZvcihiPTA7YjxhLmxlbmd0aDtiKyspe3ZhciBkPWFbYl0sZT1kLmNhbGxiYWNrO2lmKG51bGwhPT1lKXtkLmNhbGxiYWNrPW51bGw7ZD1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlKXRocm93IEVycm9yKHkoMTkxLGUpKTtlLmNhbGwoZCl9fX12YXIgRmc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7XG5mdW5jdGlvbiBHZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgS2c9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/WmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9emcoZCxlKTtmLnRhZz0xO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtBZyhhLGYpO0pnKGEsZSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1IZygpLGQ9SWcoYSksZT16ZyhjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPVxuYik7QWcoYSxlKTtKZyhhLGQsYyl9fTtmdW5jdGlvbiBMZyhhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFKZShjLGQpfHwhSmUoZSxmKTohMH1cbmZ1bmN0aW9uIE1nKGEsYixjKXt2YXIgZD0hMSxlPUNmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPXZnKGYpOihlPUZmKGIpP0RmOk0uY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0VmKGEsZSk6Q2YpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1LZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIE5nKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIE9nKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9Rmc7eGcoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD12ZyhmKTooZj1GZihiKT9EZjpNLmN1cnJlbnQsZS5jb250ZXh0PUVmKGEsZikpO0NnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihHZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZLZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxDZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00KX12YXIgUGc9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFFnKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcih5KDE0NyxhKSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWUpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZC5yZWZzO2I9PT1GZyYmKGI9ZC5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltlXTpiW2VdPWF9O2IuX3N0cmluZ1JlZj1lO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcih5KDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcih5KDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gUmcoYSxiKXtpZihcInRleHRhcmVhXCIhPT1hLnR5cGUpdGhyb3cgRXJyb3IoeSgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIpKTt9XG5mdW5jdGlvbiBTZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmZsYWdzPTh9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPVRnKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzPTIsXG5jKTpkO2IuZmxhZ3M9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZmxhZ3M9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPVVnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7aWYobnVsbCE9PWImJmIuZWxlbWVudFR5cGU9PT1jLnR5cGUpcmV0dXJuIGQ9ZShiLGMucHJvcHMpLGQucmVmPVFnKGEsYixjKSxkLnJldHVybj1hLGQ7ZD1WZyhjLnR5cGUsYy5rZXksYy5wcm9wcyxudWxsLGEubW9kZSxkKTtkLnJlZj1RZyhhLGIsYyk7ZC5yZXR1cm49YTtyZXR1cm4gZH1mdW5jdGlvbiBsKGEsYixjLGQpe2lmKG51bGw9PT1ifHw0IT09Yi50YWd8fGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1cbldnKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBuKGEsYixjLGQsZil7aWYobnVsbD09PWJ8fDchPT1iLnRhZylyZXR1cm4gYj1YZyhjLGEubW9kZSxkLGYpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIEEoYSxiLGMpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYnx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPVVnKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjPVZnKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLGMucmVmPVFnKGEsbnVsbCxiKSxjLnJldHVybj1hLGM7Y2FzZSB0YTpyZXR1cm4gYj1XZyhiLGEubW9kZSxjKSxiLnJldHVybj1hLGJ9aWYoUGcoYil8fExhKGIpKXJldHVybiBiPVhnKGIsXG5hLm1vZGUsYyxudWxsKSxiLnJldHVybj1hLGI7UmcoYSxiKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBwKGEsYixjLGQpe3ZhciBlPW51bGwhPT1iP2Iua2V5Om51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBjLmtleT09PWU/Yy50eXBlPT09dWE/bihhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGUpOmsoYSxiLGMsZCk6bnVsbDtjYXNlIHRhOnJldHVybiBjLmtleT09PWU/bChhLGIsYyxkKTpudWxsfWlmKFBnKGMpfHxMYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDpuKGEsYixjLGQsbnVsbCk7UmcoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDKGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkfHxcIm51bWJlclwiPT09dHlwZW9mIGQpcmV0dXJuIGE9YS5nZXQoYyl8fFxubnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2Ugc2E6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGQudHlwZT09PXVhP24oYixhLGQucHJvcHMuY2hpbGRyZW4sZSxkLmtleSk6ayhiLGEsZCxlKTtjYXNlIHRhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpfWlmKFBnKGQpfHxMYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxuKGIsYSxkLGUsbnVsbCk7UmcoYixkKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB4KGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCx1PWcsej1nPTAscT1udWxsO251bGwhPT11JiZ6PGgubGVuZ3RoO3orKyl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgbj1wKGUsdSxoW3pdLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PVxubi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHopO251bGw9PT10P2w9bjp0LnNpYmxpbmc9bjt0PW47dT1xfWlmKHo9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLGw7aWYobnVsbD09PXUpe2Zvcig7ejxoLmxlbmd0aDt6KyspdT1BKGUsaFt6XSxrKSxudWxsIT09dSYmKGc9Zih1LGcseiksbnVsbD09PXQ/bD11OnQuc2libGluZz11LHQ9dSk7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpO3o8aC5sZW5ndGg7eisrKXE9Qyh1LGUseixoW3pdLGspLG51bGwhPT1xJiYoYSYmbnVsbCE9PXEuYWx0ZXJuYXRlJiZ1LmRlbGV0ZShudWxsPT09cS5rZXk/ejpxLmtleSksZz1mKHEsZyx6KSxudWxsPT09dD9sPXE6dC5zaWJsaW5nPXEsdD1xKTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIHcoZSxnLGgsayl7dmFyIGw9TGEoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IoeSgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1cbmgpdGhyb3cgRXJyb3IoeSgxNTEpKTtmb3IodmFyIHQ9bD1udWxsLHU9Zyx6PWc9MCxxPW51bGwsbj1oLm5leHQoKTtudWxsIT09dSYmIW4uZG9uZTt6Kyssbj1oLm5leHQoKSl7dS5pbmRleD56PyhxPXUsdT1udWxsKTpxPXUuc2libGluZzt2YXIgdz1wKGUsdSxuLnZhbHVlLGspO2lmKG51bGw9PT13KXtudWxsPT09dSYmKHU9cSk7YnJlYWt9YSYmdSYmbnVsbD09PXcuYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKHcsZyx6KTtudWxsPT09dD9sPXc6dC5zaWJsaW5nPXc7dD13O3U9cX1pZihuLmRvbmUpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1BKGUsbi52YWx1ZSxrKSxudWxsIT09biYmKGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7cmV0dXJuIGx9Zm9yKHU9ZChlLHUpOyFuLmRvbmU7eisrLG49aC5uZXh0KCkpbj1DKHUsZSx6LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJlxudS5kZWxldGUobnVsbD09PW4ua2V5P3o6bi5rZXkpLGc9ZihuLGcseiksbnVsbD09PXQ/bD1uOnQuc2libGluZz1uLHQ9bik7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09dWEmJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2Ugc2E6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT11YSl7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxrLnNpYmxpbmcpO1xuZD1lKGssZi5wcm9wcyk7ZC5yZWY9UWcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT11YT8oZD1YZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VmcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UWcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPVxuV2coZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VWcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoUGcoZikpcmV0dXJuIHgoYSxkLGYsaCk7aWYoTGEoZikpcmV0dXJuIHcoYSxkLGYsaCk7bCYmUmcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMjI6Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTp0aHJvdyBFcnJvcih5KDE1MixSYShhLnR5cGUpfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBZZz1TZyghMCksWmc9U2coITEpLCRnPXt9LGFoPUJmKCRnKSxiaD1CZigkZyksY2g9QmYoJGcpO1xuZnVuY3Rpb24gZGgoYSl7aWYoYT09PSRnKXRocm93IEVycm9yKHkoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZWgoYSxiKXtJKGNoLGIpO0koYmgsYSk7SShhaCwkZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTptYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9bWIoYixhKX1IKGFoKTtJKGFoLGIpfWZ1bmN0aW9uIGZoKCl7SChhaCk7SChiaCk7SChjaCl9ZnVuY3Rpb24gZ2goYSl7ZGgoY2guY3VycmVudCk7dmFyIGI9ZGgoYWguY3VycmVudCk7dmFyIGM9bWIoYixhLnR5cGUpO2IhPT1jJiYoSShiaCxhKSxJKGFoLGMpKX1mdW5jdGlvbiBoaChhKXtiaC5jdXJyZW50PT09YSYmKEgoYWgpLEgoYmgpKX12YXIgUD1CZigwKTtcbmZ1bmN0aW9uIGloKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYn1lbHNlIGlmKG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkLnJldHVybj1iO2I9Yi5jaGlsZDtjb250aW51ZX1pZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9cmV0dXJuIG51bGx9dmFyIGpoPW51bGwsa2g9bnVsbCxsaD0hMTtcbmZ1bmN0aW9uIG1oKGEsYil7dmFyIGM9bmgoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2MuZmxhZ3M9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfWZ1bmN0aW9uIG9oKGEsYil7c3dpdGNoKGEudGFnKXtjYXNlIDU6dmFyIGM9YS50eXBlO2I9MSE9PWIubm9kZVR5cGV8fGMudG9Mb3dlckNhc2UoKSE9PWIubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmI7cmV0dXJuIG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgMTM6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBwaChhKXtpZihsaCl7dmFyIGI9a2g7aWYoYil7dmFyIGM9YjtpZighb2goYSxiKSl7Yj1yZihjLm5leHRTaWJsaW5nKTtpZighYnx8IW9oKGEsYikpe2EuZmxhZ3M9YS5mbGFncyYtMTAyNXwyO2xoPSExO2poPWE7cmV0dXJufW1oKGpoLGMpfWpoPWE7a2g9cmYoYi5maXJzdENoaWxkKX1lbHNlIGEuZmxhZ3M9YS5mbGFncyYtMTAyNXwyLGxoPSExLGpoPWF9fWZ1bmN0aW9uIHFoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtqaD1hfVxuZnVuY3Rpb24gcmgoYSl7aWYoYSE9PWpoKXJldHVybiExO2lmKCFsaClyZXR1cm4gcWgoYSksbGg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFuZihiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9a2g7YjspbWgoYSxiKSxiPXJmKGIubmV4dFNpYmxpbmcpO3FoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IoeSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7a2g9cmYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ31raD1udWxsfX1lbHNlIGtoPWpoP3JmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gc2goKXtraD1qaD1udWxsO2xoPSExfXZhciB0aD1bXTtmdW5jdGlvbiB1aCgpe2Zvcih2YXIgYT0wO2E8dGgubGVuZ3RoO2ErKyl0aFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO3RoLmxlbmd0aD0wfXZhciB2aD1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHdoPXJhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLHhoPTAsUj1udWxsLFM9bnVsbCxUPW51bGwseWg9ITEsemg9ITE7ZnVuY3Rpb24gQWgoKXt0aHJvdyBFcnJvcih5KDMyMSkpO31mdW5jdGlvbiBCaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gQ2goYSxiLGMsZCxlLGYpe3hoPWY7Uj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7dmguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9EaDpFaDthPWMoZCxlKTtpZih6aCl7Zj0wO2Rve3poPSExO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IoeSgzMDEpKTtmKz0xO1Q9Uz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDt2aC5jdXJyZW50PUZoO2E9YyhkLGUpfXdoaWxlKHpoKX12aC5jdXJyZW50PUdoO2I9bnVsbCE9PVMmJm51bGwhPT1TLm5leHQ7eGg9MDtUPVM9Uj1udWxsO3loPSExO2lmKGIpdGhyb3cgRXJyb3IoeSgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBIaCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1UP1IubWVtb2l6ZWRTdGF0ZT1UPWE6VD1ULm5leHQ9YTtyZXR1cm4gVH1cbmZ1bmN0aW9uIEloKCl7aWYobnVsbD09PVMpe3ZhciBhPVIuYWx0ZXJuYXRlO2E9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGx9ZWxzZSBhPVMubmV4dDt2YXIgYj1udWxsPT09VD9SLm1lbW9pemVkU3RhdGU6VC5uZXh0O2lmKG51bGwhPT1iKVQ9YixTPWE7ZWxzZXtpZihudWxsPT09YSl0aHJvdyBFcnJvcih5KDMxMCkpO1M9YTthPXttZW1vaXplZFN0YXRlOlMubWVtb2l6ZWRTdGF0ZSxiYXNlU3RhdGU6Uy5iYXNlU3RhdGUsYmFzZVF1ZXVlOlMuYmFzZVF1ZXVlLHF1ZXVlOlMucXVldWUsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWF9cmV0dXJuIFR9ZnVuY3Rpb24gSmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBLaChhKXt2YXIgYj1JaCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih5KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPVMsZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5sYW5lO2lmKCh4aCZsKT09PWwpbnVsbCE9PWgmJihoPWgubmV4dD17bGFuZTowLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfSksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7ZWxzZXt2YXIgbj17bGFuZTpsLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsXG5lYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1oPyhnPWg9bixmPWQpOmg9aC5uZXh0PW47Ui5sYW5lc3w9bDtEZ3w9bH1rPWsubmV4dH13aGlsZShudWxsIT09ayYmayE9PWUpO251bGw9PT1oP2Y9ZDpoLm5leHQ9ZztIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZjtiLmJhc2VRdWV1ZT1oO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1yZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gTGgoYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KHVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19XG5mdW5jdGlvbiBNaChhLGIsYyl7dmFyIGQ9Yi5fZ2V0VmVyc2lvbjtkPWQoYi5fc291cmNlKTt2YXIgZT1iLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5O2lmKG51bGwhPT1lKWE9ZT09PWQ7ZWxzZSBpZihhPWEubXV0YWJsZVJlYWRMYW5lcyxhPSh4aCZhKT09PWEpYi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1kLHRoLnB1c2goYik7aWYoYSlyZXR1cm4gYyhiLl9zb3VyY2UpO3RoLnB1c2goYik7dGhyb3cgRXJyb3IoeSgzNTApKTt9XG5mdW5jdGlvbiBOaChhLGIsYyxkKXt2YXIgZT1VO2lmKG51bGw9PT1lKXRocm93IEVycm9yKHkoMzQ5KSk7dmFyIGY9Yi5fZ2V0VmVyc2lvbixnPWYoYi5fc291cmNlKSxoPXZoLmN1cnJlbnQsaz1oLnVzZVN0YXRlKGZ1bmN0aW9uKCl7cmV0dXJuIE1oKGUsYixjKX0pLGw9a1sxXSxuPWtbMF07az1UO3ZhciBBPWEubWVtb2l6ZWRTdGF0ZSxwPUEucmVmcyxDPXAuZ2V0U25hcHNob3QseD1BLnNvdXJjZTtBPUEuc3Vic2NyaWJlO3ZhciB3PVI7YS5tZW1vaXplZFN0YXRlPXtyZWZzOnAsc291cmNlOmIsc3Vic2NyaWJlOmR9O2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cC5nZXRTbmFwc2hvdD1jO3Auc2V0U25hcHNob3Q9bDt2YXIgYT1mKGIuX3NvdXJjZSk7aWYoIUhlKGcsYSkpe2E9YyhiLl9zb3VyY2UpO0hlKG4sYSl8fChsKGEpLGE9SWcodyksZS5tdXRhYmxlUmVhZExhbmVzfD1hJmUucGVuZGluZ0xhbmVzKTthPWUubXV0YWJsZVJlYWRMYW5lcztlLmVudGFuZ2xlZExhbmVzfD1hO2Zvcih2YXIgZD1cbmUuZW50YW5nbGVtZW50cyxoPWE7MDxoOyl7dmFyIGs9MzEtVmMoaCksdj0xPDxrO2Rba118PWE7aCY9fnZ9fX0sW2MsYixkXSk7aC51c2VFZmZlY3QoZnVuY3Rpb24oKXtyZXR1cm4gZChiLl9zb3VyY2UsZnVuY3Rpb24oKXt2YXIgYT1wLmdldFNuYXBzaG90LGM9cC5zZXRTbmFwc2hvdDt0cnl7YyhhKGIuX3NvdXJjZSkpO3ZhciBkPUlnKHcpO2UubXV0YWJsZVJlYWRMYW5lc3w9ZCZlLnBlbmRpbmdMYW5lc31jYXRjaChxKXtjKGZ1bmN0aW9uKCl7dGhyb3cgcTt9KX19KX0sW2IsZF0pO0hlKEMsYykmJkhlKHgsYikmJkhlKEEsZCl8fChhPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOm59LGEuZGlzcGF0Y2g9bD1PaC5iaW5kKG51bGwsUixhKSxrLnF1ZXVlPWEsay5iYXNlUXVldWU9bnVsbCxuPU1oKGUsYixjKSxrLm1lbW9pemVkU3RhdGU9ay5iYXNlU3RhdGU9bik7cmV0dXJuIG59XG5mdW5jdGlvbiBQaChhLGIsYyl7dmFyIGQ9SWgoKTtyZXR1cm4gTmgoZCxhLGIsYyl9ZnVuY3Rpb24gUWgoYSl7dmFyIGI9SGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6SmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBSaChhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1SLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGx9LFIudXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gU2goYSl7dmFyIGI9SGgoKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX1mdW5jdGlvbiBUaCgpe3JldHVybiBJaCgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gVWgoYSxiLGMsZCl7dmFyIGU9SGgoKTtSLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1SaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gVmgoYSxiLGMsZCl7dmFyIGU9SWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Uyl7dmFyIGc9Uy5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZCaChkLGcuZGVwcykpe1JoKGIsYyxmLGQpO3JldHVybn19Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsZixkKX1mdW5jdGlvbiBXaChhLGIpe3JldHVybiBVaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFhoKGEsYil7cmV0dXJuIFZoKDUxNiw0LGEsYil9ZnVuY3Rpb24gWWgoYSxiKXtyZXR1cm4gVmgoNCwyLGEsYil9ZnVuY3Rpb24gWmgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1cbmZ1bmN0aW9uICRoKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVmgoNCwyLFpoLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIGFpKCl7fWZ1bmN0aW9uIGJpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIGNpKGEsYil7dmFyIGM9SWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJkJoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gZGkoYSxiKXt2YXIgYz1lZygpO2dnKDk4PmM/OTg6YyxmdW5jdGlvbigpe2EoITApfSk7Z2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGM9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2EoITEpLGIoKX1maW5hbGx5e3doLnRyYW5zaXRpb249Y319KX1cbmZ1bmN0aW9uIE9oKGEsYixjKXt2YXIgZD1IZygpLGU9SWcoYSksZj17bGFuZTplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9LGc9Yi5wZW5kaW5nO251bGw9PT1nP2YubmV4dD1mOihmLm5leHQ9Zy5uZXh0LGcubmV4dD1mKTtiLnBlbmRpbmc9ZjtnPWEuYWx0ZXJuYXRlO2lmKGE9PT1SfHxudWxsIT09ZyYmZz09PVIpemg9eWg9ITA7ZWxzZXtpZigwPT09YS5sYW5lcyYmKG51bGw9PT1nfHwwPT09Zy5sYW5lcykmJihnPWIubGFzdFJlbmRlcmVkUmVkdWNlcixudWxsIT09ZykpdHJ5e3ZhciBoPWIubGFzdFJlbmRlcmVkU3RhdGUsaz1nKGgsYyk7Zi5lYWdlclJlZHVjZXI9ZztmLmVhZ2VyU3RhdGU9aztpZihIZShrLGgpKXJldHVybn1jYXRjaChsKXt9ZmluYWxseXt9SmcoYSxlLGQpfX1cbnZhciBHaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6QWgsdXNlQ29udGV4dDpBaCx1c2VFZmZlY3Q6QWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpBaCx1c2VMYXlvdXRFZmZlY3Q6QWgsdXNlTWVtbzpBaCx1c2VSZWR1Y2VyOkFoLHVzZVJlZjpBaCx1c2VTdGF0ZTpBaCx1c2VEZWJ1Z1ZhbHVlOkFoLHVzZURlZmVycmVkVmFsdWU6QWgsdXNlVHJhbnNpdGlvbjpBaCx1c2VNdXRhYmxlU291cmNlOkFoLHVzZU9wYXF1ZUlkZW50aWZpZXI6QWgsdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxEaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiKXtIaCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpXaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gVWgoNCwyLFpoLmJpbmQobnVsbCxcbmIsYSksYyl9LHVzZUxheW91dEVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiBVaCg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPUhoKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPUhoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9T2guYmluZChudWxsLFIsYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOlNoLHVzZVN0YXRlOlFoLHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1RaChhKSxjPWJbMF0sZD1iWzFdO1doKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjtcbndoLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1RaCghMSksYj1hWzBdO2E9ZGkuYmluZChudWxsLGFbMV0pO1NoKGEpO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2QubWVtb2l6ZWRTdGF0ZT17cmVmczp7Z2V0U25hcHNob3Q6YixzZXRTbmFwc2hvdDpudWxsfSxzb3VyY2U6YSxzdWJzY3JpYmU6Y307cmV0dXJuIE5oKGQsYSxiLGMpfSx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7aWYobGgpe3ZhciBhPSExLGI9dWYoZnVuY3Rpb24oKXthfHwoYT0hMCxjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKSk7dGhyb3cgRXJyb3IoeSgzNTUpKTt9KSxjPVFoKGIpWzFdOzA9PT0oUi5tb2RlJjIpJiYoUi5mbGFnc3w9NTE2LFJoKDUsZnVuY3Rpb24oKXtjKFwicjpcIisodGYrKykudG9TdHJpbmcoMzYpKX0sXG52b2lkIDAsbnVsbCkpO3JldHVybiBifWI9XCJyOlwiKyh0ZisrKS50b1N0cmluZygzNik7UWgoYik7cmV0dXJuIGJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRWg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmJpLHVzZUNvbnRleHQ6dmcsdXNlRWZmZWN0OlhoLHVzZUltcGVyYXRpdmVIYW5kbGU6JGgsdXNlTGF5b3V0RWZmZWN0OlloLHVzZU1lbW86Y2ksdXNlUmVkdWNlcjpLaCx1c2VSZWY6VGgsdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpfSx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9S2goSmgpLGM9YlswXSxkPWJbMV07WGgoZnVuY3Rpb24oKXt2YXIgYj13aC50cmFuc2l0aW9uO3doLnRyYW5zaXRpb249MTt0cnl7ZChhKX1maW5hbGx5e3doLnRyYW5zaXRpb249Yn19LFthXSk7cmV0dXJuIGN9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1LaChKaClbMF07cmV0dXJuW1RoKCkuY3VycmVudCxcbmFdfSx1c2VNdXRhYmxlU291cmNlOlBoLHVzZU9wYXF1ZUlkZW50aWZpZXI6ZnVuY3Rpb24oKXtyZXR1cm4gS2goSmgpWzBdfSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEZoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6TGgsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUxoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9TGgoSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIExoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxlaT1yYS5SZWFjdEN1cnJlbnRPd25lcix1Zz0hMTtmdW5jdGlvbiBmaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1pnKGIsbnVsbCxjLGQpOllnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIGdpKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjt0ZyhiLGUpO2Q9Q2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhdWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tNTE3LGEubGFuZXMmPX5lLGhpKGEsYixlKTtiLmZsYWdzfD0xO2ZpKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFqaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxraShhLGIsZyxkLGUsZik7YT1WZyhjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoMD09PShlJmYpJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOkplLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuIGhpKGEsYixmKTtiLmZsYWdzfD0xO2E9VGcoZyxkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBraShhLGIsYyxkLGUsZil7aWYobnVsbCE9PWEmJkplKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZilpZih1Zz0hMSwwIT09KGYmZSkpMCE9PShhLmZsYWdzJjE2Mzg0KSYmKHVnPSEwKTtlbHNlIHJldHVybiBiLmxhbmVzPWEubGFuZXMsaGkoYSxiLGYpO3JldHVybiBsaShhLGIsYyxkLGYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5jaGlsZHJlbixmPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsO2lmKFwiaGlkZGVuXCI9PT1kLm1vZGV8fFwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIj09PWQubW9kZSlpZigwPT09KGIubW9kZSY0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLGMpO2Vsc2UgaWYoMCE9PShjJjEwNzM3NDE4MjQpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjB9LG5pKGIsbnVsbCE9PWY/Zi5iYXNlTGFuZXM6Yyk7ZWxzZSByZXR1cm4gYT1udWxsIT09Zj9mLmJhc2VMYW5lc3xjOmMsYi5sYW5lcz1iLmNoaWxkTGFuZXM9MTA3Mzc0MTgyNCxiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczphfSxuaShiLGEpLG51bGw7ZWxzZSBudWxsIT09Zj8oZD1mLmJhc2VMYW5lc3xjLGIubWVtb2l6ZWRTdGF0ZT1udWxsKTpkPWMsbmkoYixkKTtmaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIG9pKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTEyOH1mdW5jdGlvbiBsaShhLGIsYyxkLGUpe3ZhciBmPUZmKGMpP0RmOk0uY3VycmVudDtmPUVmKGIsZik7dGcoYixlKTtjPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHBpKGEsYixjLGQsZSl7aWYoRmYoYykpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTt0ZyhiLGUpO2lmKG51bGw9PT1iLnN0YXRlTm9kZSludWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKSxNZyhiLGMsZCksT2coYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9dmcobCk6KGw9RmYoYyk/RGY6TS5jdXJyZW50LGw9RWYoYixsKSk7dmFyIG49Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsQT1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7QXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1kfHxrIT09bCkmJk5nKGIsZyxkLGwpO3dnPSExO3ZhciBwPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXA7Q2coYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHAhPT1rfHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbiYmKEdnKGIsYyxuLGQpLGs9Yi5tZW1vaXplZFN0YXRlKSwoaD13Z3x8TGcoYixjLGgsZCxwLGssbCkpPyhBfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnR8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsTW91bnQmJmcuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCkpLFwiZnVuY3Rpb25cIj09PVxudHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00KSxkPSExKX1lbHNle2c9Yi5zdGF0ZU5vZGU7eWcoYSxiKTtoPWIubWVtb2l6ZWRQcm9wcztsPWIudHlwZT09PWIuZWxlbWVudFR5cGU/aDpsZyhiLnR5cGUsaCk7Zy5wcm9wcz1sO0E9Yi5wZW5kaW5nUHJvcHM7cD1nLmNvbnRleHQ7az1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWs/az12ZyhrKTooaz1GZihjKT9EZjpNLmN1cnJlbnQsaz1FZihiLGspKTt2YXIgQz1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wczsobj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgQ3x8XG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PUF8fHAhPT1rKSYmTmcoYixnLGQsayk7d2c9ITE7cD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO3ZhciB4PWIubWVtb2l6ZWRTdGF0ZTtoIT09QXx8cCE9PXh8fE4uY3VycmVudHx8d2c/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBDJiYoR2coYixjLEMsZCkseD1iLm1lbW9pemVkU3RhdGUpLChsPXdnfHxMZyhiLGMsbCxkLHAseCxrKSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsXG54LGspLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQseCxrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8XG5oPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnA9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0yNTYpLGQ9ITEpfXJldHVybiBxaShhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBxaShhLGIsYyxkLGUsZil7b2koYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmS2YoYixjLCExKSxoaShhLGIsZik7ZD1iLnN0YXRlTm9kZTtlaS5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmZsYWdzfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVlnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WWcoYixudWxsLGgsZikpOmZpKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJktmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcmkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9IZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZIZihhLGIuY29udGV4dCwhMSk7ZWgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIHNpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlMYW5lOjB9O1xuZnVuY3Rpb24gdGkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9UC5jdXJyZW50LGY9ITEsZzsoZz0wIT09KGIuZmxhZ3MmNjQpKXx8KGc9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtnPyhmPSEwLGIuZmxhZ3MmPS02NSk6bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGV8fHZvaWQgMD09PWQuZmFsbGJhY2t8fCEwPT09ZC51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8KGV8PTEpO0koUCxlJjEpO2lmKG51bGw9PT1hKXt2b2lkIDAhPT1kLmZhbGxiYWNrJiZwaChiKTthPWQuY2hpbGRyZW47ZT1kLmZhbGxiYWNrO2lmKGYpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sYi5tZW1vaXplZFN0YXRlPXNpLGE7aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUpcmV0dXJuIGE9dWkoYixhLGUsYyksYi5jaGlsZC5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6Y30sXG5iLm1lbW9pemVkU3RhdGU9c2ksYi5sYW5lcz0zMzU1NDQzMixhO2M9dmkoe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46YX0sYi5tb2RlLGMsbnVsbCk7Yy5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1jfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2lmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306e2Jhc2VMYW5lczplLmJhc2VMYW5lc3xjfSxmLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzJn5jLGIubWVtb2l6ZWRTdGF0ZT1zaSxkO2M9eGkoYSxiLGQuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGN9aWYoZilyZXR1cm4gZD13aShhLGIsZC5jaGlsZHJlbixkLmZhbGxiYWNrLGMpLGY9Yi5jaGlsZCxlPWEuY2hpbGQubWVtb2l6ZWRTdGF0ZSxmLm1lbW9pemVkU3RhdGU9bnVsbD09PWU/e2Jhc2VMYW5lczpjfTpcbntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWEubW9kZSxmPWEuY2hpbGQ7Yj17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmJ9OzA9PT0oZSYyKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPWIpOmY9dmkoYixlLDAsbnVsbCk7Yz1YZyhjLGUsZCxudWxsKTtmLnJldHVybj1hO2MucmV0dXJuPWE7Zi5zaWJsaW5nPWM7YS5jaGlsZD1mO3JldHVybiBjfVxuZnVuY3Rpb24geGkoYSxiLGMsZCl7dmFyIGU9YS5jaGlsZDthPWUuc2libGluZztjPVRnKGUse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46Y30pOzA9PT0oYi5tb2RlJjIpJiYoYy5sYW5lcz1kKTtjLnJldHVybj1iO2Muc2libGluZz1udWxsO251bGwhPT1hJiYoYS5uZXh0RWZmZWN0PW51bGwsYS5mbGFncz04LGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWEpO3JldHVybiBiLmNoaWxkPWN9XG5mdW5jdGlvbiB3aShhLGIsYyxkLGUpe3ZhciBmPWIubW9kZSxnPWEuY2hpbGQ7YT1nLnNpYmxpbmc7dmFyIGg9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpjfTswPT09KGYmMikmJmIuY2hpbGQhPT1nPyhjPWIuY2hpbGQsYy5jaGlsZExhbmVzPTAsYy5wZW5kaW5nUHJvcHM9aCxnPWMubGFzdEVmZmVjdCxudWxsIT09Zz8oYi5maXJzdEVmZmVjdD1jLmZpcnN0RWZmZWN0LGIubGFzdEVmZmVjdD1nLGcubmV4dEVmZmVjdD1udWxsKTpiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsKTpjPVRnKGcsaCk7bnVsbCE9PWE/ZD1UZyhhLGQpOihkPVhnKGQsZixlLG51bGwpLGQuZmxhZ3N8PTIpO2QucmV0dXJuPWI7Yy5yZXR1cm49YjtjLnNpYmxpbmc9ZDtiLmNoaWxkPWM7cmV0dXJuIGR9ZnVuY3Rpb24geWkoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7c2coYS5yZXR1cm4sYil9XG5mdW5jdGlvbiB6aShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmUsbGFzdEVmZmVjdDpmfTooZy5pc0JhY2t3YXJkcz1iLGcucmVuZGVyaW5nPW51bGwsZy5yZW5kZXJpbmdTdGFydFRpbWU9MCxnLmxhc3Q9ZCxnLnRhaWw9YyxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gQWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtmaShhLGIsZC5jaGlsZHJlbixjKTtkPVAuY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmeWkoYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpeWkoYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShQLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1paChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3ppKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWloKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX16aShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6emkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGhpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtEZ3w9Yi5sYW5lcztpZigwIT09KGMmYi5jaGlsZExhbmVzKSl7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHkoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVRnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1UZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXJldHVybiBudWxsfXZhciBCaSxDaSxEaSxFaTtcbkJpPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtDaT1mdW5jdGlvbigpe307XG5EaT1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7ZGgoYWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjplPWViKGEsZSk7ZD1lYihhLGQpO2Y9W107YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmU9bSh7fSxlLHt2YWx1ZTp2b2lkIDB9KTtkPW0oe30sZCx7dmFsdWU6dm9pZCAwfSk7Zj1bXTticmVhaztjYXNlIFwidGV4dGFyZWFcIjplPWdiKGEsZSk7ZD1nYihhLGQpO2Y9W107YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5vbkNsaWNrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX12YihjLGQpO3ZhciBnO2M9bnVsbDtmb3IobCBpbiBlKWlmKCFkLmhhc093blByb3BlcnR5KGwpJiZlLmhhc093blByb3BlcnR5KGwpJiZudWxsIT1lW2xdKWlmKFwic3R5bGVcIj09PVxubCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJihjfHwoYz17fSksY1tnXT1cIlwiKX1lbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiIT09bCYmXCJjaGlsZHJlblwiIT09bCYmXCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiZcImF1dG9Gb2N1c1wiIT09bCYmKGNhLmhhc093blByb3BlcnR5KGwpP2Z8fChmPVtdKTooZj1mfHxbXSkucHVzaChsLG51bGwpKTtmb3IobCBpbiBkKXt2YXIgaz1kW2xdO2g9bnVsbCE9ZT9lW2xdOnZvaWQgMDtpZihkLmhhc093blByb3BlcnR5KGwpJiZrIT09aCYmKG51bGwhPWt8fG51bGwhPWgpKWlmKFwic3R5bGVcIj09PWwpaWYoaCl7Zm9yKGcgaW4gaCkhaC5oYXNPd25Qcm9wZXJ0eShnKXx8ayYmay5oYXNPd25Qcm9wZXJ0eShnKXx8KGN8fChjPXt9KSxjW2ddPVwiXCIpO2ZvcihnIGluIGspay5oYXNPd25Qcm9wZXJ0eShnKSYmaFtnXSE9PWtbZ10mJihjfHxcbihjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxjKSksYz1rO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1sPyhrPWs/ay5fX2h0bWw6dm9pZCAwLGg9aD9oLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmaCE9PWsmJihmPWZ8fFtdKS5wdXNoKGwsaykpOlwiY2hpbGRyZW5cIj09PWw/XCJzdHJpbmdcIiE9PXR5cGVvZiBrJiZcIm51bWJlclwiIT09dHlwZW9mIGt8fChmPWZ8fFtdKS5wdXNoKGwsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT8obnVsbCE9ayYmXCJvblNjcm9sbFwiPT09bCYmRyhcInNjcm9sbFwiLGEpLGZ8fGg9PT1rfHwoZj1bXSkpOlwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1HYT9rLnRvU3RyaW5nKCk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLFxuYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0VpPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O2Z1bmN0aW9uIEZpKGEsYil7aWYoIWxoKXN3aXRjaChhLnRhaWxNb2RlKXtjYXNlIFwiaGlkZGVuXCI6Yj1hLnRhaWw7Zm9yKHZhciBjPW51bGw7bnVsbCE9PWI7KW51bGwhPT1iLmFsdGVybmF0ZSYmKGM9YiksYj1iLnNpYmxpbmc7bnVsbD09PWM/YS50YWlsPW51bGw6Yy5zaWJsaW5nPW51bGw7YnJlYWs7Y2FzZSBcImNvbGxhcHNlZFwiOmM9YS50YWlsO2Zvcih2YXIgZD1udWxsO251bGwhPT1jOyludWxsIT09Yy5hbHRlcm5hdGUmJihkPWMpLGM9Yy5zaWJsaW5nO251bGw9PT1kP2J8fG51bGw9PT1hLnRhaWw/YS50YWlsPW51bGw6YS50YWlsLnNpYmxpbmc9bnVsbDpkLnNpYmxpbmc9bnVsbH19XG5mdW5jdGlvbiBHaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDE6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClyaChiKT9iLmZsYWdzfD00OmQuaHlkcmF0ZXx8KGIuZmxhZ3N8PTI1Nik7Q2koYik7cmV0dXJuIG51bGw7Y2FzZSA1OmhoKGIpO3ZhciBlPWRoKGNoLmN1cnJlbnQpO2M9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlEaShhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1cbmIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7cmV0dXJuIG51bGx9YT1kaChhaC5jdXJyZW50KTtpZihyaChiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFt3Zl09YjtkW3hmXT1mO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGQpO0coXCJjbG9zZVwiLGQpO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoYT0wO2E8WGUubGVuZ3RoO2ErKylHKFhlW2FdLGQpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixkKTticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixkKTtHKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RyhcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RyhcImludmFsaWRcIixkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpoYihkLGYpLEcoXCJpbnZhbGlkXCIsZCl9dmIoYyxmKTthPW51bGw7Zm9yKHZhciBnIGluIGYpZi5oYXNPd25Qcm9wZXJ0eShnKSYmKGU9ZltnXSxcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2YgZT9kLnRleHRDb250ZW50IT09ZSYmKGE9W1wiY2hpbGRyZW5cIixlXSk6XCJudW1iZXJcIj09PXR5cGVvZiBlJiZkLnRleHRDb250ZW50IT09XCJcIitlJiYoYT1bXCJjaGlsZHJlblwiLFwiXCIrZV0pOmNhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1lJiZcIm9uU2Nyb2xsXCI9PT1nJiZHKFwic2Nyb2xsXCIsZCkpO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShkKTtjYihkLGYsITApO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGQpO2piKGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpjYXNlIFwib3B0aW9uXCI6YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5vbkNsaWNrJiYoZC5vbmNsaWNrPVxuamYpfWQ9YTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7YT09PWtiLmh0bWwmJihhPWxiKGMpKTthPT09a2IuaHRtbD9cInNjcmlwdFwiPT09Yz8oYT1nLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYS5pbm5lckhUTUw9XCI8c2NyaXB0PlxceDNjL3NjcmlwdD5cIixhPWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKSk6XCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2Fbd2ZdPWI7YVt4Zl09ZDtCaShhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7Zz13YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RyhcImNhbmNlbFwiLGEpO0coXCJjbG9zZVwiLGEpO1xuZT1kO2JyZWFrO2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPFhlLmxlbmd0aDtlKyspRyhYZVtlXSxhKTtlPWQ7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkcoXCJlcnJvclwiLGEpO2U9ZDticmVhaztjYXNlIFwiaW1nXCI6Y2FzZSBcImltYWdlXCI6Y2FzZSBcImxpbmtcIjpHKFwiZXJyb3JcIixhKTtHKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPVxuZ2IoYSxkKTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2RlZmF1bHQ6ZT1kfXZiKGMsZSk7dmFyIGg9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj90YihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmb2IoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PWN8fFwiXCIhPT1rKSYmcGIoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJnBiKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoY2EuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRyhcInNjcm9sbFwiLGEpOm51bGwhPWsmJnFhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7Y2IoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPWpmKX1tZihjLGQpJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTY2KSk7XG5jPWRoKGNoLmN1cnJlbnQpO2RoKGFoLmN1cnJlbnQpO3JoKGIpPyhkPWIuc3RhdGVOb2RlLGM9Yi5tZW1vaXplZFByb3BzLGRbd2ZdPWIsZC5ub2RlVmFsdWUhPT1jJiYoYi5mbGFnc3w9NCkpOihkPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksZFt3Zl09YixiLnN0YXRlTm9kZT1kKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmZsYWdzJjY0KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtjPSExO251bGw9PT1hP3ZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5mYWxsYmFjayYmcmgoYik6Yz1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKGQmJiFjJiYwIT09KGIubW9kZSYyKSlpZihudWxsPT09YSYmITAhPT1iLm1lbW9pemVkUHJvcHMudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fDAhPT0oUC5jdXJyZW50JjEpKTA9PT1WJiYoVj0zKTtlbHNle2lmKDA9PT1WfHwzPT09VilWPVxuNDtudWxsPT09VXx8MD09PShEZyYxMzQyMTc3MjcpJiYwPT09KEhpJjEzNDIxNzcyNyl8fElpKFUsVyl9aWYoZHx8YyliLmZsYWdzfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxDaShiKSxudWxsPT09YSYmY2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksbnVsbDtjYXNlIDEwOnJldHVybiByZyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIEZmKGIudHlwZSkmJkdmKCksbnVsbDtjYXNlIDE5OkgoUCk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Zj0wIT09KGIuZmxhZ3MmNjQpO2c9ZC5yZW5kZXJpbmc7aWYobnVsbD09PWcpaWYoZilGaShkLCExKTtlbHNle2lmKDAhPT1WfHxudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1paChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9NjQ7RmkoZCwhMSk7Zj1nLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiYoYi51cGRhdGVRdWV1ZT1mLGIuZmxhZ3N8PTQpO1xubnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtkPWM7Zm9yKGM9Yi5jaGlsZDtudWxsIT09YzspZj1jLGE9ZCxmLmZsYWdzJj0yLGYubmV4dEVmZmVjdD1udWxsLGYuZmlyc3RFZmZlY3Q9bnVsbCxmLmxhc3RFZmZlY3Q9bnVsbCxnPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsXG5mLmRlcGVuZGVuY2llcz1udWxsPT09YT9udWxsOntsYW5lczphLmxhbmVzLGZpcnN0Q29udGV4dDphLmZpcnN0Q29udGV4dH0pLGM9Yy5zaWJsaW5nO0koUCxQLmN1cnJlbnQmMXwyKTtyZXR1cm4gYi5jaGlsZH1hPWEuc2libGluZ31udWxsIT09ZC50YWlsJiZPKCk+SmkmJihiLmZsYWdzfD02NCxmPSEwLEZpKGQsITEpLGIubGFuZXM9MzM1NTQ0MzIpfWVsc2V7aWYoIWYpaWYoYT1paChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9NjQsZj0hMCxjPWEudXBkYXRlUXVldWUsbnVsbCE9PWMmJihiLnVwZGF0ZVF1ZXVlPWMsYi5mbGFnc3w9NCksRmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFnLmFsdGVybmF0ZSYmIWxoKXJldHVybiBiPWIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqTygpLWQucmVuZGVyaW5nU3RhcnRUaW1lPkppJiYxMDczNzQxODI0IT09YyYmKGIuZmxhZ3N8PVxuNjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKTtkLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWQubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZC5sYXN0PWcpfXJldHVybiBudWxsIT09ZC50YWlsPyhjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT1PKCksYy5zaWJsaW5nPW51bGwsYj1QLmN1cnJlbnQsSShQLGY/YiYxfDI6YiYxKSxjKTpudWxsO2Nhc2UgMjM6Y2FzZSAyNDpyZXR1cm4gS2koKSxudWxsIT09YSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSE9PShudWxsIT09Yi5tZW1vaXplZFN0YXRlKSYmXCJ1bnN0YWJsZS1kZWZlci13aXRob3V0LWhpZGluZ1wiIT09ZC5tb2RlJiYoYi5mbGFnc3w9NCksbnVsbH10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIExpKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkZmKGEudHlwZSkmJkdmKCk7dmFyIGI9YS5mbGFncztyZXR1cm4gYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDM6ZmgoKTtIKE4pO0goTSk7dWgoKTtiPWEuZmxhZ3M7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih5KDI4NSkpO2EuZmxhZ3M9YiYtNDA5N3w2NDtyZXR1cm4gYTtjYXNlIDU6cmV0dXJuIGhoKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gSChQKSxiPWEuZmxhZ3MsYiY0MDk2PyhhLmZsYWdzPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKFApLG51bGw7Y2FzZSA0OnJldHVybiBmaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYSksbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVFhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplfX1mdW5jdGlvbiBOaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgT2k9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gUGkoYSxiLGMpe2M9emcoLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UWl8fChRaT0hMCxSaT1kKTtOaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFNpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtOaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09VGk/VGk9bmV3IFNldChbdGhpc10pOlRpLmFkZCh0aGlzKSxOaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY312YXIgVWk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7XG5mdW5jdGlvbiBWaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtXaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9ZnVuY3Rpb24gWGkoYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpyZXR1cm47Y2FzZSAxOmlmKGIuZmxhZ3MmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzpsZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Yi5mbGFncyYyNTYmJnFmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3JldHVybjtjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31cbmZ1bmN0aW9uIFlpKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpiPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3tpZigzPT09KGEudGFnJjMpKXt2YXIgZD1hLmNyZWF0ZTthLmRlc3Ryb3k9ZCgpfWE9YS5uZXh0fXdoaWxlKGEhPT1iKX1iPWMudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7YT1iPWIubmV4dDtkb3t2YXIgZT1hO2Q9ZS5uZXh0O2U9ZS50YWc7MCE9PShlJjQpJiYwIT09KGUmMSkmJihaaShjLGEpLCRpKGMsYSkpO2E9ZH13aGlsZShhIT09Yil9cmV0dXJuO2Nhc2UgMTphPWMuc3RhdGVOb2RlO2MuZmxhZ3MmNCYmKG51bGw9PT1iP2EuY29tcG9uZW50RGlkTW91bnQoKTooZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczpsZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKSxhLmNvbXBvbmVudERpZFVwZGF0ZShkLFxuYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpKSk7Yj1jLnVwZGF0ZVF1ZXVlO251bGwhPT1iJiZFZyhjLGIsYSk7cmV0dXJuO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWMuY2hpbGQuc3RhdGVOb2RlO2JyZWFrO2Nhc2UgMTphPWMuY2hpbGQuc3RhdGVOb2RlfUVnKGMsYixhKX1yZXR1cm47Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZmxhZ3MmNCYmbWYoYy50eXBlLGMubWVtb2l6ZWRQcm9wcykmJmEuZm9jdXMoKTtyZXR1cm47Y2FzZSA2OnJldHVybjtjYXNlIDQ6cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbD09PWMubWVtb2l6ZWRTdGF0ZSYmKGM9Yy5hbHRlcm5hdGUsbnVsbCE9PWMmJihjPWMubWVtb2l6ZWRTdGF0ZSxudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGwhPT1jJiZDYyhjKSkpKTtcbnJldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOmNhc2UgMjM6Y2FzZSAyNDpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBhaihhLGIpe2Zvcih2YXIgYz1hOzspe2lmKDU9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoYilkPWQuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuc2V0UHJvcGVydHk/ZC5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpkLmRpc3BsYXk9XCJub25lXCI7ZWxzZXtkPWMuc3RhdGVOb2RlO3ZhciBlPWMubWVtb2l6ZWRQcm9wcy5zdHlsZTtlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbDtkLnN0eWxlLmRpc3BsYXk9c2IoXCJkaXNwbGF5XCIsZSl9fWVsc2UgaWYoNj09PWMudGFnKWMuc3RhdGVOb2RlLm5vZGVWYWx1ZT1iP1wiXCI6Yy5tZW1vaXplZFByb3BzO2Vsc2UgaWYoKDIzIT09Yy50YWcmJjI0IT09Yy50YWd8fG51bGw9PT1jLm1lbW9pemVkU3RhdGV8fGM9PT1hKSYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1cbmEpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWEpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBiaihhLGIpe2lmKE1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgTWYub25Db21taXRGaWJlclVubW91bnQpdHJ5e01mLm9uQ29tbWl0RmliZXJVbm1vdW50KExmLGIpfWNhdGNoKGYpe31zd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOmE9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YSYmKGE9YS5sYXN0RWZmZWN0LG51bGwhPT1hKSl7dmFyIGM9YT1hLm5leHQ7ZG97dmFyIGQ9YyxlPWQuZGVzdHJveTtkPWQudGFnO2lmKHZvaWQgMCE9PWUpaWYoMCE9PShkJjQpKVppKGIsYyk7ZWxzZXtkPWI7dHJ5e2UoKX1jYXRjaChmKXtXaShkLGYpfX1jPWMubmV4dH13aGlsZShjIT09YSl9YnJlYWs7Y2FzZSAxOlZpKGIpO2E9Yi5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50V2lsbFVubW91bnQpdHJ5e2EucHJvcHM9Yi5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yi5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChmKXtXaShiLFxuZil9YnJlYWs7Y2FzZSA1OlZpKGIpO2JyZWFrO2Nhc2UgNDpjaihhLGIpfX1mdW5jdGlvbiBkaihhKXthLmFsdGVybmF0ZT1udWxsO2EuY2hpbGQ9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuZmlyc3RFZmZlY3Q9bnVsbDthLmxhc3RFZmZlY3Q9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2EucmV0dXJuPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIGVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gZmooYSl7YTp7Zm9yKHZhciBiPWEucmV0dXJuO251bGwhPT1iOyl7aWYoZWooYikpYnJlYWsgYTtiPWIucmV0dXJufXRocm93IEVycm9yKHkoMTYwKSk7fXZhciBjPWI7Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHkoMTYxKSk7fWMuZmxhZ3MmMTYmJihwYihiLFwiXCIpLGMuZmxhZ3MmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxlaihjLnJldHVybikpe2M9bnVsbDticmVhayBhfWM9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09Yy50YWcmJjE4IT09Yy50YWc7KXtpZihjLmZsYWdzJjIpY29udGludWUgYjtpZihudWxsPT09XG5jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5mbGFncyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP2dqKGEsYyxiKTpoaihhLGMsYil9XG5mdW5jdGlvbiBnaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9amYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoZ2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylnaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBoaihhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspaGooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gY2ooYSxiKXtmb3IodmFyIGM9YixkPSExLGUsZjs7KXtpZighZCl7ZD1jLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWQpdGhyb3cgRXJyb3IoeSgxNjApKTtlPWQuc3RhdGVOb2RlO3N3aXRjaChkLnRhZyl7Y2FzZSA1OmY9ITE7YnJlYWsgYTtjYXNlIDM6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhO2Nhc2UgNDplPWUuY29udGFpbmVySW5mbztmPSEwO2JyZWFrIGF9ZD1kLnJldHVybn1kPSEwfWlmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKXthOmZvcih2YXIgZz1hLGg9YyxrPWg7OylpZihiaihnLGspLG51bGwhPT1rLmNoaWxkJiY0IT09ay50YWcpay5jaGlsZC5yZXR1cm49ayxrPWsuY2hpbGQ7ZWxzZXtpZihrPT09aClicmVhayBhO2Zvcig7bnVsbD09PWsuc2libGluZzspe2lmKG51bGw9PT1rLnJldHVybnx8ay5yZXR1cm49PT1oKWJyZWFrIGE7az1rLnJldHVybn1rLnNpYmxpbmcucmV0dXJuPWsucmV0dXJuO2s9ay5zaWJsaW5nfWY/KGc9ZSxoPWMuc3RhdGVOb2RlLFxuOD09PWcubm9kZVR5cGU/Zy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGgpOmcucmVtb3ZlQ2hpbGQoaCkpOmUucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWMudGFnKXtpZihudWxsIT09Yy5jaGlsZCl7ZT1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Y9ITA7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoYmooYSxjKSxudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm47ND09PWMudGFnJiYoZD0hMSl9Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319XG5mdW5jdGlvbiBpaihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6dmFyIGM9Yi51cGRhdGVRdWV1ZTtjPW51bGwhPT1jP2MubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1jKXt2YXIgZD1jPWMubmV4dDtkbyAzPT09KGQudGFnJjMpJiYoYT1kLmRlc3Ryb3ksZC5kZXN0cm95PXZvaWQgMCx2b2lkIDAhPT1hJiZhKCkpLGQ9ZC5uZXh0O3doaWxlKGQhPT1jKX1yZXR1cm47Y2FzZSAxOnJldHVybjtjYXNlIDU6Yz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXtkPWIubWVtb2l6ZWRQcm9wczt2YXIgZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1t4Zl09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmJGEoYyxkKTt3YihhLGUpO2I9d2IoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9XG4yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/dGIoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP29iKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9wYihjLGgpOnFhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjphYihjLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmE9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsZj1kLnZhbHVlLG51bGwhPWY/ZmIoYywhIWQubXVsdGlwbGUsZiwhMSk6YSE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP2ZiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpmYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHkoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPVxuYi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yz1iLnN0YXRlTm9kZTtjLmh5ZHJhdGUmJihjLmh5ZHJhdGU9ITEsQ2MoYy5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSYmKGpqPU8oKSxhaihiLmNoaWxkLCEwKSk7a2ooYik7cmV0dXJuO2Nhc2UgMTk6a2ooYik7cmV0dXJuO2Nhc2UgMTc6cmV0dXJuO2Nhc2UgMjM6Y2FzZSAyNDphaihiLG51bGwhPT1iLm1lbW9pemVkU3RhdGUpO3JldHVybn10aHJvdyBFcnJvcih5KDE2MykpO31mdW5jdGlvbiBraihhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBVaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWxqLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gbWooYSxiKXtyZXR1cm4gbnVsbCE9PWEmJihhPWEubWVtb2l6ZWRTdGF0ZSxudWxsPT09YXx8bnVsbCE9PWEuZGVoeWRyYXRlZCk/KGI9Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1iJiZudWxsPT09Yi5kZWh5ZHJhdGVkKTohMX12YXIgbmo9TWF0aC5jZWlsLG9qPXJhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIscGo9cmEuUmVhY3RDdXJyZW50T3duZXIsWD0wLFU9bnVsbCxZPW51bGwsVz0wLHFqPTAscmo9QmYoMCksVj0wLHNqPW51bGwsdGo9MCxEZz0wLEhpPTAsdWo9MCx2aj1udWxsLGpqPTAsSmk9SW5maW5pdHk7ZnVuY3Rpb24gd2ooKXtKaT1PKCkrNTAwfXZhciBaPW51bGwsUWk9ITEsUmk9bnVsbCxUaT1udWxsLHhqPSExLHlqPW51bGwsemo9OTAsQWo9W10sQmo9W10sQ2o9bnVsbCxEaj0wLEVqPW51bGwsRmo9LTEsR2o9MCxIaj0wLElqPW51bGwsSmo9ITE7ZnVuY3Rpb24gSGcoKXtyZXR1cm4gMCE9PShYJjQ4KT9PKCk6LTEhPT1Gaj9GajpGaj1PKCl9XG5mdW5jdGlvbiBJZyhhKXthPWEubW9kZTtpZigwPT09KGEmMikpcmV0dXJuIDE7aWYoMD09PShhJjQpKXJldHVybiA5OT09PWVnKCk/MToyOzA9PT1HaiYmKEdqPXRqKTtpZigwIT09a2cudHJhbnNpdGlvbil7MCE9PUhqJiYoSGo9bnVsbCE9PXZqP3ZqLnBlbmRpbmdMYW5lczowKTthPUdqO3ZhciBiPTQxODYxMTImfkhqO2ImPS1iOzA9PT1iJiYoYT00MTg2MTEyJn5hLGI9YSYtYSwwPT09YiYmKGI9ODE5MikpO3JldHVybiBifWE9ZWcoKTswIT09KFgmNCkmJjk4PT09YT9hPVhjKDEyLEdqKTooYT1TYyhhKSxhPVhjKGEsR2opKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEpnKGEsYixjKXtpZig1MDxEail0aHJvdyBEaj0wLEVqPW51bGwsRXJyb3IoeSgxODUpKTthPUtqKGEsYik7aWYobnVsbD09PWEpcmV0dXJuIG51bGw7JGMoYSxiLGMpO2E9PT1VJiYoSGl8PWIsND09PVYmJklpKGEsVykpO3ZhciBkPWVnKCk7MT09PWI/MCE9PShYJjgpJiYwPT09KFgmNDgpP0xqKGEpOihNaihhLGMpLDA9PT1YJiYod2ooKSxpZygpKSk6KDA9PT0oWCY0KXx8OTghPT1kJiY5OSE9PWR8fChudWxsPT09Q2o/Q2o9bmV3IFNldChbYV0pOkNqLmFkZChhKSksTWooYSxjKSk7dmo9YX1mdW5jdGlvbiBLaihhLGIpe2EubGFuZXN8PWI7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJihjLmxhbmVzfD1iKTtjPWE7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWE7KWEuY2hpbGRMYW5lc3w9YixjPWEuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYy5jaGlsZExhbmVzfD1iKSxjPWEsYT1hLnJldHVybjtyZXR1cm4gMz09PWMudGFnP2Muc3RhdGVOb2RlOm51bGx9XG5mdW5jdGlvbiBNaihhLGIpe2Zvcih2YXIgYz1hLmNhbGxiYWNrTm9kZSxkPWEuc3VzcGVuZGVkTGFuZXMsZT1hLnBpbmdlZExhbmVzLGY9YS5leHBpcmF0aW9uVGltZXMsZz1hLnBlbmRpbmdMYW5lczswPGc7KXt2YXIgaD0zMS1WYyhnKSxrPTE8PGgsbD1mW2hdO2lmKC0xPT09bCl7aWYoMD09PShrJmQpfHwwIT09KGsmZSkpe2w9YjtSYyhrKTt2YXIgbj1GO2ZbaF09MTA8PW4/bCsyNTA6Njw9bj9sKzVFMzotMX19ZWxzZSBsPD1iJiYoYS5leHBpcmVkTGFuZXN8PWspO2cmPX5rfWQ9VWMoYSxhPT09VT9XOjApO2I9RjtpZigwPT09ZCludWxsIT09YyYmKGMhPT1aZiYmUGYoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MCk7ZWxzZXtpZihudWxsIT09Yyl7aWYoYS5jYWxsYmFja1ByaW9yaXR5PT09YilyZXR1cm47YyE9PVpmJiZQZihjKX0xNT09PWI/KGM9TGouYmluZChudWxsLGEpLG51bGw9PT1hZz8oYWc9W2NdLGJnPU9mKFVmLGpnKSk6YWcucHVzaChjKSxcbmM9WmYpOjE0PT09Yj9jPWhnKDk5LExqLmJpbmQobnVsbCxhKSk6KGM9VGMoYiksYz1oZyhjLE5qLmJpbmQobnVsbCxhKSkpO2EuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gTmooYSl7Rmo9LTE7SGo9R2o9MDtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGI9YS5jYWxsYmFja05vZGU7aWYoT2ooKSYmYS5jYWxsYmFja05vZGUhPT1iKXJldHVybiBudWxsO3ZhciBjPVVjKGEsYT09PVU/VzowKTtpZigwPT09YylyZXR1cm4gbnVsbDt2YXIgZD1jO3ZhciBlPVg7WHw9MTY7dmFyIGY9UGooKTtpZihVIT09YXx8VyE9PWQpd2ooKSxRaihhLGQpO2RvIHRyeXtSaigpO2JyZWFrfWNhdGNoKGgpe1NqKGEsaCl9d2hpbGUoMSk7cWcoKTtvai5jdXJyZW50PWY7WD1lO251bGwhPT1ZP2Q9MDooVT1udWxsLFc9MCxkPVYpO2lmKDAhPT0odGomSGkpKVFqKGEsMCk7ZWxzZSBpZigwIT09ZCl7Mj09PWQmJihYfD02NCxhLmh5ZHJhdGUmJihhLmh5ZHJhdGU9ITEscWYoYS5jb250YWluZXJJbmZvKSksYz1XYyhhKSwwIT09YyYmKGQ9VGooYSxjKSkpO2lmKDE9PT1kKXRocm93IGI9c2osUWooYSwwKSxJaShhLGMpLE1qKGEsTygpKSxiO2EuZmluaXNoZWRXb3JrPVxuYS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9Yztzd2l0Y2goZCl7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcih5KDM0NSkpO2Nhc2UgMjpVaihhKTticmVhaztjYXNlIDM6SWkoYSxjKTtpZigoYyY2MjkxNDU2MCk9PT1jJiYoZD1qais1MDAtTygpLDEwPGQpKXtpZigwIT09VWMoYSwwKSlicmVhaztlPWEuc3VzcGVuZGVkTGFuZXM7aWYoKGUmYykhPT1jKXtIZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9b2YoVWouYmluZChudWxsLGEpLGQpO2JyZWFrfVVqKGEpO2JyZWFrO2Nhc2UgNDpJaShhLGMpO2lmKChjJjQxODYxMTIpPT09YylicmVhaztkPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGM7KXt2YXIgZz0zMS1WYyhjKTtmPTE8PGc7Zz1kW2ddO2c+ZSYmKGU9Zyk7YyY9fmZ9Yz1lO2M9TygpLWM7Yz0oMTIwPmM/MTIwOjQ4MD5jPzQ4MDoxMDgwPmM/MTA4MDoxOTIwPmM/MTkyMDozRTM+Yz8zRTM6NDMyMD5cbmM/NDMyMDoxOTYwKm5qKGMvMTk2MCkpLWM7aWYoMTA8Yyl7YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxjKTticmVha31VaihhKTticmVhaztjYXNlIDU6VWooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDMyOSkpO319TWooYSxPKCkpO3JldHVybiBhLmNhbGxiYWNrTm9kZT09PWI/TmouYmluZChudWxsLGEpOm51bGx9ZnVuY3Rpb24gSWkoYSxiKXtiJj1+dWo7YiY9fkhpO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtVmMoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fVxuZnVuY3Rpb24gTGooYSl7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO09qKCk7aWYoYT09PVUmJjAhPT0oYS5leHBpcmVkTGFuZXMmVykpe3ZhciBiPVc7dmFyIGM9VGooYSxiKTswIT09KHRqJkhpKSYmKGI9VWMoYSxiKSxjPVRqKGEsYikpfWVsc2UgYj1VYyhhLDApLGM9VGooYSxiKTswIT09YS50YWcmJjI9PT1jJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGI9V2MoYSksMCE9PWImJihjPVRqKGEsYikpKTtpZigxPT09Yyl0aHJvdyBjPXNqLFFqKGEsMCksSWkoYSxiKSxNaihhLE8oKSksYzthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1VqKGEpO01qKGEsTygpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFZqKCl7aWYobnVsbCE9PUNqKXt2YXIgYT1DajtDaj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhKXthLmV4cGlyZWRMYW5lc3w9MjQmYS5wZW5kaW5nTGFuZXM7TWooYSxPKCkpfSl9aWcoKX1mdW5jdGlvbiBXaihhLGIpe3ZhciBjPVg7WHw9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBYaihhLGIpe3ZhciBjPVg7WCY9LTI7WHw9ODt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtYPWMsMD09PVgmJih3aigpLGlnKCkpfX1mdW5jdGlvbiBuaShhLGIpe0kocmoscWopO3FqfD1iO3RqfD1ifWZ1bmN0aW9uIEtpKCl7cWo9cmouY3VycmVudDtIKHJqKX1cbmZ1bmN0aW9uIFFqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLHBmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkdmKCk7YnJlYWs7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7YnJlYWs7Y2FzZSA1OmhoKGQpO2JyZWFrO2Nhc2UgNDpmaCgpO2JyZWFrO2Nhc2UgMTM6SChQKTticmVhaztjYXNlIDE5OkgoUCk7YnJlYWs7Y2FzZSAxMDpyZyhkKTticmVhaztjYXNlIDIzOmNhc2UgMjQ6S2koKX1jPWMucmV0dXJufVU9YTtZPVRnKGEuY3VycmVudCxudWxsKTtXPXFqPXRqPWI7Vj0wO3NqPW51bGw7dWo9SGk9RGc9MH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG97dmFyIGM9WTt0cnl7cWcoKTt2aC5jdXJyZW50PUdoO2lmKHloKXtmb3IodmFyIGQ9Ui5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH15aD0hMX14aD0wO1Q9Uz1SPW51bGw7emg9ITE7cGouY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Y9MTtzaj1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVc7aC5mbGFnc3w9MjA0ODtoLmZpcnN0RWZmZWN0PWgubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1rJiZcIm9iamVjdFwiPT09dHlwZW9mIGsmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBrLnRoZW4pe3ZhciBsPWs7aWYoMD09PShoLm1vZGUmMikpe3ZhciBuPWguYWx0ZXJuYXRlO24/KGgudXBkYXRlUXVldWU9bi51cGRhdGVRdWV1ZSxoLm1lbW9pemVkU3RhdGU9bi5tZW1vaXplZFN0YXRlLGgubGFuZXM9bi5sYW5lcyk6XG4oaC51cGRhdGVRdWV1ZT1udWxsLGgubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgQT0wIT09KFAuY3VycmVudCYxKSxwPWc7ZG97dmFyIEM7aWYoQz0xMz09PXAudGFnKXt2YXIgeD1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXgpQz1udWxsIT09eC5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIHc9cC5tZW1vaXplZFByb3BzO0M9dm9pZCAwPT09dy5mYWxsYmFjaz8hMTohMCE9PXcudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6QT8hMTohMH19aWYoQyl7dmFyIHo9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09eil7dmFyIHU9bmV3IFNldDt1LmFkZChsKTtwLnVwZGF0ZVF1ZXVlPXV9ZWxzZSB6LmFkZChsKTtpZigwPT09KHAubW9kZSYyKSl7cC5mbGFnc3w9NjQ7aC5mbGFnc3w9MTYzODQ7aC5mbGFncyY9LTI5ODE7aWYoMT09PWgudGFnKWlmKG51bGw9PT1oLmFsdGVybmF0ZSloLnRhZz0xNztlbHNle3ZhciB0PXpnKC0xLDEpO3QudGFnPTI7QWcoaCx0KX1oLmxhbmVzfD0xO2JyZWFrIGF9az1cbnZvaWQgMDtoPWI7dmFyIHE9Zi5waW5nQ2FjaGU7bnVsbD09PXE/KHE9Zi5waW5nQ2FjaGU9bmV3IE9pLGs9bmV3IFNldCxxLnNldChsLGspKTooaz1xLmdldChsKSx2b2lkIDA9PT1rJiYoaz1uZXcgU2V0LHEuc2V0KGwsaykpKTtpZighay5oYXMoaCkpe2suYWRkKGgpO3ZhciB2PVlqLmJpbmQobnVsbCxmLGwsaCk7bC50aGVuKHYsdil9cC5mbGFnc3w9NDA5NjtwLmxhbmVzPWI7YnJlYWsgYX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKTtrPUVycm9yKChSYShoLnR5cGUpfHxcIkEgUmVhY3QgY29tcG9uZW50XCIpK1wiIHN1c3BlbmRlZCB3aGlsZSByZW5kZXJpbmcsIGJ1dCBubyBmYWxsYmFjayBVSSB3YXMgc3BlY2lmaWVkLlxcblxcbkFkZCBhIDxTdXNwZW5zZSBmYWxsYmFjaz0uLi4+IGNvbXBvbmVudCBoaWdoZXIgaW4gdGhlIHRyZWUgdG8gcHJvdmlkZSBhIGxvYWRpbmcgaW5kaWNhdG9yIG9yIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkuXCIpfTUhPT1WJiYoVj0yKTtrPU1pKGssaCk7cD1cbmc7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6Zj1rO3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgSj1QaShwLGYsYik7QmcocCxKKTticmVhayBhO2Nhc2UgMTpmPWs7dmFyIEs9cC50eXBlLFE9cC5zdGF0ZU5vZGU7aWYoMD09PShwLmZsYWdzJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBLLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PVEmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBRLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKFEpKSkpe3AuZmxhZ3N8PTQwOTY7YiY9LWI7cC5sYW5lc3w9Yjt2YXIgTD1TaShwLGYsYik7QmcocCxMKTticmVhayBhfX1wPXAucmV0dXJufXdoaWxlKG51bGwhPT1wKX1aaihjKX1jYXRjaCh2YSl7Yj12YTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfVxuZnVuY3Rpb24gUGooKXt2YXIgYT1vai5jdXJyZW50O29qLmN1cnJlbnQ9R2g7cmV0dXJuIG51bGw9PT1hP0doOmF9ZnVuY3Rpb24gVGooYSxiKXt2YXIgYz1YO1h8PTE2O3ZhciBkPVBqKCk7VT09PWEmJlc9PT1ifHxRaihhLGIpO2RvIHRyeXthaygpO2JyZWFrfWNhdGNoKGUpe1NqKGEsZSl9d2hpbGUoMSk7cWcoKTtYPWM7b2ouY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHkoMjYxKSk7VT1udWxsO1c9MDtyZXR1cm4gVn1mdW5jdGlvbiBhaygpe2Zvcig7bnVsbCE9PVk7KWJrKFkpfWZ1bmN0aW9uIFJqKCl7Zm9yKDtudWxsIT09WSYmIVFmKCk7KWJrKFkpfWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWNrKGEuYWx0ZXJuYXRlLGEscWopO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9aaihhKTpZPWI7cGouY3VycmVudD1udWxsfVxuZnVuY3Rpb24gWmooYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYyMDQ4KSl7Yz1HaShjLGIscWopO2lmKG51bGwhPT1jKXtZPWM7cmV0dXJufWM9YjtpZigyNCE9PWMudGFnJiYyMyE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHwwIT09KHFqJjEwNzM3NDE4MjQpfHwwPT09KGMubW9kZSY0KSl7Zm9yKHZhciBkPTAsZT1jLmNoaWxkO251bGwhPT1lOylkfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxlPWUuc2libGluZztjLmNoaWxkTGFuZXM9ZH1udWxsIT09YSYmMD09PShhLmZsYWdzJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLG51bGwhPT1iLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yi5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCksMTxiLmZsYWdzJiYobnVsbCE9PVxuYS5sYXN0RWZmZWN0P2EubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWI6YS5maXJzdEVmZmVjdD1iLGEubGFzdEVmZmVjdD1iKSl9ZWxzZXtjPUxpKGIpO2lmKG51bGwhPT1jKXtjLmZsYWdzJj0yMDQ3O1k9YztyZXR1cm59bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZmxhZ3N8PTIwNDgpfWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09ViYmKFY9NSl9ZnVuY3Rpb24gVWooYSl7dmFyIGI9ZWcoKTtnZyg5OSxkay5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBkayhhLGIpe2RvIE9qKCk7d2hpbGUobnVsbCE9PXlqKTtpZigwIT09KFgmNDgpKXRocm93IEVycm9yKHkoMzI3KSk7dmFyIGM9YS5maW5pc2hlZFdvcms7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDtpZihjPT09YS5jdXJyZW50KXRocm93IEVycm9yKHkoMTc3KSk7YS5jYWxsYmFja05vZGU9bnVsbDt2YXIgZD1jLmxhbmVzfGMuY2hpbGRMYW5lcyxlPWQsZj1hLnBlbmRpbmdMYW5lcyZ+ZTthLnBlbmRpbmdMYW5lcz1lO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWU7YS5tdXRhYmxlUmVhZExhbmVzJj1lO2EuZW50YW5nbGVkTGFuZXMmPWU7ZT1hLmVudGFuZ2xlbWVudHM7Zm9yKHZhciBnPWEuZXZlbnRUaW1lcyxoPWEuZXhwaXJhdGlvblRpbWVzOzA8Zjspe3ZhciBrPTMxLVZjKGYpLGw9MTw8aztlW2tdPTA7Z1trXT0tMTtoW2tdPS0xO2YmPX5sfW51bGwhPT1cbkNqJiYwPT09KGQmMjQpJiZDai5oYXMoYSkmJkNqLmRlbGV0ZShhKTthPT09VSYmKFk9VT1udWxsLFc9MCk7MTxjLmZsYWdzP251bGwhPT1jLmxhc3RFZmZlY3Q/KGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsZD1jLmZpcnN0RWZmZWN0KTpkPWM6ZD1jLmZpcnN0RWZmZWN0O2lmKG51bGwhPT1kKXtlPVg7WHw9MzI7cGouY3VycmVudD1udWxsO2tmPWZkO2c9TmUoKTtpZihPZShnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyloPXtzdGFydDpnLnNlbGVjdGlvblN0YXJ0LGVuZDpnLnNlbGVjdGlvbkVuZH07ZWxzZSBhOmlmKGg9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93LChsPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpKSYmMCE9PWwucmFuZ2VDb3VudCl7aD1sLmFuY2hvck5vZGU7Zj1sLmFuY2hvck9mZnNldDtrPWwuZm9jdXNOb2RlO2w9bC5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxrLm5vZGVUeXBlfWNhdGNoKHZhKXtoPW51bGw7XG5icmVhayBhfXZhciBuPTAsQT0tMSxwPS0xLEM9MCx4PTAsdz1nLHo9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciB1Ozspe3chPT1ofHwwIT09ZiYmMyE9PXcubm9kZVR5cGV8fChBPW4rZik7dyE9PWt8fDAhPT1sJiYzIT09dy5ub2RlVHlwZXx8KHA9bitsKTszPT09dy5ub2RlVHlwZSYmKG4rPXcubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh1PXcuZmlyc3RDaGlsZCkpYnJlYWs7ej13O3c9dX1mb3IoOzspe2lmKHc9PT1nKWJyZWFrIGI7ej09PWgmJisrQz09PWYmJihBPW4pO3o9PT1rJiYrK3g9PT1sJiYocD1uKTtpZihudWxsIT09KHU9dy5uZXh0U2libGluZykpYnJlYWs7dz16O3o9dy5wYXJlbnROb2RlfXc9dX1oPS0xPT09QXx8LTE9PT1wP251bGw6e3N0YXJ0OkEsZW5kOnB9fWVsc2UgaD1udWxsO2g9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1udWxsO2xmPXtmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO0lqPW51bGw7Smo9ITE7Wj1kO2RvIHRyeXtlaygpfWNhdGNoKHZhKXtpZihudWxsPT09XG5aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO0lqPW51bGw7Wj1kO2RvIHRyeXtmb3IoZz1hO251bGwhPT1aOyl7dmFyIHQ9Wi5mbGFnczt0JjE2JiZwYihaLnN0YXRlTm9kZSxcIlwiKTtpZih0JjEyOCl7dmFyIHE9Wi5hbHRlcm5hdGU7aWYobnVsbCE9PXEpe3ZhciB2PXEucmVmO251bGwhPT12JiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHY/dihudWxsKTp2LmN1cnJlbnQ9bnVsbCl9fXN3aXRjaCh0JjEwMzgpe2Nhc2UgMjpmaihaKTtaLmZsYWdzJj0tMzticmVhaztjYXNlIDY6ZmooWik7Wi5mbGFncyY9LTM7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSAxMDI0OlouZmxhZ3MmPS0xMDI1O2JyZWFrO2Nhc2UgMTAyODpaLmZsYWdzJj0tMTAyNTtpaihaLmFsdGVybmF0ZSxaKTticmVhaztjYXNlIDQ6aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA4Omg9WjtjaihnLGgpO3ZhciBKPWguYWx0ZXJuYXRlO2RqKGgpO251bGwhPT1cbkomJmRqKEopfVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7dj1sZjtxPU5lKCk7dD12LmZvY3VzZWRFbGVtO2c9di5zZWxlY3Rpb25SYW5nZTtpZihxIT09dCYmdCYmdC5vd25lckRvY3VtZW50JiZNZSh0Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHQpKXtudWxsIT09ZyYmT2UodCkmJihxPWcuc3RhcnQsdj1nLmVuZCx2b2lkIDA9PT12JiYodj1xKSxcInNlbGVjdGlvblN0YXJ0XCJpbiB0Pyh0LnNlbGVjdGlvblN0YXJ0PXEsdC5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odix0LnZhbHVlLmxlbmd0aCkpOih2PShxPXQub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZxLmRlZmF1bHRWaWV3fHx3aW5kb3csdi5nZXRTZWxlY3Rpb24mJih2PXYuZ2V0U2VsZWN0aW9uKCksaD10LnRleHRDb250ZW50Lmxlbmd0aCxKPU1hdGgubWluKGcuc3RhcnQsaCksZz12b2lkIDA9PT1cbmcuZW5kP0o6TWF0aC5taW4oZy5lbmQsaCksIXYuZXh0ZW5kJiZKPmcmJihoPWcsZz1KLEo9aCksaD1MZSh0LEopLGY9TGUodCxnKSxoJiZmJiYoMSE9PXYucmFuZ2VDb3VudHx8di5hbmNob3JOb2RlIT09aC5ub2RlfHx2LmFuY2hvck9mZnNldCE9PWgub2Zmc2V0fHx2LmZvY3VzTm9kZSE9PWYubm9kZXx8di5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSYmKHE9cS5jcmVhdGVSYW5nZSgpLHEuc2V0U3RhcnQoaC5ub2RlLGgub2Zmc2V0KSx2LnJlbW92ZUFsbFJhbmdlcygpLEo+Zz8odi5hZGRSYW5nZShxKSx2LmV4dGVuZChmLm5vZGUsZi5vZmZzZXQpKToocS5zZXRFbmQoZi5ub2RlLGYub2Zmc2V0KSx2LmFkZFJhbmdlKHEpKSkpKSk7cT1bXTtmb3Iodj10O3Y9di5wYXJlbnROb2RlOykxPT09di5ub2RlVHlwZSYmcS5wdXNoKHtlbGVtZW50OnYsbGVmdDp2LnNjcm9sbExlZnQsdG9wOnYuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHQuZm9jdXMmJnQuZm9jdXMoKTtmb3IodD1cbjA7dDxxLmxlbmd0aDt0Kyspdj1xW3RdLHYuZWxlbWVudC5zY3JvbGxMZWZ0PXYubGVmdCx2LmVsZW1lbnQuc2Nyb2xsVG9wPXYudG9wfWZkPSEha2Y7bGY9a2Y9bnVsbDthLmN1cnJlbnQ9YztaPWQ7ZG8gdHJ5e2Zvcih0PWE7bnVsbCE9PVo7KXt2YXIgSz1aLmZsYWdzO0smMzYmJllpKHQsWi5hbHRlcm5hdGUsWik7aWYoSyYxMjgpe3E9dm9pZCAwO3ZhciBRPVoucmVmO2lmKG51bGwhPT1RKXt2YXIgTD1aLnN0YXRlTm9kZTtzd2l0Y2goWi50YWcpe2Nhc2UgNTpxPUw7YnJlYWs7ZGVmYXVsdDpxPUx9XCJmdW5jdGlvblwiPT09dHlwZW9mIFE/UShxKTpRLmN1cnJlbnQ9cX19Wj1aLm5leHRFZmZlY3R9fWNhdGNoKHZhKXtpZihudWxsPT09Wil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtaPW51bGw7JGYoKTtYPWV9ZWxzZSBhLmN1cnJlbnQ9YztpZih4ail4aj0hMSx5aj1hLHpqPWI7ZWxzZSBmb3IoWj1kO251bGwhPT1aOyliPVxuWi5uZXh0RWZmZWN0LFoubmV4dEVmZmVjdD1udWxsLFouZmxhZ3MmOCYmKEs9WixLLnNpYmxpbmc9bnVsbCxLLnN0YXRlTm9kZT1udWxsKSxaPWI7ZD1hLnBlbmRpbmdMYW5lczswPT09ZCYmKFRpPW51bGwpOzE9PT1kP2E9PT1Faj9EaisrOihEaj0wLEVqPWEpOkRqPTA7Yz1jLnN0YXRlTm9kZTtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJSb290KXRyeXtNZi5vbkNvbW1pdEZpYmVyUm9vdChMZixjLHZvaWQgMCw2ND09PShjLmN1cnJlbnQuZmxhZ3MmNjQpKX1jYXRjaCh2YSl7fU1qKGEsTygpKTtpZihRaSl0aHJvdyBRaT0hMSxhPVJpLFJpPW51bGwsYTtpZigwIT09KFgmOCkpcmV0dXJuIG51bGw7aWcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGVrKCl7Zm9yKDtudWxsIT09Wjspe3ZhciBhPVouYWx0ZXJuYXRlO0pqfHxudWxsPT09SWp8fCgwIT09KFouZmxhZ3MmOCk/ZGMoWixJaikmJihKaj0hMCk6MTM9PT1aLnRhZyYmbWooYSxaKSYmZGMoWixJaikmJihKaj0hMCkpO3ZhciBiPVouZmxhZ3M7MCE9PShiJjI1NikmJlhpKGEsWik7MD09PShiJjUxMil8fHhqfHwoeGo9ITAsaGcoOTcsZnVuY3Rpb24oKXtPaigpO3JldHVybiBudWxsfSkpO1o9Wi5uZXh0RWZmZWN0fX1mdW5jdGlvbiBPaigpe2lmKDkwIT09emope3ZhciBhPTk3PHpqPzk3OnpqO3pqPTkwO3JldHVybiBnZyhhLGZrKX1yZXR1cm4hMX1mdW5jdGlvbiAkaShhLGIpe0FqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1mdW5jdGlvbiBaaShhLGIpe0JqLnB1c2goYixhKTt4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKX1cbmZ1bmN0aW9uIGZrKCl7aWYobnVsbD09PXlqKXJldHVybiExO3ZhciBhPXlqO3lqPW51bGw7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMzMSkpO3ZhciBiPVg7WHw9MzI7dmFyIGM9Qmo7Qmo9W107Zm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKz0yKXt2YXIgZT1jW2RdLGY9Y1tkKzFdLGc9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcpdHJ5e2coKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWM9QWo7QWo9W107Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrPTIpe2U9Y1tkXTtmPWNbZCsxXTt0cnl7dmFyIGg9ZS5jcmVhdGU7ZS5kZXN0cm95PWgoKX1jYXRjaChrKXtpZihudWxsPT09Zil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKGYsayl9fWZvcihoPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09aDspYT1oLm5leHRFZmZlY3QsaC5uZXh0RWZmZWN0PW51bGwsaC5mbGFncyY4JiYoaC5zaWJsaW5nPVxubnVsbCxoLnN0YXRlTm9kZT1udWxsKSxoPWE7WD1iO2lnKCk7cmV0dXJuITB9ZnVuY3Rpb24gZ2soYSxiLGMpe2I9TWkoYyxiKTtiPVBpKGEsYiwxKTtBZyhhLGIpO2I9SGcoKTthPUtqKGEsMSk7bnVsbCE9PWEmJigkYyhhLDEsYiksTWooYSxiKSl9XG5mdW5jdGlvbiBXaShhLGIpe2lmKDM9PT1hLnRhZylnayhhLGEsYik7ZWxzZSBmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZigzPT09Yy50YWcpe2drKGMsYSxiKTticmVha31lbHNlIGlmKDE9PT1jLnRhZyl7dmFyIGQ9Yy5zdGF0ZU5vZGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZENhdGNoJiYobnVsbD09PVRpfHwhVGkuaGFzKGQpKSl7YT1NaShiLGEpO3ZhciBlPVNpKGMsYSwxKTtBZyhjLGUpO2U9SGcoKTtjPUtqKGMsMSk7aWYobnVsbCE9PWMpJGMoYywxLGUpLE1qKGMsZSk7ZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpdHJ5e2QuY29tcG9uZW50RGlkQ2F0Y2goYixhKX1jYXRjaChmKXt9YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gWWooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUhnKCk7YS5waW5nZWRMYW5lc3w9YS5zdXNwZW5kZWRMYW5lcyZjO1U9PT1hJiYoVyZjKT09PWMmJig0PT09Vnx8Mz09PVYmJihXJjYyOTE0NTYwKT09PVcmJjUwMD5PKCktamo/UWooYSwwKTp1anw9Yyk7TWooYSxiKX1mdW5jdGlvbiBsaihhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPWEubW9kZSwwPT09KGImMik/Yj0xOjA9PT0oYiY0KT9iPTk5PT09ZWcoKT8xOjI6KDA9PT1HaiYmKEdqPXRqKSxiPVljKDYyOTE0NTYwJn5HaiksMD09PWImJihiPTQxOTQzMDQpKSk7Yz1IZygpO2E9S2ooYSxiKTtudWxsIT09YSYmKCRjKGEsYixjKSxNaihhLGMpKX12YXIgY2s7XG5jaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5sYW5lcztpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8Ti5jdXJyZW50KXVnPSEwO2Vsc2UgaWYoMCE9PShjJmQpKXVnPTAhPT0oYS5mbGFncyYxNjM4NCk/ITA6ITE7ZWxzZXt1Zz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpyaShiKTtzaCgpO2JyZWFrO2Nhc2UgNTpnaChiKTticmVhaztjYXNlIDE6RmYoYi50eXBlKSYmSmYoYik7YnJlYWs7Y2FzZSA0OmVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTt2YXIgZT1iLnR5cGUuX2NvbnRleHQ7SShtZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHRpKGEsYixjKTtJKFAsUC5jdXJyZW50JjEpO2I9aGkoYSxiLGMpO3JldHVybiBudWxsIT09XG5iP2Iuc2libGluZzpudWxsfUkoUCxQLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPTAhPT0oYyZiLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyY2NCkpe2lmKGQpcmV0dXJuIEFpKGEsYixjKTtiLmZsYWdzfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0koUCxQLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIGIubGFuZXM9MCxtaShhLGIsYyl9cmV0dXJuIGhpKGEsYixjKX1lbHNlIHVnPSExO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjpkPWIudHlwZTtudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9RWYoYixNLmN1cnJlbnQpO3RnKGIsYyk7ZT1DaChudWxsLGIsZCxhLGUsYyk7Yi5mbGFnc3w9MTtpZihcIm9iamVjdFwiPT09XG50eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoRmYoZCkpe3ZhciBmPSEwO0pmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3hnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZHZyhiLGQsZyxhKTtlLnVwZGF0ZXI9S2c7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFscz1iO09nKGIsZCxhLGMpO2I9cWkobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsZmkobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6ZT1iLmVsZW1lbnRUeXBlO2E6e251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpO1xuYT1iLnBlbmRpbmdQcm9wcztmPWUuX2luaXQ7ZT1mKGUuX3BheWxvYWQpO2IudHlwZT1lO2Y9Yi50YWc9aGsoZSk7YT1sZyhlLGEpO3N3aXRjaChmKXtjYXNlIDA6Yj1saShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxOmI9cGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTE6Yj1naShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxNDpiPWlpKG51bGwsYixlLGxnKGUudHlwZSxhKSxkLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IoeSgzMDYsZSxcIlwiKSk7fXJldHVybiBiO2Nhc2UgMDpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxsaShhLGIsZCxlLGMpO2Nhc2UgMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxwaShhLGIsZCxlLGMpO2Nhc2UgMzpyaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHkoMjgyKSk7XG5kPWIucGVuZGluZ1Byb3BzO2U9Yi5tZW1vaXplZFN0YXRlO2U9bnVsbCE9PWU/ZS5lbGVtZW50Om51bGw7eWcoYSxiKTtDZyhiLGQsbnVsbCxjKTtkPWIubWVtb2l6ZWRTdGF0ZS5lbGVtZW50O2lmKGQ9PT1lKXNoKCksYj1oaShhLGIsYyk7ZWxzZXtlPWIuc3RhdGVOb2RlO2lmKGY9ZS5oeWRyYXRlKWtoPXJmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksamg9YixmPWxoPSEwO2lmKGYpe2E9ZS5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhO2lmKG51bGwhPWEpZm9yKGU9MDtlPGEubGVuZ3RoO2UrPTIpZj1hW2VdLGYuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9YVtlKzFdLHRoLnB1c2goZik7Yz1aZyhiLG51bGwsZCxjKTtmb3IoYi5jaGlsZD1jO2M7KWMuZmxhZ3M9Yy5mbGFncyYtM3wxMDI0LGM9Yy5zaWJsaW5nfWVsc2UgZmkoYSxiLGQsYyksc2goKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA1OnJldHVybiBnaChiKSxudWxsPT09YSYmXG5waChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLG5mKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZuZihkLGYpJiYoYi5mbGFnc3w9MTYpLG9pKGEsYiksZmkoYSxiLGcsYyksYi5jaGlsZDtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZwaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIHRpKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGVoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVlnKGIsbnVsbCxkLGMpOmZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxMTpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6bGcoZCxlKSxnaShhLGIsZCxlLGMpO2Nhc2UgNzpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sXG5jKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztnPWIubWVtb2l6ZWRQcm9wcztmPWUudmFsdWU7dmFyIGg9Yi50eXBlLl9jb250ZXh0O0kobWcsaC5fY3VycmVudFZhbHVlKTtoLl9jdXJyZW50VmFsdWU9ZjtpZihudWxsIT09ZylpZihoPWcudmFsdWUsZj1IZShoLGYpPzA6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGYpOjEwNzM3NDE4MjMpfDAsMD09PWYpe2lmKGcuY2hpbGRyZW49PT1lLmNoaWxkcmVuJiYhTi5jdXJyZW50KXtiPWhpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihoPWIuY2hpbGQsbnVsbCE9PWgmJihoLnJldHVybj1iKTtudWxsIT09aDspe3ZhciBrPWguZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPVxuay5maXJzdENvbnRleHQ7bnVsbCE9PWw7KXtpZihsLmNvbnRleHQ9PT1kJiYwIT09KGwub2JzZXJ2ZWRCaXRzJmYpKXsxPT09aC50YWcmJihsPXpnKC0xLGMmLWMpLGwudGFnPTIsQWcoaCxsKSk7aC5sYW5lc3w9YztsPWguYWx0ZXJuYXRlO251bGwhPT1sJiYobC5sYW5lc3w9Yyk7c2coaC5yZXR1cm4sYyk7ay5sYW5lc3w9YzticmVha31sPWwubmV4dH19ZWxzZSBnPTEwPT09aC50YWc/aC50eXBlPT09Yi50eXBlP251bGw6aC5jaGlsZDpoLmNoaWxkO2lmKG51bGwhPT1nKWcucmV0dXJuPWg7ZWxzZSBmb3IoZz1oO251bGwhPT1nOyl7aWYoZz09PWIpe2c9bnVsbDticmVha31oPWcuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Zy5yZXR1cm47Zz1oO2JyZWFrfWc9Zy5yZXR1cm59aD1nfWZpKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHRnKGIsYyksZT12ZyhlLFxuZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmZsYWdzfD0xLGZpKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1sZyhlLGIucGVuZGluZ1Byb3BzKSxmPWxnKGUudHlwZSxmKSxpaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4ga2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksYi50YWc9MSxGZihkKT8oYT0hMCxKZihiKSk6YT0hMSx0ZyhiLGMpLE1nKGIsZCxlKSxPZyhiLGQsZSxjKSxxaShudWxsLGIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIEFpKGEsYixjKTtjYXNlIDIzOnJldHVybiBtaShhLGIsYyk7Y2FzZSAyNDpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHkoMTU2LGIudGFnKSk7XG59O2Z1bmN0aW9uIGlrKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5mbGFncz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRMYW5lcz10aGlzLmxhbmVzPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBuaChhLGIsYyxkKXtyZXR1cm4gbmV3IGlrKGEsYixjLGQpfWZ1bmN0aW9uIGppKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9XG5mdW5jdGlvbiBoayhhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gamkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PUFhKXJldHVybiAxMTtpZihhPT09RGEpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gVGcoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1uaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLnR5cGU9YS50eXBlLGMuZmxhZ3M9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBWZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpamkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgdWE6cmV0dXJuIFhnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgSGE6Zz04O2V8PTE2O2JyZWFrO2Nhc2Ugd2E6Zz04O2V8PTE7YnJlYWs7Y2FzZSB4YTpyZXR1cm4gYT1uaCgxMixjLGIsZXw4KSxhLmVsZW1lbnRUeXBlPXhhLGEudHlwZT14YSxhLmxhbmVzPWYsYTtjYXNlIEJhOnJldHVybiBhPW5oKDEzLGMsYixlKSxhLnR5cGU9QmEsYS5lbGVtZW50VHlwZT1CYSxhLmxhbmVzPWYsYTtjYXNlIENhOnJldHVybiBhPW5oKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUNhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHZpKGMsZSxmLGIpO2Nhc2UgSmE6cmV0dXJuIGE9bmgoMjQsYyxiLGUpLGEuZWxlbWVudFR5cGU9SmEsYS5sYW5lcz1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09XG50eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgeWE6Zz0xMDticmVhayBhO2Nhc2UgemE6Zz05O2JyZWFrIGE7Y2FzZSBBYTpnPTExO2JyZWFrIGE7Y2FzZSBEYTpnPTE0O2JyZWFrIGE7Y2FzZSBFYTpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgRmE6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHkoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9bmgoZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IubGFuZXM9ZjtyZXR1cm4gYn1mdW5jdGlvbiBYZyhhLGIsYyxkKXthPW5oKDcsYSxkLGIpO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiB2aShhLGIsYyxkKXthPW5oKDIzLGEsZCxiKTthLmVsZW1lbnRUeXBlPUlhO2EubGFuZXM9YztyZXR1cm4gYX1mdW5jdGlvbiBVZyhhLGIsYyl7YT1uaCg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBXZyhhLGIsYyl7Yj1uaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGprKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMuZmluaXNoZWRXb3JrPXRoaXMucGluZ0NhY2hlPXRoaXMuY3VycmVudD10aGlzLnBlbmRpbmdDaGlsZHJlbj1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPVpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPVpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPVpjKDApO3RoaXMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1udWxsfVxuZnVuY3Rpb24ga2soYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp0YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGxrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUhnKCksZz1JZyhlKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbHM7Yjp7aWYoWmIoYykhPT1jfHwxIT09Yy50YWcpdGhyb3cgRXJyb3IoeSgxNzApKTt2YXIgaD1jO2Rve3N3aXRjaChoLnRhZyl7Y2FzZSAzOmg9aC5zdGF0ZU5vZGUuY29udGV4dDticmVhayBiO2Nhc2UgMTppZihGZihoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHkoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEZmKGspKXtjPUlmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUNmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9emcoZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09XG5kJiYoYi5jYWxsYmFjaz1kKTtBZyhlLGIpO0pnKGUsZyxmKTtyZXR1cm4gZ31mdW5jdGlvbiBtayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIG5rKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBvayhhLGIpe25rKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZuayhhLGIpfWZ1bmN0aW9uIHBrKCl7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBxayhhLGIsYyl7dmFyIGQ9bnVsbCE9YyYmbnVsbCE9Yy5oeWRyYXRpb25PcHRpb25zJiZjLmh5ZHJhdGlvbk9wdGlvbnMubXV0YWJsZVNvdXJjZXN8fG51bGw7Yz1uZXcgamsoYSxiLG51bGwhPWMmJiEwPT09Yy5oeWRyYXRlKTtiPW5oKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtjLmN1cnJlbnQ9YjtiLnN0YXRlTm9kZT1jO3hnKGIpO2FbZmZdPWMuY3VycmVudDtjZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKXtiPWRbYV07dmFyIGU9Yi5fZ2V0VmVyc2lvbjtlPWUoYi5fc291cmNlKTtudWxsPT1jLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE/Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVtiLGVdOmMubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKGIsZSl9dGhpcy5faW50ZXJuYWxSb290PWN9XG5xay5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe2xrKGEsdGhpcy5faW50ZXJuYWxSb290LG51bGwsbnVsbCl9O3FrLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290LGI9YS5jb250YWluZXJJbmZvO2xrKG51bGwsYSxudWxsLGZ1bmN0aW9uKCl7YltmZl09bnVsbH0pfTtmdW5jdGlvbiByayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9XG5mdW5jdGlvbiBzayhhLGIpe2J8fChiPWE/OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YS5maXJzdENoaWxkOm51bGwsYj0hKCFifHwxIT09Yi5ub2RlVHlwZXx8IWIuaGFzQXR0cmlidXRlKFwiZGF0YS1yZWFjdHJvb3RcIikpKTtpZighYilmb3IodmFyIGM7Yz1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChjKTtyZXR1cm4gbmV3IHFrKGEsMCxiP3toeWRyYXRlOiEwfTp2b2lkIDApfVxuZnVuY3Rpb24gdGsoYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1tayhnKTtoLmNhbGwoYSl9fWxrKGIsZyxhLGUpfWVsc2V7Zj1jLl9yZWFjdFJvb3RDb250YWluZXI9c2soYyxkKTtnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGs9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7ay5jYWxsKGEpfX1YaihmdW5jdGlvbigpe2xrKGIsZyxhLGUpfSl9cmV0dXJuIG1rKGcpfWVjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCk7SmcoYSw0LGIpO29rKGEsNCl9fTtmYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNjcxMDg4NjQsYik7b2soYSw2NzEwODg2NCl9fTtcbmdjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUhnKCksYz1JZyhhKTtKZyhhLGMsYik7b2soYSxjKX19O2hjPWZ1bmN0aW9uKGEsYil7cmV0dXJuIGIoKX07XG55Yj1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOmFiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1EYihkKTtpZighZSl0aHJvdyBFcnJvcih5KDkwKSk7V2EoZCk7YWIoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZmYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0diPVdqO1xuSGI9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1YO1h8PTQ7dHJ5e3JldHVybiBnZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtYPWYsMD09PVgmJih3aigpLGlnKCkpfX07SWI9ZnVuY3Rpb24oKXswPT09KFgmNDkpJiYoVmooKSxPaigpKX07SmI9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO1h8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19O2Z1bmN0aW9uIHVrKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIGtrKGEsYixudWxsLGMpfXZhciB2az17RXZlbnRzOltDYix1ZSxEYixFYixGYixPaix7Y3VycmVudDohMX1dfSx3az17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6d2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNy4wLjJcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHhrPXtidW5kbGVUeXBlOndrLmJ1bmRsZVR5cGUsdmVyc2lvbjp3ay52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6d2sucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp3ay5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpyYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9Y2MoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndrLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbnBrLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgeWs9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF5ay5pc0Rpc2FibGVkJiZ5ay5zdXBwb3J0c0ZpYmVyKXRyeXtMZj15ay5pbmplY3QoeGspLE1mPXlrfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD12aztleHBvcnRzLmNyZWF0ZVBvcnRhbD11aztcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IoeSgxODgpKTt0aHJvdyBFcnJvcih5KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWNjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1YO2lmKDAhPT0oYyY0OCkpcmV0dXJuIGEoYik7WHw9MTt0cnl7aWYoYSlyZXR1cm4gZ2coOTksYS5iaW5kKG51bGwsYikpfWZpbmFsbHl7WD1jLGlnKCl9fTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIXJrKGIpKXRocm93IEVycm9yKHkoMjAwKSk7cmV0dXJuIHRrKG51bGwsYSxiLCExLGMpfTtleHBvcnRzLnVubW91bnRDb21wb25lbnRBdE5vZGU9ZnVuY3Rpb24oYSl7aWYoIXJrKGEpKXRocm93IEVycm9yKHkoNDApKTtyZXR1cm4gYS5fcmVhY3RSb290Q29udGFpbmVyPyhYaihmdW5jdGlvbigpe3RrKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPW51bGw7YVtmZl09bnVsbH0pfSksITApOiExfTtleHBvcnRzLnVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzPVdqO2V4cG9ydHMudW5zdGFibGVfY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7cmV0dXJuIHVrKGEsYiwyPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbCl9O1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyxkKXtpZighcmsoYykpdGhyb3cgRXJyb3IoeSgyMDApKTtpZihudWxsPT1hfHx2b2lkIDA9PT1hLl9yZWFjdEludGVybmFscyl0aHJvdyBFcnJvcih5KDM4KSk7cmV0dXJuIHRrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7dmFyIGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixjPWI/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsZD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsZT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxmPWI/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGc9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsaD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxrPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsbD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5hc3luY19tb2RlXCIpOjYwMTExLG09Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLG49Yj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIscD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxxPWI/XG5TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTo2MDEyMCxyPWI/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsdD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LHY9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsdz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mdW5kYW1lbnRhbFwiKTo2MDExNyx4PWI/U3ltYm9sLmZvcihcInJlYWN0LnJlc3BvbmRlclwiKTo2MDExOCx5PWI/U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpOjYwMTE5O1xuZnVuY3Rpb24geihhKXtpZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXt2YXIgdT1hLiQkdHlwZW9mO3N3aXRjaCh1KXtjYXNlIGM6c3dpdGNoKGE9YS50eXBlLGEpe2Nhc2UgbDpjYXNlIG06Y2FzZSBlOmNhc2UgZzpjYXNlIGY6Y2FzZSBwOnJldHVybiBhO2RlZmF1bHQ6c3dpdGNoKGE9YSYmYS4kJHR5cGVvZixhKXtjYXNlIGs6Y2FzZSBuOmNhc2UgdDpjYXNlIHI6Y2FzZSBoOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHV9fWNhc2UgZDpyZXR1cm4gdX19fWZ1bmN0aW9uIEEoYSl7cmV0dXJuIHooYSk9PT1tfWV4cG9ydHMuQXN5bmNNb2RlPWw7ZXhwb3J0cy5Db25jdXJyZW50TW9kZT1tO2V4cG9ydHMuQ29udGV4dENvbnN1bWVyPWs7ZXhwb3J0cy5Db250ZXh0UHJvdmlkZXI9aDtleHBvcnRzLkVsZW1lbnQ9YztleHBvcnRzLkZvcndhcmRSZWY9bjtleHBvcnRzLkZyYWdtZW50PWU7ZXhwb3J0cy5MYXp5PXQ7ZXhwb3J0cy5NZW1vPXI7ZXhwb3J0cy5Qb3J0YWw9ZDtcbmV4cG9ydHMuUHJvZmlsZXI9ZztleHBvcnRzLlN0cmljdE1vZGU9ZjtleHBvcnRzLlN1c3BlbnNlPXA7ZXhwb3J0cy5pc0FzeW5jTW9kZT1mdW5jdGlvbihhKXtyZXR1cm4gQShhKXx8eihhKT09PWx9O2V4cG9ydHMuaXNDb25jdXJyZW50TW9kZT1BO2V4cG9ydHMuaXNDb250ZXh0Q29uc3VtZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1rfTtleHBvcnRzLmlzQ29udGV4dFByb3ZpZGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09aH07ZXhwb3J0cy5pc0VsZW1lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PWN9O2V4cG9ydHMuaXNGb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09bn07ZXhwb3J0cy5pc0ZyYWdtZW50PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZX07ZXhwb3J0cy5pc0xhenk9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT10fTtcbmV4cG9ydHMuaXNNZW1vPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cn07ZXhwb3J0cy5pc1BvcnRhbD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWR9O2V4cG9ydHMuaXNQcm9maWxlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWd9O2V4cG9ydHMuaXNTdHJpY3RNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Zn07ZXhwb3J0cy5pc1N1c3BlbnNlPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09cH07XG5leHBvcnRzLmlzVmFsaWRFbGVtZW50VHlwZT1mdW5jdGlvbihhKXtyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGF8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhfHxhPT09ZXx8YT09PW18fGE9PT1nfHxhPT09Znx8YT09PXB8fGE9PT1xfHxcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiYoYS4kJHR5cGVvZj09PXR8fGEuJCR0eXBlb2Y9PT1yfHxhLiQkdHlwZW9mPT09aHx8YS4kJHR5cGVvZj09PWt8fGEuJCR0eXBlb2Y9PT1ufHxhLiQkdHlwZW9mPT09d3x8YS4kJHR5cGVvZj09PXh8fGEuJCR0eXBlb2Y9PT15fHxhLiQkdHlwZW9mPT09dil9O2V4cG9ydHMudHlwZU9mPXo7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0JDEgPSBmdW5jdGlvbiBjcmVhdGVOYW1lZENvbnRleHQobmFtZSkge1xuICB2YXIgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG4gIHJldHVybiBjb250ZXh0O1xufTtcblxudmFyIGNvbnRleHQgPVxuLyojX19QVVJFX18qL1xuY3JlYXRlTmFtZWRDb250ZXh0JDEoXCJSb3V0ZXJcIik7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHB1dHRpbmcgaGlzdG9yeSBvbiBjb250ZXh0LlxuICovXG5cbnZhciBSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBSb3V0ZXIuY29tcHV0ZVJvb3RNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVSb290TWF0Y2gocGF0aG5hbWUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogXCIvXCIsXG4gICAgICB1cmw6IFwiL1wiLFxuICAgICAgcGFyYW1zOiB7fSxcbiAgICAgIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gUm91dGVyKHByb3BzKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMpIHx8IHRoaXM7XG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMuaGlzdG9yeS5sb2NhdGlvblxuICAgIH07IC8vIFRoaXMgaXMgYSBiaXQgb2YgYSBoYWNrLiBXZSBoYXZlIHRvIHN0YXJ0IGxpc3RlbmluZyBmb3IgbG9jYXRpb25cbiAgICAvLyBjaGFuZ2VzIGhlcmUgaW4gdGhlIGNvbnN0cnVjdG9yIGluIGNhc2UgdGhlcmUgYXJlIGFueSA8UmVkaXJlY3Q+c1xuICAgIC8vIG9uIHRoZSBpbml0aWFsIHJlbmRlci4gSWYgdGhlcmUgYXJlLCB0aGV5IHdpbGwgcmVwbGFjZS9wdXNoIHdoZW5cbiAgICAvLyB0aGV5IG1vdW50IGFuZCBzaW5jZSBjRE0gZmlyZXMgaW4gY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMsIHdlIG1heVxuICAgIC8vIGdldCBhIG5ldyBsb2NhdGlvbiBiZWZvcmUgdGhlIDxSb3V0ZXI+IGlzIG1vdW50ZWQuXG5cbiAgICBfdGhpcy5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IG51bGw7XG5cbiAgICBpZiAoIXByb3BzLnN0YXRpY0NvbnRleHQpIHtcbiAgICAgIF90aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4oZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIGlmIChfdGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgX3RoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX3RoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy51bmxpc3RlbikgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCBSZWFjdC5jcmVhdGVFbGVtZW50KGhpc3RvcnlDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsLFxuICAgICAgdmFsdWU6IHRoaXMucHJvcHMuaGlzdG9yeVxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhwcmV2UHJvcHMuaGlzdG9yeSA9PT0gdGhpcy5wcm9wcy5oaXN0b3J5LCBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5cbnZhciBNZW1vcnlSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTWVtb3J5Um91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBNZW1vcnlSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZU1lbW9yeUhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNZW1vcnlSb3V0ZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IE1lbW9yeVJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgTGlmZWN5Y2xlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKExpZmVjeWNsZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTGlmZWN5Y2xlKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBMaWZlY3ljbGUucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uTW91bnQpIHRoaXMucHJvcHMub25Nb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmICh0aGlzLnByb3BzLm9uVW5tb3VudCkgdGhpcy5wcm9wcy5vblVubW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBMaWZlY3ljbGU7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5IGZyb20gYSBzY3JlZW4uXG4gKi9cblxuZnVuY3Rpb24gUHJvbXB0KF9yZWYpIHtcbiAgdmFyIG1lc3NhZ2UgPSBfcmVmLm1lc3NhZ2UsXG4gICAgICBfcmVmJHdoZW4gPSBfcmVmLndoZW4sXG4gICAgICB3aGVuID0gX3JlZiR3aGVuID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZiR3aGVuO1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTGlmZWN5Y2xlLCB7XG4gICAgICBvbk1vdW50OiBmdW5jdGlvbiBvbk1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgfSxcbiAgICAgIG9uVXBkYXRlOiBmdW5jdGlvbiBvblVwZGF0ZShzZWxmLCBwcmV2UHJvcHMpIHtcbiAgICAgICAgaWYgKHByZXZQcm9wcy5tZXNzYWdlICE9PSBtZXNzYWdlKSB7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICAgICAgc2VsZi5yZWxlYXNlID0gbWV0aG9kKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb25Vbm1vdW50OiBmdW5jdGlvbiBvblVubW91bnQoc2VsZikge1xuICAgICAgICBzZWxmLnJlbGVhc2UoKTtcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlXG4gICAgfSk7XG4gIH0pO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciBtZXNzYWdlVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc3RyaW5nXSk7XG4gIFByb21wdC5wcm9wVHlwZXMgPSB7XG4gICAgd2hlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgbWVzc2FnZTogbWVzc2FnZVR5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG52YXIgY2FjaGUgPSB7fTtcbnZhciBjYWNoZUxpbWl0ID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG4gIHZhciBnZW5lcmF0b3IgPSBwYXRoVG9SZWdleHAuY29tcGlsZShwYXRoKTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBjYWNoZVtwYXRoXSA9IGdlbmVyYXRvcjtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gZ2VuZXJhdG9yO1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gZ2VuZXJhdGVQYXRoKHBhdGgsIHBhcmFtcykge1xuICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGF0aCA9IFwiL1wiO1xuICB9XG5cbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cblxuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7XG4gICAgcHJldHR5OiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSZWRpcmVjdChfcmVmKSB7XG4gIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgX3JlZiRwdXNoID0gX3JlZi5wdXNoLFxuICAgICAgcHVzaCA9IF9yZWYkcHVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHB1c2g7XG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgaGlzdG9yeSA9IGNvbnRleHQuaGlzdG9yeSxcbiAgICAgICAgc3RhdGljQ29udGV4dCA9IGNvbnRleHQuc3RhdGljQ29udGV4dDtcbiAgICB2YXIgbWV0aG9kID0gcHVzaCA/IGhpc3RvcnkucHVzaCA6IGhpc3RvcnkucmVwbGFjZTtcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb21wdXRlZE1hdGNoID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcykgOiBfZXh0ZW5kcyh7fSwgdG8sIHtcbiAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgIH0pIDogdG8pOyAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgIC8vIHNldCB0aGUgbmV3IGxvY2F0aW9uIGltbWVkaWF0ZWx5LlxuXG4gICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCQxKSB7XG4gICAgICAhY29udGV4dCQxID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGU+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCBjb250ZXh0JDEubG9jYXRpb247XG4gICAgICB2YXIgbWF0Y2ggPSBfdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoID8gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcbiAgICAgIDogX3RoaXMucHJvcHMucGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgX3RoaXMucHJvcHMpIDogY29udGV4dCQxLm1hdGNoO1xuXG4gICAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgY29udGV4dCQxLCB7XG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IG1hdGNoXG4gICAgICB9KTtcblxuICAgICAgdmFyIF90aGlzJHByb3BzID0gX3RoaXMucHJvcHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBfdGhpcyRwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBjb21wb25lbnQgPSBfdGhpcyRwcm9wcy5jb21wb25lbnQsXG4gICAgICAgICAgcmVuZGVyID0gX3RoaXMkcHJvcHMucmVuZGVyOyAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgLy8gZGVmYXVsdCwgc28gdXNlIG51bGwgaWYgdGhhdCdzIHRoZSBjYXNlLlxuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNoaWxkcmVuID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpIDogcmVuZGVyID8gcmVuZGVyKHByb3BzKSA6IG51bGwgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogbnVsbCk7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiBmdW5jdGlvbiBjb21wb25lbnQocHJvcHMsIHByb3BOYW1lKSB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFwiSW52YWxpZCBwcm9wICdjb21wb25lbnQnIHN1cHBsaWVkIHRvICdSb3V0ZSc6IHRoZSBwcm9wIGlzIG5vdCBhIHZhbGlkIFJlYWN0IGNvbXBvbmVudFwiKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBwYXRoOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuYXJyYXlPZihQcm9wVHlwZXMuc3RyaW5nKV0pLFxuICAgIHJlbmRlcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sXG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5jb21wb25lbnQpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgcmVuZGVyPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCIpIDogdm9pZCAwO1xuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiAocHJldlByb3BzKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSBcIi9cIiA/IHBhdGggOiBcIi9cIiArIHBhdGg7XG59XG5cbmZ1bmN0aW9uIGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKSArIGxvY2F0aW9uLnBhdGhuYW1lXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBsb2NhdGlvbiwge1xuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCAlcyB3aXRoIDxTdGF0aWNSb3V0ZXI+XCIsIG1ldGhvZE5hbWUpIDogaW52YXJpYW50KGZhbHNlKSA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuLyoqXG4gKiBUaGUgcHVibGljIHRvcC1sZXZlbCBBUEkgZm9yIGEgXCJzdGF0aWNcIiA8Um91dGVyPiwgc28tY2FsbGVkIGJlY2F1c2UgaXRcbiAqIGNhbid0IGFjdHVhbGx5IGNoYW5nZSB0aGUgY3VycmVudCBsb2NhdGlvbi4gSW5zdGVhZCwgaXQganVzdCByZWNvcmRzXG4gKiBsb2NhdGlvbiBjaGFuZ2VzIGluIGEgY29udGV4dCBvYmplY3QuIFVzZWZ1bCBtYWlubHkgaW4gdGVzdGluZyBhbmRcbiAqIHNlcnZlci1yZW5kZXJpbmcgc2NlbmFyaW9zLlxuICovXG5cblxudmFyIFN0YXRpY1JvdXRlciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcblxuICAgIF90aGlzLmhhbmRsZVB1c2ggPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHJldHVybiBfdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gICAgfTtcblxuICAgIF90aGlzLmhhbmRsZUxpc3RlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVCbG9jayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBub29wO1xuICAgIH07XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RhdGljUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubmF2aWdhdGVUbyA9IGZ1bmN0aW9uIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzJGJhc2VuYW1lID0gX3RoaXMkcHJvcHMuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wcyRiYXNlbmFtZSxcbiAgICAgICAgX3RoaXMkcHJvcHMkY29udGV4dCA9IF90aGlzJHByb3BzLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcyRjb250ZXh0ID09PSB2b2lkIDAgPyB7fSA6IF90aGlzJHByb3BzJGNvbnRleHQ7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzJHByb3BzMiA9IHRoaXMucHJvcHMsXG4gICAgICAgIF90aGlzJHByb3BzMiRiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPT09IHZvaWQgMCA/IFwiXCIgOiBfdGhpcyRwcm9wczIkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzMiRjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQsXG4gICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wczIkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wczIkY29udGV4dCxcbiAgICAgICAgX3RoaXMkcHJvcHMyJGxvY2F0aW9uID0gX3RoaXMkcHJvcHMyLmxvY2F0aW9uLFxuICAgICAgICBsb2NhdGlvbiA9IF90aGlzJHByb3BzMiRsb2NhdGlvbiA9PT0gdm9pZCAwID8gXCIvXCIgOiBfdGhpcyRwcm9wczIkbG9jYXRpb24sXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfdGhpcyRwcm9wczIsIFtcImJhc2VuYW1lXCIsIFwiY29udGV4dFwiLCBcImxvY2F0aW9uXCJdKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogZnVuY3Rpb24gY3JlYXRlSHJlZihwYXRoKSB7XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUgKyBjcmVhdGVVUkwocGF0aCkpO1xuICAgICAgfSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaGlzdG9yeTogaGlzdG9yeSxcbiAgICAgIHN0YXRpY0NvbnRleHQ6IGNvbnRleHRcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFN0YXRpY1JvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNvbnRleHQ6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICB9O1xuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIHJldHVybiBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTd2l0Y2gucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgIGVsZW1lbnQgPSBjaGlsZDtcbiAgICAgICAgICB2YXIgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcbiAgICAgICAgICBtYXRjaCA9IHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF9leHRlbmRzKHt9LCBjaGlsZC5wcm9wcywge1xuICAgICAgICAgICAgcGF0aDogcGF0aFxuICAgICAgICAgIH0pKSA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHtcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBjb21wdXRlZE1hdGNoOiBtYXRjaFxuICAgICAgfSkgOiBudWxsO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU3dpdGNoLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIChwcmV2UHJvcHMpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKCF0aGlzLnByb3BzLmxvY2F0aW9uICYmIHByZXZQcm9wcy5sb2NhdGlvbiksICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogQSBwdWJsaWMgaGlnaGVyLW9yZGVyIGNvbXBvbmVudCB0byBhY2Nlc3MgdGhlIGltcGVyYXRpdmUgQVBJXG4gKi9cblxuZnVuY3Rpb24gd2l0aFJvdXRlcihDb21wb25lbnQpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gXCJ3aXRoUm91dGVyKFwiICsgKENvbXBvbmVudC5kaXNwbGF5TmFtZSB8fCBDb21wb25lbnQubmFtZSkgKyBcIilcIjtcblxuICB2YXIgQyA9IGZ1bmN0aW9uIEMocHJvcHMpIHtcbiAgICB2YXIgd3JhcHBlZENvbXBvbmVudFJlZiA9IHByb3BzLndyYXBwZWRDb21wb25lbnRSZWYsXG4gICAgICAgIHJlbWFpbmluZ1Byb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UocHJvcHMsIFtcIndyYXBwZWRDb21wb25lbnRSZWZcIl0pO1xuXG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCByZW1haW5pbmdQcm9wcywgY29udGV4dCwge1xuICAgICAgICByZWY6IHdyYXBwZWRDb21wb25lbnRSZWZcbiAgICAgIH0pKTtcbiAgICB9KTtcbiAgfTtcblxuICBDLmRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWU7XG4gIEMuV3JhcHBlZENvbXBvbmVudCA9IENvbXBvbmVudDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgQy5wcm9wVHlwZXMgPSB7XG4gICAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm9iamVjdF0pXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn1cblxudmFyIHVzZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0O1xuZnVuY3Rpb24gdXNlSGlzdG9yeSgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUhpc3RvcnkoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChoaXN0b3J5Q29udGV4dCk7XG59XG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoY29udGV4dCkubG9jYXRpb247XG59XG5mdW5jdGlvbiB1c2VQYXJhbXMoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaC5wYXJhbXMgOiB7fTtcbn1cbmZ1bmN0aW9uIHVzZVJvdXRlTWF0Y2gocGF0aCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHZhciBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIHZhciBtYXRjaCA9IHVzZUNvbnRleHQoY29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBwYXRoKSA6IG1hdGNoO1xufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIGdsb2JhbCA9IHdpbmRvdztcbiAgICB2YXIga2V5ID0gXCJfX3JlYWN0X3JvdXRlcl9idWlsZF9fXCI7XG4gICAgdmFyIGJ1aWxkTmFtZXMgPSB7XG4gICAgICBjanM6IFwiQ29tbW9uSlNcIixcbiAgICAgIGVzbTogXCJFUyBtb2R1bGVzXCIsXG4gICAgICB1bWQ6IFwiVU1EXCJcbiAgICB9O1xuXG4gICAgaWYgKGdsb2JhbFtrZXldICYmIGdsb2JhbFtrZXldICE9PSBcImVzbVwiKSB7XG4gICAgICB2YXIgaW5pdGlhbEJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbZ2xvYmFsW2tleV1dO1xuICAgICAgdmFyIHNlY29uZGFyeUJ1aWxkTmFtZSA9IGJ1aWxkTmFtZXNbXCJlc21cIl07IC8vIFRPRE86IEFkZCBsaW5rIHRvIGFydGljbGUgdGhhdCBleHBsYWlucyBpbiBkZXRhaWwgaG93IHRvIGF2b2lkXG4gICAgICAvLyBsb2FkaW5nIDIgZGlmZmVyZW50IGJ1aWxkcy5cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IGFyZSBsb2FkaW5nIHRoZSBcIiArIHNlY29uZGFyeUJ1aWxkTmFtZSArIFwiIGJ1aWxkIG9mIFJlYWN0IFJvdXRlciBcIiArIChcIm9uIGEgcGFnZSB0aGF0IGlzIGFscmVhZHkgcnVubmluZyB0aGUgXCIgKyBpbml0aWFsQnVpbGROYW1lICsgXCIgXCIpICsgXCJidWlsZCwgc28gdGhpbmdzIHdvbid0IHdvcmsgcmlnaHQuXCIpO1xuICAgIH1cblxuICAgIGdsb2JhbFtrZXldID0gXCJlc21cIjtcbiAgfVxufVxuXG5leHBvcnQgeyBNZW1vcnlSb3V0ZXIsIFByb21wdCwgUmVkaXJlY3QsIFJvdXRlLCBSb3V0ZXIsIFN0YXRpY1JvdXRlciwgU3dpdGNoLCBoaXN0b3J5Q29udGV4dCBhcyBfX0hpc3RvcnlDb250ZXh0LCBjb250ZXh0IGFzIF9fUm91dGVyQ29udGV4dCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXJvdXRlci5qcy5tYXBcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3JlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxnPTYwMTAzO2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIGg9U3ltYm9sLmZvcjtnPWgoXCJyZWFjdC5lbGVtZW50XCIpO2V4cG9ydHMuRnJhZ21lbnQ9aChcInJlYWN0LmZyYWdtZW50XCIpfXZhciBtPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIsbj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGspe3ZhciBiLGQ9e30sZT1udWxsLGw9bnVsbDt2b2lkIDAhPT1rJiYoZT1cIlwiK2spO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGw9YS5yZWYpO2ZvcihiIGluIGEpbi5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmcsdHlwZTpjLGtleTplLHJlZjpsLHByb3BzOmQsX293bmVyOm0uY3VycmVudH19ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MC4yMC4yXG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX1cbmlmKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciB0PW51bGwsdT1udWxsLHc9ZnVuY3Rpb24oKXtpZihudWxsIT09dCl0cnl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTt0KCEwLGEpO3Q9bnVsbH1jYXRjaChiKXt0aHJvdyBzZXRUaW1lb3V0KHcsMCksYjt9fTtmPWZ1bmN0aW9uKGEpe251bGwhPT10P3NldFRpbWVvdXQoZiwwLGEpOih0PWEsc2V0VGltZW91dCh3LDApKX07Zz1mdW5jdGlvbihhLGIpe3U9c2V0VGltZW91dChhLGIpfTtoPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuITF9O2s9ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbigpe319ZWxzZXt2YXIgeD13aW5kb3cuc2V0VGltZW91dCx5PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgej1cbndpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB6JiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBjYW5jZWxBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKX12YXIgQT0hMSxCPW51bGwsQz0tMSxEPTUsRT0wO2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKT49XG5FfTtrPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpEPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgRj1uZXcgTWVzc2FnZUNoYW5uZWwsRz1GLnBvcnQyO0YucG9ydDEub25tZXNzYWdlPWZ1bmN0aW9uKCl7aWYobnVsbCE9PUIpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7RT1hK0Q7dHJ5e0IoITAsYSk/Ry5wb3N0TWVzc2FnZShudWxsKTooQT0hMSxCPW51bGwpfWNhdGNoKGIpe3Rocm93IEcucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQT0hMX07Zj1mdW5jdGlvbihhKXtCPWE7QXx8KEE9ITAsRy5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtDPVxueChmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eShDKTtDPS0xfX1mdW5jdGlvbiBIKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEkoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEooYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIEsoYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SShuLGMpKXZvaWQgMCE9PXImJjA+SShyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SShyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSShhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTD1bXSxNPVtdLE49MSxPPW51bGwsUD0zLFE9ITEsUj0hMSxTPSExO1xuZnVuY3Rpb24gVChhKXtmb3IodmFyIGI9SihNKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKUsoTSk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlLKE0pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSChMLGIpO2Vsc2UgYnJlYWs7Yj1KKE0pfX1mdW5jdGlvbiBVKGEpe1M9ITE7VChhKTtpZighUilpZihudWxsIT09SihMKSlSPSEwLGYoVik7ZWxzZXt2YXIgYj1KKE0pO251bGwhPT1iJiZnKFUsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gVihhLGIpe1I9ITE7UyYmKFM9ITEsaCgpKTtRPSEwO3ZhciBjPVA7dHJ5e1QoYik7Zm9yKE89SihMKTtudWxsIT09TyYmKCEoTy5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWV4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQoKSk7KXt2YXIgZD1PLmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXtPLmNhbGxiYWNrPW51bGw7UD1PLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChPLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/Ty5jYWxsYmFjaz1lOk89PT1KKEwpJiZLKEwpO1QoYil9ZWxzZSBLKEwpO089SihMKX1pZihudWxsIT09Tyl2YXIgbT0hMDtlbHNle3ZhciBuPUooTSk7bnVsbCE9PW4mJmcoVSxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7Tz1udWxsLFA9YyxRPSExfX12YXIgVz1rO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7XG5leHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO2V4cG9ydHMudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHk9MjtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1J8fFF8fChSPSEwLGYoVikpfTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFB9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gSihMKX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFApe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVB9dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtQPWN9fTtleHBvcnRzLnVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1XO2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UDtQPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtQPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6TisrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsSChNLGEpLG51bGw9PT1KKEwpJiZhPT09SihNKSYmKFM/aCgpOlM9ITAsZyhVLGMtZCkpKTooYS5zb3J0SW5kZXg9ZSxIKEwsYSksUnx8UXx8KFI9ITAsZihWKSkpO3JldHVybiBhfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVA7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UDtQPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1A9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKHN0eWxlLCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlKSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIik7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKSB7XG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsInZhciBpc1Byb2R1Y3Rpb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nO1xudmFyIHByZWZpeCA9ICdJbnZhcmlhbnQgZmFpbGVkJztcbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgICBpZiAoY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJvZHVjdGlvbikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IocHJlZml4KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCArIFwiOiBcIiArIChtZXNzYWdlIHx8ICcnKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGludmFyaWFudDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gIGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykge1xuICAgIGFycjJbaV0gPSBhcnJbaV07XG4gIH1cblxuICByZXR1cm4gYXJyMjtcbn0iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn0iLCJpbXBvcnQgc2V0UHJvdG90eXBlT2YgZnJvbSBcIi4vc2V0UHJvdG90eXBlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImltcG9ydCBvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJpbXBvcnQgYXJyYXlXaXRoSG9sZXMgZnJvbSBcIi4vYXJyYXlXaXRoSG9sZXMuanNcIjtcbmltcG9ydCBpdGVyYWJsZVRvQXJyYXlMaW1pdCBmcm9tIFwiLi9pdGVyYWJsZVRvQXJyYXlMaW1pdC5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVSZXN0IGZyb20gXCIuL25vbkl0ZXJhYmxlUmVzdC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBhcnJheVdpdGhIb2xlcyhhcnIpIHx8IGl0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkge1xuICB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07XG5cbiAgaWYgKF9pID09IG51bGwpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG5cbiAgdmFyIF9zLCBfZTtcblxuICB0cnkge1xuICAgIGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59IiwiaW1wb3J0IGFycmF5V2l0aG91dEhvbGVzIGZyb20gXCIuL2FycmF5V2l0aG91dEhvbGVzLmpzXCI7XG5pbXBvcnQgaXRlcmFibGVUb0FycmF5IGZyb20gXCIuL2l0ZXJhYmxlVG9BcnJheS5qc1wiO1xuaW1wb3J0IHVuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IGZyb20gXCIuL3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5LmpzXCI7XG5pbXBvcnQgbm9uSXRlcmFibGVTcHJlYWQgZnJvbSBcIi4vbm9uSXRlcmFibGVTcHJlYWQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIGFycmF5V2l0aG91dEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5KGFycikgfHwgdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBub25JdGVyYWJsZVNwcmVhZCgpO1xufSIsImltcG9ydCBhcnJheUxpa2VUb0FycmF5IGZyb20gXCIuL2FycmF5TGlrZVRvQXJyYXkuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIG9iajtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59IiwiaW1wb3J0IGFycmF5TGlrZVRvQXJyYXkgZnJvbSBcIi4vYXJyYXlMaWtlVG9BcnJheS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIGFycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5mID0ge307XG4vLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4vLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18uZSA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBQcm9taXNlLmFsbChPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmYpLnJlZHVjZSgocHJvbWlzZXMsIGtleSkgPT4ge1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uZltrZXldKGNodW5rSWQsIHByb21pc2VzKTtcblx0XHRyZXR1cm4gcHJvbWlzZXM7XG5cdH0sIFtdKSk7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFzeW5jIGNodW5rc1xuX193ZWJwYWNrX3JlcXVpcmVfXy51ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLmJ1bmRsZS5qc1wiO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNzk6IDBcbn07XG5cbl9fd2VicGFja19yZXF1aXJlX18uZi5qID0gKGNodW5rSWQsIHByb21pc2VzKSA9PiB7XG5cdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSA/IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA6IHVuZGVmaW5lZDtcblx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEgIT09IDApIHsgLy8gMCBtZWFucyBcImFscmVhZHkgaW5zdGFsbGVkXCIuXG5cblx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG5cdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcblx0XHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDaHVua0RhdGFbMl0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYodHJ1ZSkgeyAvLyBhbGwgY2h1bmtzIGhhdmUgSlNcblx0XHRcdFx0XHQvLyBzZXR1cCBQcm9taXNlIGluIGNodW5rIGNhY2hlXG5cdFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiAoaW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF0pKTtcblx0XHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG5cdFx0XHRcdFx0Ly8gc3RhcnQgY2h1bmsgbG9hZGluZ1xuXHRcdFx0XHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLnUoY2h1bmtJZCk7XG5cdFx0XHRcdFx0Ly8gY3JlYXRlIGVycm9yIGJlZm9yZSBzdGFjayB1bndvdW5kIHRvIGdldCB1c2VmdWwgc3RhY2t0cmFjZSBsYXRlclxuXHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuXHRcdFx0XHRcdHZhciBsb2FkaW5nRW5kZWQgPSAoZXZlbnQpID0+IHtcblx0XHRcdFx0XHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpKSB7XG5cdFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcblx0XHRcdFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcblx0XHRcdFx0XHRcdFx0XHRlcnJvci5tZXNzYWdlID0gJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLm5hbWUgPSAnQ2h1bmtMb2FkRXJyb3InO1xuXHRcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG5cdFx0XHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhWzFdKGVycm9yKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkLCBcImNodW5rLVwiICsgY2h1bmtJZCwgY2h1bmtJZCk7XG5cdFx0XHRcdH0gZWxzZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuXHRcdFx0fVxuXHRcdH1cbn07XG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG52YXIgd2VicGFja0pzb25wQ2FsbGJhY2sgPSAocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24sIGRhdGEpID0+IHtcblx0dmFyIFtjaHVua0lkcywgbW9yZU1vZHVsZXMsIHJ1bnRpbWVdID0gZGF0YTtcblx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG5cdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuXHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwO1xuXHRpZihjaHVua0lkcy5zb21lKChpZCkgPT4gKGluc3RhbGxlZENodW5rc1tpZF0gIT09IDApKSkge1xuXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYocnVudGltZSkgdmFyIHJlc3VsdCA9IHJ1bnRpbWUoX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cdH1cblx0aWYocGFyZW50Q2h1bmtMb2FkaW5nRnVuY3Rpb24pIHBhcmVudENodW5rTG9hZGluZ0Z1bmN0aW9uKGRhdGEpO1xuXHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuXHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJiBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcblx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXVswXSgpO1xuXHRcdH1cblx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZHNbaV1dID0gMDtcblx0fVxuXG59XG5cbnZhciBjaHVua0xvYWRpbmdHbG9iYWwgPSBzZWxmW1wid2VicGFja0NodW5rcm91bmRpbl9ob21lcGFnZVwiXSA9IHNlbGZbXCJ3ZWJwYWNrQ2h1bmtyb3VuZGluX2hvbWVwYWdlXCJdIHx8IFtdO1xuY2h1bmtMb2FkaW5nR2xvYmFsLmZvckVhY2god2VicGFja0pzb25wQ2FsbGJhY2suYmluZChudWxsLCAwKSk7XG5jaHVua0xvYWRpbmdHbG9iYWwucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrLmJpbmQobnVsbCwgY2h1bmtMb2FkaW5nR2xvYmFsLnB1c2guYmluZChjaHVua0xvYWRpbmdHbG9iYWwpKTsiLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgZWxldmF0aW9ucyA9IHt9O1xuICB0aGVtZS5zaGFkb3dzLmZvckVhY2goZnVuY3Rpb24gKHNoYWRvdywgaW5kZXgpIHtcbiAgICBlbGV2YXRpb25zW1wiZWxldmF0aW9uXCIuY29uY2F0KGluZGV4KV0gPSB7XG4gICAgICBib3hTaGFkb3c6IHNoYWRvd1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gX2V4dGVuZHMoe1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLmJhY2tncm91bmQucGFwZXIsXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS50ZXh0LnByaW1hcnksXG4gICAgICB0cmFuc2l0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ2JveC1zaGFkb3cnKVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBzcXVhcmU9e2ZhbHNlfWAuICovXG4gICAgcm91bmRlZDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiB0aGVtZS5zaGFwZS5ib3JkZXJSYWRpdXNcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cIm91dGxpbmVkXCJgLiAqL1xuICAgIG91dGxpbmVkOiB7XG4gICAgICBib3JkZXI6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfVxuICB9LCBlbGV2YXRpb25zKTtcbn07XG52YXIgUGFwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBQYXBlcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkc3F1YXJlID0gcHJvcHMuc3F1YXJlLFxuICAgICAgc3F1YXJlID0gX3Byb3BzJHNxdWFyZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkc3F1YXJlLFxuICAgICAgX3Byb3BzJGVsZXZhdGlvbiA9IHByb3BzLmVsZXZhdGlvbixcbiAgICAgIGVsZXZhdGlvbiA9IF9wcm9wcyRlbGV2YXRpb24gPT09IHZvaWQgMCA/IDEgOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgX3Byb3BzJHZhcmlhbnQgPSBwcm9wcy52YXJpYW50LFxuICAgICAgdmFyaWFudCA9IF9wcm9wcyR2YXJpYW50ID09PSB2b2lkIDAgPyAnZWxldmF0aW9uJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb21wb25lbnRcIiwgXCJzcXVhcmVcIiwgXCJlbGV2YXRpb25cIiwgXCJ2YXJpYW50XCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3NOYW1lLCB2YXJpYW50ID09PSAnb3V0bGluZWQnID8gY2xhc3Nlcy5vdXRsaW5lZCA6IGNsYXNzZXNbXCJlbGV2YXRpb25cIi5jb25jYXQoZWxldmF0aW9uKV0sICFzcXVhcmUgJiYgY2xhc3Nlcy5yb3VuZGVkKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQYXBlci5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgY29udGVudCBvZiB0aGUgY29tcG9uZW50LlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFNoYWRvdyBkZXB0aCwgY29ycmVzcG9uZHMgdG8gYGRwYCBpbiB0aGUgc3BlYy5cbiAgICogSXQgYWNjZXB0cyB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAyNCBpbmNsdXNpdmUuXG4gICAqL1xuICBlbGV2YXRpb246IGNoYWluUHJvcFR5cGVzKFByb3BUeXBlcy5udW1iZXIsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgICAgZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uOyAvLyBpbiBjYXNlIGB3aXRoU3R5bGVzYCBmYWlscyB0byBpbmplY3Qgd2UgZG9uJ3QgbmVlZCB0aGlzIHdhcm5pbmdcblxuICAgIGlmIChjbGFzc2VzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmIChlbGV2YXRpb24gIT0gbnVsbCAmJiBjbGFzc2VzW1wiZWxldmF0aW9uXCIuY29uY2F0KGVsZXZhdGlvbildID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBuZXcgRXJyb3IoXCJNYXRlcmlhbC1VSTogVGhpcyBlbGV2YXRpb24gYFwiLmNvbmNhdChlbGV2YXRpb24sIFwiYCBpcyBub3QgaW1wbGVtZW50ZWQuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgcm91bmRlZCBjb3JuZXJzIGFyZSBkaXNhYmxlZC5cbiAgICovXG4gIHNxdWFyZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFRoZSB2YXJpYW50IHRvIHVzZS5cbiAgICovXG4gIHZhcmlhbnQ6IFByb3BUeXBlcy5vbmVPZihbJ2VsZXZhdGlvbicsICdvdXRsaW5lZCddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlQYXBlcidcbn0pKFBhcGVyKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbmltcG9ydCBQYXBlciBmcm9tICcuLi9QYXBlcic7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICB2YXIgYmFja2dyb3VuZENvbG9yRGVmYXVsdCA9IHRoZW1lLnBhbGV0dGUudHlwZSA9PT0gJ2xpZ2h0JyA/IHRoZW1lLnBhbGV0dGUuZ3JleVsxMDBdIDogdGhlbWUucGFsZXR0ZS5ncmV5WzkwMF07XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBmbGV4RGlyZWN0aW9uOiAnY29sdW1uJyxcbiAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICBib3hTaXppbmc6ICdib3JkZXItYm94JyxcbiAgICAgIC8vIFByZXZlbnQgcGFkZGluZyBpc3N1ZSB3aXRoIHRoZSBNb2RhbCBhbmQgZml4ZWQgcG9zaXRpb25lZCBBcHBCYXIuXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5hcHBCYXIsXG4gICAgICBmbGV4U2hyaW5rOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwiZml4ZWRcImAuICovXG4gICAgcG9zaXRpb25GaXhlZDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMCxcbiAgICAgICdAbWVkaWEgcHJpbnQnOiB7XG4gICAgICAgIC8vIFByZXZlbnQgdGhlIGFwcCBiYXIgdG8gYmUgdmlzaWJsZSBvbiBlYWNoIHByaW50ZWQgcGFnZS5cbiAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgcG9zaXRpb249XCJhYnNvbHV0ZVwiYC4gKi9cbiAgICBwb3NpdGlvbkFic29sdXRlOiB7XG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwic3RpY2t5XCJgLiAqL1xuICAgIHBvc2l0aW9uU3RpY2t5OiB7XG4gICAgICAvLyDimqDvuI8gc3RpY2t5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgSUUgMTEuXG4gICAgICBwb3NpdGlvbjogJ3N0aWNreScsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAnYXV0bycsXG4gICAgICByaWdodDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBwb3NpdGlvbj1cInN0YXRpY1wiYC4gKi9cbiAgICBwb3NpdGlvblN0YXRpYzoge1xuICAgICAgcG9zaXRpb246ICdzdGF0aWMnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHBvc2l0aW9uPVwicmVsYXRpdmVcImAuICovXG4gICAgcG9zaXRpb25SZWxhdGl2ZToge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJkZWZhdWx0XCJgLiAqL1xuICAgIGNvbG9yRGVmYXVsdDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBiYWNrZ3JvdW5kQ29sb3JEZWZhdWx0LFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuZ2V0Q29udHJhc3RUZXh0KGJhY2tncm91bmRDb2xvckRlZmF1bHQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5Lm1haW4sXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5wcmltYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInNlY29uZGFyeVwiYC4gKi9cbiAgICBjb2xvclNlY29uZGFyeToge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUuc2Vjb25kYXJ5LmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwidHJhbnNwYXJlbnRcImAuICovXG4gICAgY29sb3JUcmFuc3BhcmVudDoge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgY29sb3I6ICdpbmhlcml0J1xuICAgIH1cbiAgfTtcbn07XG52YXIgQXBwQmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQXBwQmFyKHByb3BzLCByZWYpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ3ByaW1hcnknIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJHBvc2l0aW9uID0gcHJvcHMucG9zaXRpb24sXG4gICAgICBwb3NpdGlvbiA9IF9wcm9wcyRwb3NpdGlvbiA9PT0gdm9pZCAwID8gJ2ZpeGVkJyA6IF9wcm9wcyRwb3NpdGlvbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiY29sb3JcIiwgXCJwb3NpdGlvblwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBhcGVyLCBfZXh0ZW5kcyh7XG4gICAgc3F1YXJlOiB0cnVlLFxuICAgIGNvbXBvbmVudDogXCJoZWFkZXJcIixcbiAgICBlbGV2YXRpb246IDQsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlc1tcInBvc2l0aW9uXCIuY29uY2F0KGNhcGl0YWxpemUocG9zaXRpb24pKV0sIGNsYXNzZXNbXCJjb2xvclwiLmNvbmNhdChjYXBpdGFsaXplKGNvbG9yKSldLCBjbGFzc05hbWUsIHBvc2l0aW9uID09PSAnZml4ZWQnICYmICdtdWktZml4ZWQnKSxcbiAgICByZWY6IHJlZlxuICB9LCBvdGhlcikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBBcHBCYXIucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknLCAndHJhbnNwYXJlbnQnXSksXG5cbiAgLyoqXG4gICAqIFRoZSBwb3NpdGlvbmluZyB0eXBlLiBUaGUgYmVoYXZpb3Igb2YgdGhlIGRpZmZlcmVudCBvcHRpb25zIGlzIGRlc2NyaWJlZFxuICAgKiBbaW4gdGhlIE1ETiB3ZWIgZG9jc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9DU1MvQ1NTX2xheW91dC9Qb3NpdGlvbmluZykuXG4gICAqIE5vdGU6IGBzdGlja3lgIGlzIG5vdCB1bml2ZXJzYWxseSBzdXBwb3J0ZWQgYW5kIHdpbGwgZmFsbCBiYWNrIHRvIGBzdGF0aWNgIHdoZW4gdW5hdmFpbGFibGUuXG4gICAqL1xuICBwb3NpdGlvbjogUHJvcFR5cGVzLm9uZU9mKFsnYWJzb2x1dGUnLCAnZml4ZWQnLCAncmVsYXRpdmUnLCAnc3RhdGljJywgJ3N0aWNreSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlBcHBCYXInXG59KShBcHBCYXIpOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5XCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBkaXNhYmxlR3V0dGVycz17ZmFsc2V9YC4gKi9cbiAgICBndXR0ZXJzOiBfZGVmaW5lUHJvcGVydHkoe1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMiksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMilcbiAgICB9LCB0aGVtZS5icmVha3BvaW50cy51cCgnc20nKSwge1xuICAgICAgcGFkZGluZ0xlZnQ6IHRoZW1lLnNwYWNpbmcoMyksXG4gICAgICBwYWRkaW5nUmlnaHQ6IHRoZW1lLnNwYWNpbmcoMylcbiAgICB9KSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJyZWd1bGFyXCJgLiAqL1xuICAgIHJlZ3VsYXI6IHRoZW1lLm1peGlucy50b29sYmFyLFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgdmFyaWFudD1cImRlbnNlXCJgLiAqL1xuICAgIGRlbnNlOiB7XG4gICAgICBtaW5IZWlnaHQ6IDQ4XG4gICAgfVxuICB9O1xufTtcbnZhciBUb29sYmFyID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gVG9vbGJhcihwcm9wcywgcmVmKSB7XG4gIHZhciBjbGFzc2VzID0gcHJvcHMuY2xhc3NlcyxcbiAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgIF9wcm9wcyRjb21wb25lbnQgPSBwcm9wcy5jb21wb25lbnQsXG4gICAgICBDb21wb25lbnQgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnZGl2JyA6IF9wcm9wcyRjb21wb25lbnQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUd1dHRlcnMgPSBwcm9wcy5kaXNhYmxlR3V0dGVycyxcbiAgICAgIGRpc2FibGVHdXR0ZXJzID0gX3Byb3BzJGRpc2FibGVHdXR0ZXJzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlR3V0dGVycyxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3JlZ3VsYXInIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVHdXR0ZXJzXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzZXNbdmFyaWFudF0sIGNsYXNzTmFtZSwgIWRpc2FibGVHdXR0ZXJzICYmIGNsYXNzZXMuZ3V0dGVycyksXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVG9vbGJhci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBUb29sYmFyIGNoaWxkcmVuLCB1c3VhbGx5IGEgbWl4dHVyZSBvZiBgSWNvbkJ1dHRvbmAsIGBCdXR0b25gIGFuZCBgVHlwb2dyYXBoeWAuXG4gICAqL1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLmVsZW1lbnRUeXBlLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIGRpc2FibGVzIGd1dHRlciBwYWRkaW5nLlxuICAgKi9cbiAgZGlzYWJsZUd1dHRlcnM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgdmFyaWFudCB0byB1c2UuXG4gICAqL1xuICB2YXJpYW50OiBQcm9wVHlwZXMub25lT2YoWydyZWd1bGFyJywgJ2RlbnNlJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aVRvb2xiYXInXG59KShUb29sYmFyKTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0ge307XG4gIHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcbiAgdmFyIGtleSwgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufSIsImltcG9ydCBzZXRQcm90b3R5cGVPZiBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2ZcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpOyIsImltcG9ydCB7IENoaWxkcmVuLCBjbG9uZUVsZW1lbnQsIGlzVmFsaWRFbGVtZW50IH0gZnJvbSAncmVhY3QnO1xuLyoqXG4gKiBHaXZlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmAsIHJldHVybiBhbiBvYmplY3QgbWFwcGluZyBrZXkgdG8gY2hpbGQuXG4gKlxuICogQHBhcmFtIHsqfSBjaGlsZHJlbiBgdGhpcy5wcm9wcy5jaGlsZHJlbmBcbiAqIEByZXR1cm4ge29iamVjdH0gTWFwcGluZyBvZiBrZXkgdG8gY2hpbGRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2hpbGRNYXBwaW5nKGNoaWxkcmVuLCBtYXBGbikge1xuICB2YXIgbWFwcGVyID0gZnVuY3Rpb24gbWFwcGVyKGNoaWxkKSB7XG4gICAgcmV0dXJuIG1hcEZuICYmIGlzVmFsaWRFbGVtZW50KGNoaWxkKSA/IG1hcEZuKGNoaWxkKSA6IGNoaWxkO1xuICB9O1xuXG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoY2hpbGRyZW4pIENoaWxkcmVuLm1hcChjaGlsZHJlbiwgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gYztcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAvLyBydW4gdGhlIG1hcCBmdW5jdGlvbiBoZXJlIGluc3RlYWQgc28gdGhhdCB0aGUga2V5IGlzIHRoZSBjb21wdXRlZCBvbmVcbiAgICByZXN1bHRbY2hpbGQua2V5XSA9IG1hcHBlcihjaGlsZCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBXaGVuIHlvdSdyZSBhZGRpbmcgb3IgcmVtb3ZpbmcgY2hpbGRyZW4gc29tZSBtYXkgYmUgYWRkZWQgb3IgcmVtb3ZlZCBpbiB0aGVcbiAqIHNhbWUgcmVuZGVyIHBhc3MuIFdlIHdhbnQgdG8gc2hvdyAqYm90aCogc2luY2Ugd2Ugd2FudCB0byBzaW11bHRhbmVvdXNseVxuICogYW5pbWF0ZSBlbGVtZW50cyBpbiBhbmQgb3V0LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgcHJldmlvdXMgc2V0IG9mIGtleXNcbiAqIGFuZCBhIG5ldyBzZXQgb2Yga2V5cyBhbmQgbWVyZ2VzIHRoZW0gd2l0aCBpdHMgYmVzdCBndWVzcyBvZiB0aGUgY29ycmVjdFxuICogb3JkZXJpbmcuIEluIHRoZSBmdXR1cmUgd2UgbWF5IGV4cG9zZSBzb21lIG9mIHRoZSB1dGlsaXRpZXMgaW5cbiAqIFJlYWN0TXVsdGlDaGlsZCB0byBtYWtlIHRoaXMgZWFzeSwgYnV0IGZvciBub3cgUmVhY3QgaXRzZWxmIGRvZXMgbm90XG4gKiBkaXJlY3RseSBoYXZlIHRoaXMgY29uY2VwdCBvZiB0aGUgdW5pb24gb2YgcHJldkNoaWxkcmVuIGFuZCBuZXh0Q2hpbGRyZW5cbiAqIHNvIHdlIGltcGxlbWVudCBpdCBoZXJlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBwcmV2IHByZXYgY2hpbGRyZW4gYXMgcmV0dXJuZWQgZnJvbVxuICogYFJlYWN0VHJhbnNpdGlvbkNoaWxkTWFwcGluZy5nZXRDaGlsZE1hcHBpbmcoKWAuXG4gKiBAcGFyYW0ge29iamVjdH0gbmV4dCBuZXh0IGNoaWxkcmVuIGFzIHJldHVybmVkIGZyb21cbiAqIGBSZWFjdFRyYW5zaXRpb25DaGlsZE1hcHBpbmcuZ2V0Q2hpbGRNYXBwaW5nKClgLlxuICogQHJldHVybiB7b2JqZWN0fSBhIGtleSBzZXQgdGhhdCBjb250YWlucyBhbGwga2V5cyBpbiBgcHJldmAgYW5kIGFsbCBrZXlzXG4gKiBpbiBgbmV4dGAgaW4gYSByZWFzb25hYmxlIG9yZGVyLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUNoaWxkTWFwcGluZ3MocHJldiwgbmV4dCkge1xuICBwcmV2ID0gcHJldiB8fCB7fTtcbiAgbmV4dCA9IG5leHQgfHwge307XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVGb3JLZXkoa2V5KSB7XG4gICAgcmV0dXJuIGtleSBpbiBuZXh0ID8gbmV4dFtrZXldIDogcHJldltrZXldO1xuICB9IC8vIEZvciBlYWNoIGtleSBvZiBgbmV4dGAsIHRoZSBsaXN0IG9mIGtleXMgdG8gaW5zZXJ0IGJlZm9yZSB0aGF0IGtleSBpblxuICAvLyB0aGUgY29tYmluZWQgbGlzdFxuXG5cbiAgdmFyIG5leHRLZXlzUGVuZGluZyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBwZW5kaW5nS2V5cyA9IFtdO1xuXG4gIGZvciAodmFyIHByZXZLZXkgaW4gcHJldikge1xuICAgIGlmIChwcmV2S2V5IGluIG5leHQpIHtcbiAgICAgIGlmIChwZW5kaW5nS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgbmV4dEtleXNQZW5kaW5nW3ByZXZLZXldID0gcGVuZGluZ0tleXM7XG4gICAgICAgIHBlbmRpbmdLZXlzID0gW107XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlbmRpbmdLZXlzLnB1c2gocHJldktleSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGk7XG4gIHZhciBjaGlsZE1hcHBpbmcgPSB7fTtcblxuICBmb3IgKHZhciBuZXh0S2V5IGluIG5leHQpIHtcbiAgICBpZiAobmV4dEtleXNQZW5kaW5nW25leHRLZXldKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbmV4dEtleXNQZW5kaW5nW25leHRLZXldLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBwZW5kaW5nTmV4dEtleSA9IG5leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXTtcbiAgICAgICAgY2hpbGRNYXBwaW5nW25leHRLZXlzUGVuZGluZ1tuZXh0S2V5XVtpXV0gPSBnZXRWYWx1ZUZvcktleShwZW5kaW5nTmV4dEtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2hpbGRNYXBwaW5nW25leHRLZXldID0gZ2V0VmFsdWVGb3JLZXkobmV4dEtleSk7XG4gIH0gLy8gRmluYWxseSwgYWRkIHRoZSBrZXlzIHdoaWNoIGRpZG4ndCBhcHBlYXIgYmVmb3JlIGFueSBrZXkgaW4gYG5leHRgXG5cblxuICBmb3IgKGkgPSAwOyBpIDwgcGVuZGluZ0tleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjaGlsZE1hcHBpbmdbcGVuZGluZ0tleXNbaV1dID0gZ2V0VmFsdWVGb3JLZXkocGVuZGluZ0tleXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIGNoaWxkTWFwcGluZztcbn1cblxuZnVuY3Rpb24gZ2V0UHJvcChjaGlsZCwgcHJvcCwgcHJvcHMpIHtcbiAgcmV0dXJuIHByb3BzW3Byb3BdICE9IG51bGwgPyBwcm9wc1twcm9wXSA6IGNoaWxkLnByb3BzW3Byb3BdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhwcm9wcywgb25FeGl0ZWQpIHtcbiAgcmV0dXJuIGdldENoaWxkTWFwcGluZyhwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgaW46IHRydWUsXG4gICAgICBhcHBlYXI6IGdldFByb3AoY2hpbGQsICdhcHBlYXInLCBwcm9wcyksXG4gICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgcHJvcHMpLFxuICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBwcm9wcylcbiAgICB9KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIHByZXZDaGlsZE1hcHBpbmcsIG9uRXhpdGVkKSB7XG4gIHZhciBuZXh0Q2hpbGRNYXBwaW5nID0gZ2V0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcy5jaGlsZHJlbik7XG4gIHZhciBjaGlsZHJlbiA9IG1lcmdlQ2hpbGRNYXBwaW5ncyhwcmV2Q2hpbGRNYXBwaW5nLCBuZXh0Q2hpbGRNYXBwaW5nKTtcbiAgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2tleV07XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudChjaGlsZCkpIHJldHVybjtcbiAgICB2YXIgaGFzUHJldiA9IChrZXkgaW4gcHJldkNoaWxkTWFwcGluZyk7XG4gICAgdmFyIGhhc05leHQgPSAoa2V5IGluIG5leHRDaGlsZE1hcHBpbmcpO1xuICAgIHZhciBwcmV2Q2hpbGQgPSBwcmV2Q2hpbGRNYXBwaW5nW2tleV07XG4gICAgdmFyIGlzTGVhdmluZyA9IGlzVmFsaWRFbGVtZW50KHByZXZDaGlsZCkgJiYgIXByZXZDaGlsZC5wcm9wcy5pbjsgLy8gaXRlbSBpcyBuZXcgKGVudGVyaW5nKVxuXG4gICAgaWYgKGhhc05leHQgJiYgKCFoYXNQcmV2IHx8IGlzTGVhdmluZykpIHtcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdlbnRlcmluZycsIGtleSlcbiAgICAgIGNoaWxkcmVuW2tleV0gPSBjbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgb25FeGl0ZWQ6IG9uRXhpdGVkLmJpbmQobnVsbCwgY2hpbGQpLFxuICAgICAgICBpbjogdHJ1ZSxcbiAgICAgICAgZXhpdDogZ2V0UHJvcChjaGlsZCwgJ2V4aXQnLCBuZXh0UHJvcHMpLFxuICAgICAgICBlbnRlcjogZ2V0UHJvcChjaGlsZCwgJ2VudGVyJywgbmV4dFByb3BzKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghaGFzTmV4dCAmJiBoYXNQcmV2ICYmICFpc0xlYXZpbmcpIHtcbiAgICAgIC8vIGl0ZW0gaXMgb2xkIChleGl0aW5nKVxuICAgICAgLy8gY29uc29sZS5sb2coJ2xlYXZpbmcnLCBrZXkpXG4gICAgICBjaGlsZHJlbltrZXldID0gY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIGluOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChoYXNOZXh0ICYmIGhhc1ByZXYgJiYgaXNWYWxpZEVsZW1lbnQocHJldkNoaWxkKSkge1xuICAgICAgLy8gaXRlbSBoYXNuJ3QgY2hhbmdlZCB0cmFuc2l0aW9uIHN0YXRlc1xuICAgICAgLy8gY29weSBvdmVyIHRoZSBsYXN0IHRyYW5zaXRpb24gcHJvcHM7XG4gICAgICAvLyBjb25zb2xlLmxvZygndW5jaGFuZ2VkJywga2V5KVxuICAgICAgY2hpbGRyZW5ba2V5XSA9IGNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgICBvbkV4aXRlZDogb25FeGl0ZWQuYmluZChudWxsLCBjaGlsZCksXG4gICAgICAgIGluOiBwcmV2Q2hpbGQucHJvcHMuaW4sXG4gICAgICAgIGV4aXQ6IGdldFByb3AoY2hpbGQsICdleGl0JywgbmV4dFByb3BzKSxcbiAgICAgICAgZW50ZXI6IGdldFByb3AoY2hpbGQsICdlbnRlcicsIG5leHRQcm9wcylcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjaGlsZHJlbjtcbn0iLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIjtcbmltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2Fzc2VydFRoaXNJbml0aWFsaXplZFwiO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUcmFuc2l0aW9uR3JvdXBDb250ZXh0IGZyb20gJy4vVHJhbnNpdGlvbkdyb3VwQ29udGV4dCc7XG5pbXBvcnQgeyBnZXRDaGlsZE1hcHBpbmcsIGdldEluaXRpYWxDaGlsZE1hcHBpbmcsIGdldE5leHRDaGlsZE1hcHBpbmcgfSBmcm9tICcuL3V0aWxzL0NoaWxkTWFwcGluZyc7XG5cbnZhciB2YWx1ZXMgPSBPYmplY3QudmFsdWVzIHx8IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubWFwKGZ1bmN0aW9uIChrKSB7XG4gICAgcmV0dXJuIG9ialtrXTtcbiAgfSk7XG59O1xuXG52YXIgZGVmYXVsdFByb3BzID0ge1xuICBjb21wb25lbnQ6ICdkaXYnLFxuICBjaGlsZEZhY3Rvcnk6IGZ1bmN0aW9uIGNoaWxkRmFjdG9yeShjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufTtcbi8qKlxuICogVGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAgY29tcG9uZW50IG1hbmFnZXMgYSBzZXQgb2YgdHJhbnNpdGlvbiBjb21wb25lbnRzXG4gKiAoYDxUcmFuc2l0aW9uPmAgYW5kIGA8Q1NTVHJhbnNpdGlvbj5gKSBpbiBhIGxpc3QuIExpa2Ugd2l0aCB0aGUgdHJhbnNpdGlvblxuICogY29tcG9uZW50cywgYDxUcmFuc2l0aW9uR3JvdXA+YCBpcyBhIHN0YXRlIG1hY2hpbmUgZm9yIG1hbmFnaW5nIHRoZSBtb3VudGluZ1xuICogYW5kIHVubW91bnRpbmcgb2YgY29tcG9uZW50cyBvdmVyIHRpbWUuXG4gKlxuICogQ29uc2lkZXIgdGhlIGV4YW1wbGUgYmVsb3cuIEFzIGl0ZW1zIGFyZSByZW1vdmVkIG9yIGFkZGVkIHRvIHRoZSBUb2RvTGlzdCB0aGVcbiAqIGBpbmAgcHJvcCBpcyB0b2dnbGVkIGF1dG9tYXRpY2FsbHkgYnkgdGhlIGA8VHJhbnNpdGlvbkdyb3VwPmAuXG4gKlxuICogTm90ZSB0aGF0IGA8VHJhbnNpdGlvbkdyb3VwPmAgIGRvZXMgbm90IGRlZmluZSBhbnkgYW5pbWF0aW9uIGJlaGF2aW9yIVxuICogRXhhY3RseSBfaG93XyBhIGxpc3QgaXRlbSBhbmltYXRlcyBpcyB1cCB0byB0aGUgaW5kaXZpZHVhbCB0cmFuc2l0aW9uXG4gKiBjb21wb25lbnQuIFRoaXMgbWVhbnMgeW91IGNhbiBtaXggYW5kIG1hdGNoIGFuaW1hdGlvbnMgYWNyb3NzIGRpZmZlcmVudCBsaXN0XG4gKiBpdGVtcy5cbiAqL1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb25Hcm91cCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVHJhbnNpdGlvbkdyb3VwKHByb3BzLCBjb250ZXh0KSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwodGhpcywgcHJvcHMsIGNvbnRleHQpIHx8IHRoaXM7XG5cbiAgICB2YXIgaGFuZGxlRXhpdGVkID0gX3RoaXMuaGFuZGxlRXhpdGVkLmJpbmQoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcykpOyAvLyBJbml0aWFsIGNoaWxkcmVuIHNob3VsZCBhbGwgYmUgZW50ZXJpbmcsIGRlcGVuZGVudCBvbiBhcHBlYXJcblxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogdHJ1ZVxuICAgICAgfSxcbiAgICAgIGhhbmRsZUV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgICAgZmlyc3RSZW5kZXI6IHRydWVcbiAgICB9O1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBUcmFuc2l0aW9uR3JvdXAucHJvdG90eXBlO1xuXG4gIF9wcm90by5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBjb250ZXh0VmFsdWU6IHtcbiAgICAgICAgaXNNb3VudGluZzogZmFsc2VcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLm1vdW50ZWQgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2l0aW9uR3JvdXAuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gZnVuY3Rpb24gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgX3JlZikge1xuICAgIHZhciBwcmV2Q2hpbGRNYXBwaW5nID0gX3JlZi5jaGlsZHJlbixcbiAgICAgICAgaGFuZGxlRXhpdGVkID0gX3JlZi5oYW5kbGVFeGl0ZWQsXG4gICAgICAgIGZpcnN0UmVuZGVyID0gX3JlZi5maXJzdFJlbmRlcjtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IGZpcnN0UmVuZGVyID8gZ2V0SW5pdGlhbENoaWxkTWFwcGluZyhuZXh0UHJvcHMsIGhhbmRsZUV4aXRlZCkgOiBnZXROZXh0Q2hpbGRNYXBwaW5nKG5leHRQcm9wcywgcHJldkNoaWxkTWFwcGluZywgaGFuZGxlRXhpdGVkKSxcbiAgICAgIGZpcnN0UmVuZGVyOiBmYWxzZVxuICAgIH07XG4gIH0gLy8gbm9kZSBpcyBgdW5kZWZpbmVkYCB3aGVuIHVzZXIgcHJvdmlkZWQgYG5vZGVSZWZgIHByb3BcbiAgO1xuXG4gIF9wcm90by5oYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoY2hpbGQsIG5vZGUpIHtcbiAgICB2YXIgY3VycmVudENoaWxkTWFwcGluZyA9IGdldENoaWxkTWFwcGluZyh0aGlzLnByb3BzLmNoaWxkcmVuKTtcbiAgICBpZiAoY2hpbGQua2V5IGluIGN1cnJlbnRDaGlsZE1hcHBpbmcpIHJldHVybjtcblxuICAgIGlmIChjaGlsZC5wcm9wcy5vbkV4aXRlZCkge1xuICAgICAgY2hpbGQucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRTdGF0ZShmdW5jdGlvbiAoc3RhdGUpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gX2V4dGVuZHMoe30sIHN0YXRlLmNoaWxkcmVuKTtcblxuICAgICAgICBkZWxldGUgY2hpbGRyZW5bY2hpbGQua2V5XTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW5cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIENvbXBvbmVudCA9IF90aGlzJHByb3BzLmNvbXBvbmVudCxcbiAgICAgICAgY2hpbGRGYWN0b3J5ID0gX3RoaXMkcHJvcHMuY2hpbGRGYWN0b3J5LFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjb21wb25lbnRcIiwgXCJjaGlsZEZhY3RvcnlcIl0pO1xuXG4gICAgdmFyIGNvbnRleHRWYWx1ZSA9IHRoaXMuc3RhdGUuY29udGV4dFZhbHVlO1xuICAgIHZhciBjaGlsZHJlbiA9IHZhbHVlcyh0aGlzLnN0YXRlLmNoaWxkcmVuKS5tYXAoY2hpbGRGYWN0b3J5KTtcbiAgICBkZWxldGUgcHJvcHMuYXBwZWFyO1xuICAgIGRlbGV0ZSBwcm9wcy5lbnRlcjtcbiAgICBkZWxldGUgcHJvcHMuZXhpdDtcblxuICAgIGlmIChDb21wb25lbnQgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBjb250ZXh0VmFsdWVcbiAgICAgIH0sIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkdyb3VwQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMsIGNoaWxkcmVuKSk7XG4gIH07XG5cbiAgcmV0dXJuIFRyYW5zaXRpb25Hcm91cDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuVHJhbnNpdGlvbkdyb3VwLnByb3BUeXBlcyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHtcbiAgLyoqXG4gICAqIGA8VHJhbnNpdGlvbkdyb3VwPmAgcmVuZGVycyBhIGA8ZGl2PmAgYnkgZGVmYXVsdC4gWW91IGNhbiBjaGFuZ2UgdGhpc1xuICAgKiBiZWhhdmlvciBieSBwcm92aWRpbmcgYSBgY29tcG9uZW50YCBwcm9wLlxuICAgKiBJZiB5b3UgdXNlIFJlYWN0IHYxNisgYW5kIHdvdWxkIGxpa2UgdG8gYXZvaWQgYSB3cmFwcGluZyBgPGRpdj5gIGVsZW1lbnRcbiAgICogeW91IGNhbiBwYXNzIGluIGBjb21wb25lbnQ9e251bGx9YC4gVGhpcyBpcyB1c2VmdWwgaWYgdGhlIHdyYXBwaW5nIGRpdlxuICAgKiBib3JrcyB5b3VyIGNzcyBzdHlsZXMuXG4gICAqL1xuICBjb21wb25lbnQ6IFByb3BUeXBlcy5hbnksXG5cbiAgLyoqXG4gICAqIEEgc2V0IG9mIGA8VHJhbnNpdGlvbj5gIGNvbXBvbmVudHMsIHRoYXQgYXJlIHRvZ2dsZWQgYGluYCBhbmQgb3V0IGFzIHRoZXlcbiAgICogbGVhdmUuIHRoZSBgPFRyYW5zaXRpb25Hcm91cD5gIHdpbGwgaW5qZWN0IHNwZWNpZmljIHRyYW5zaXRpb24gcHJvcHMsIHNvXG4gICAqIHJlbWVtYmVyIHRvIHNwcmVhZCB0aGVtIHRocm91Z2ggaWYgeW91IGFyZSB3cmFwcGluZyB0aGUgYDxUcmFuc2l0aW9uPmAgYXNcbiAgICogd2l0aCBvdXIgYDxGYWRlPmAgZXhhbXBsZS5cbiAgICpcbiAgICogV2hpbGUgdGhpcyBjb21wb25lbnQgaXMgbWVhbnQgZm9yIG11bHRpcGxlIGBUcmFuc2l0aW9uYCBvciBgQ1NTVHJhbnNpdGlvbmBcbiAgICogY2hpbGRyZW4sIHNvbWV0aW1lcyB5b3UgbWF5IHdhbnQgdG8gaGF2ZSBhIHNpbmdsZSB0cmFuc2l0aW9uIGNoaWxkIHdpdGhcbiAgICogY29udGVudCB0aGF0IHlvdSB3YW50IHRvIGJlIHRyYW5zaXRpb25lZCBvdXQgYW5kIGluIHdoZW4geW91IGNoYW5nZSBpdFxuICAgKiAoZS5nLiByb3V0ZXMsIGltYWdlcyBldGMuKSBJbiB0aGF0IGNhc2UgeW91IGNhbiBjaGFuZ2UgdGhlIGBrZXlgIHByb3Agb2ZcbiAgICogdGhlIHRyYW5zaXRpb24gY2hpbGQgYXMgeW91IGNoYW5nZSBpdHMgY29udGVudCwgdGhpcyB3aWxsIGNhdXNlXG4gICAqIGBUcmFuc2l0aW9uR3JvdXBgIHRvIHRyYW5zaXRpb24gdGhlIGNoaWxkIG91dCBhbmQgYmFjayBpbi5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBhcHBlYXIgYW5pbWF0aW9uc1xuICAgKiBmb3IgYWxsIGNoaWxkcmVuLiBOb3RlIHRoYXQgc3BlY2lmeWluZyB0aGlzIHdpbGwgb3ZlcnJpZGUgYW55IGRlZmF1bHRzIHNldFxuICAgKiBvbiBpbmRpdmlkdWFsIGNoaWxkcmVuIFRyYW5zaXRpb25zLlxuICAgKi9cbiAgYXBwZWFyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQSBjb252ZW5pZW5jZSBwcm9wIHRoYXQgZW5hYmxlcyBvciBkaXNhYmxlcyBlbnRlciBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEEgY29udmVuaWVuY2UgcHJvcCB0aGF0IGVuYWJsZXMgb3IgZGlzYWJsZXMgZXhpdCBhbmltYXRpb25zXG4gICAqIGZvciBhbGwgY2hpbGRyZW4uIE5vdGUgdGhhdCBzcGVjaWZ5aW5nIHRoaXMgd2lsbCBvdmVycmlkZSBhbnkgZGVmYXVsdHMgc2V0XG4gICAqIG9uIGluZGl2aWR1YWwgY2hpbGRyZW4gVHJhbnNpdGlvbnMuXG4gICAqL1xuICBleGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogWW91IG1heSBuZWVkIHRvIGFwcGx5IHJlYWN0aXZlIHVwZGF0ZXMgdG8gYSBjaGlsZCBhcyBpdCBpcyBleGl0aW5nLlxuICAgKiBUaGlzIGlzIGdlbmVyYWxseSBkb25lIGJ5IHVzaW5nIGBjbG9uZUVsZW1lbnRgIGhvd2V2ZXIgaW4gdGhlIGNhc2Ugb2YgYW4gZXhpdGluZ1xuICAgKiBjaGlsZCB0aGUgZWxlbWVudCBoYXMgYWxyZWFkeSBiZWVuIHJlbW92ZWQgYW5kIG5vdCBhY2Nlc3NpYmxlIHRvIHRoZSBjb25zdW1lci5cbiAgICpcbiAgICogSWYgeW91IGRvIG5lZWQgdG8gdXBkYXRlIGEgY2hpbGQgYXMgaXQgbGVhdmVzIHlvdSBjYW4gcHJvdmlkZSBhIGBjaGlsZEZhY3RvcnlgXG4gICAqIHRvIHdyYXAgZXZlcnkgY2hpbGQsIGV2ZW4gdGhlIG9uZXMgdGhhdCBhcmUgbGVhdmluZy5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24oY2hpbGQ6IFJlYWN0RWxlbWVudCkgLT4gUmVhY3RFbGVtZW50XG4gICAqL1xuICBjaGlsZEZhY3Rvcnk6IFByb3BUeXBlcy5mdW5jXG59IDoge307XG5UcmFuc2l0aW9uR3JvdXAuZGVmYXVsdFByb3BzID0gZGVmYXVsdFByb3BzO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNpdGlvbkdyb3VwOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikge1xuICBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7XG4gICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGY7XG59IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUVmZmVjdCA6IFJlYWN0LnVzZUxheW91dEVmZmVjdDtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBSaXBwbGUocHJvcHMpIHtcbiAgdmFyIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgX3Byb3BzJHB1bHNhdGUgPSBwcm9wcy5wdWxzYXRlLFxuICAgICAgcHVsc2F0ZSA9IF9wcm9wcyRwdWxzYXRlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRwdWxzYXRlLFxuICAgICAgcmlwcGxlWCA9IHByb3BzLnJpcHBsZVgsXG4gICAgICByaXBwbGVZID0gcHJvcHMucmlwcGxlWSxcbiAgICAgIHJpcHBsZVNpemUgPSBwcm9wcy5yaXBwbGVTaXplLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBfcHJvcHMkb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGVkID0gX3Byb3BzJG9uRXhpdGVkID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9wcm9wcyRvbkV4aXRlZCxcbiAgICAgIHRpbWVvdXQgPSBwcm9wcy50aW1lb3V0O1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShmYWxzZSksXG4gICAgICBsZWF2aW5nID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TGVhdmluZyA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgcmlwcGxlQ2xhc3NOYW1lID0gY2xzeChjbGFzc2VzLnJpcHBsZSwgY2xhc3Nlcy5yaXBwbGVWaXNpYmxlLCBwdWxzYXRlICYmIGNsYXNzZXMucmlwcGxlUHVsc2F0ZSk7XG4gIHZhciByaXBwbGVTdHlsZXMgPSB7XG4gICAgd2lkdGg6IHJpcHBsZVNpemUsXG4gICAgaGVpZ2h0OiByaXBwbGVTaXplLFxuICAgIHRvcDogLShyaXBwbGVTaXplIC8gMikgKyByaXBwbGVZLFxuICAgIGxlZnQ6IC0ocmlwcGxlU2l6ZSAvIDIpICsgcmlwcGxlWFxuICB9O1xuICB2YXIgY2hpbGRDbGFzc05hbWUgPSBjbHN4KGNsYXNzZXMuY2hpbGQsIGxlYXZpbmcgJiYgY2xhc3Nlcy5jaGlsZExlYXZpbmcsIHB1bHNhdGUgJiYgY2xhc3Nlcy5jaGlsZFB1bHNhdGUpO1xuICB2YXIgaGFuZGxlRXhpdGVkID0gdXNlRXZlbnRDYWxsYmFjayhvbkV4aXRlZCk7IC8vIFJpcHBsZSBpcyB1c2VkIGZvciB1c2VyIGZlZWRiYWNrIChlLmcuIGNsaWNrIG9yIHByZXNzKSBzbyB3ZSB3YW50IHRvIGFwcGx5IHN0eWxlcyB3aXRoIHRoZSBoaWdoZXN0IHByaW9yaXR5XG5cbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghaW5Qcm9wKSB7XG4gICAgICAvLyByZWFjdC10cmFuc2l0aW9uLWdyb3VwI29uRXhpdFxuICAgICAgc2V0TGVhdmluZyh0cnVlKTsgLy8gcmVhY3QtdHJhbnNpdGlvbi1ncm91cCNvbkV4aXRlZFxuXG4gICAgICB2YXIgdGltZW91dElkID0gc2V0VGltZW91dChoYW5kbGVFeGl0ZWQsIHRpbWVvdXQpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJZCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH0sIFtoYW5kbGVFeGl0ZWQsIGluUHJvcCwgdGltZW91dF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIsIHtcbiAgICBjbGFzc05hbWU6IHJpcHBsZUNsYXNzTmFtZSxcbiAgICBzdHlsZTogcmlwcGxlU3R5bGVzXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjaGlsZENsYXNzTmFtZVxuICB9KSk7XG59XG5cbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFJpcHBsZS5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogQGlnbm9yZSAtIGluamVjdGVkIGZyb20gVHJhbnNpdGlvbkdyb3VwXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmUgLSBpbmplY3RlZCBmcm9tIFRyYW5zaXRpb25Hcm91cFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgcHVsc2F0ZXMsIHR5cGljYWxseSBpbmRpY2F0aW5nIHRoZSBrZXlib2FyZCBmb2N1cyBzdGF0ZSBvZiBhbiBlbGVtZW50LlxuICAgKi9cbiAgcHVsc2F0ZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpYW1ldGVyIG9mIHRoZSByaXBwbGUuXG4gICAqL1xuICByaXBwbGVTaXplOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBIb3Jpem9udGFsIHBvc2l0aW9uIG9mIHRoZSByaXBwbGUgY2VudGVyLlxuICAgKi9cbiAgcmlwcGxlWDogUHJvcFR5cGVzLm51bWJlcixcblxuICAvKipcbiAgICogVmVydGljYWwgcG9zaXRpb24gb2YgdGhlIHJpcHBsZSBjZW50ZXIuXG4gICAqL1xuICByaXBwbGVZOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBleGl0IGRlbGF5XG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMubnVtYmVyLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBSaXBwbGU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3RvQ29uc3VtYWJsZUFycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheVwiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uR3JvdXAgfSBmcm9tICdyZWFjdC10cmFuc2l0aW9uLWdyb3VwJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IFJpcHBsZSBmcm9tICcuL1JpcHBsZSc7XG52YXIgRFVSQVRJT04gPSA1NTA7XG5leHBvcnQgdmFyIERFTEFZX1JJUFBMRSA9IDgwO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIG92ZXJmbG93OiAnaGlkZGVuJyxcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgekluZGV4OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnaW5oZXJpdCdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZWAgY2xhc3MuICovXG4gICAgcmlwcGxlOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZVZpc2libGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZVZpc2libGU6IHtcbiAgICAgIG9wYWNpdHk6IDAuMyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpJyxcbiAgICAgIGFuaW1hdGlvbjogXCIkZW50ZXIgXCIuY29uY2F0KERVUkFUSU9OLCBcIm1zIFwiKS5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dClcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYHJpcHBsZVB1bHNhdGVgIGNsYXNzLiAqL1xuICAgIHJpcHBsZVB1bHNhdGU6IHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBcIlwiLmNvbmNhdCh0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5zaG9ydGVyLCBcIm1zXCIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZGAgY2xhc3MuICovXG4gICAgY2hpbGQ6IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJyxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ2N1cnJlbnRDb2xvcidcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGludGVybmFsIGBSaXBwbGVgIGNvbXBvbmVudHMgYGNoaWxkTGVhdmluZ2AgY2xhc3MuICovXG4gICAgY2hpbGRMZWF2aW5nOiB7XG4gICAgICBvcGFjaXR5OiAwLFxuICAgICAgYW5pbWF0aW9uOiBcIiRleGl0IFwiLmNvbmNhdChEVVJBVElPTiwgXCJtcyBcIikuY29uY2F0KHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBpbnRlcm5hbCBgUmlwcGxlYCBjb21wb25lbnRzIGBjaGlsZFB1bHNhdGVgIGNsYXNzLiAqL1xuICAgIGNoaWxkUHVsc2F0ZToge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgYW5pbWF0aW9uOiBcIiRwdWxzYXRlIDI1MDBtcyBcIi5jb25jYXQodGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCwgXCIgMjAwbXMgaW5maW5pdGVcIilcbiAgICB9LFxuICAgICdAa2V5ZnJhbWVzIGVudGVyJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKScsXG4gICAgICAgIG9wYWNpdHk6IDAuMVxuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKScsXG4gICAgICAgIG9wYWNpdHk6IDAuM1xuICAgICAgfVxuICAgIH0sXG4gICAgJ0BrZXlmcmFtZXMgZXhpdCc6IHtcbiAgICAgICcwJSc6IHtcbiAgICAgICAgb3BhY2l0eTogMVxuICAgICAgfSxcbiAgICAgICcxMDAlJzoge1xuICAgICAgICBvcGFjaXR5OiAwXG4gICAgICB9XG4gICAgfSxcbiAgICAnQGtleWZyYW1lcyBwdWxzYXRlJzoge1xuICAgICAgJzAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSdcbiAgICAgIH0sXG4gICAgICAnNTAlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwLjkyKSdcbiAgICAgIH0sXG4gICAgICAnMTAwJSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSknXG4gICAgICB9XG4gICAgfVxuICB9O1xufTtcbi8qKlxuICogQGlnbm9yZSAtIGludGVybmFsIGNvbXBvbmVudC5cbiAqXG4gKiBUT0RPIHY1OiBNYWtlIHByaXZhdGVcbiAqL1xuXG52YXIgVG91Y2hSaXBwbGUgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBUb3VjaFJpcHBsZShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkY2VudGVyID0gcHJvcHMuY2VudGVyLFxuICAgICAgY2VudGVyUHJvcCA9IF9wcm9wcyRjZW50ZXIgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGNlbnRlcixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImNlbnRlclwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIl0pO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUgPSBSZWFjdC51c2VTdGF0ZShbXSksXG4gICAgICByaXBwbGVzID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0UmlwcGxlcyA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICB2YXIgbmV4dEtleSA9IFJlYWN0LnVzZVJlZigwKTtcbiAgdmFyIHJpcHBsZUNhbGxiYWNrID0gUmVhY3QudXNlUmVmKG51bGwpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChyaXBwbGVDYWxsYmFjay5jdXJyZW50KSB7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50KCk7XG4gICAgICByaXBwbGVDYWxsYmFjay5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG4gIH0sIFtyaXBwbGVzXSk7IC8vIFVzZWQgdG8gZmlsdGVyIG91dCBtb3VzZSBlbXVsYXRlZCBldmVudHMgb24gbW9iaWxlLlxuXG4gIHZhciBpZ25vcmluZ01vdXNlRG93biA9IFJlYWN0LnVzZVJlZihmYWxzZSk7IC8vIFdlIHVzZSBhIHRpbWVyIGluIG9yZGVyIHRvIG9ubHkgc2hvdyB0aGUgcmlwcGxlcyBmb3IgdG91Y2ggXCJjbGlja1wiIGxpa2UgZXZlbnRzLlxuICAvLyBXZSBkb24ndCB3YW50IHRvIGRpc3BsYXkgdGhlIHJpcHBsZSBmb3IgdG91Y2ggc2Nyb2xsIGV2ZW50cy5cblxuICB2YXIgc3RhcnRUaW1lciA9IFJlYWN0LnVzZVJlZihudWxsKTsgLy8gVGhpcyBpcyB0aGUgaG9vayBjYWxsZWQgb25jZSB0aGUgcHJldmlvdXMgdGltZW91dCBpcyByZWFkeS5cblxuICB2YXIgc3RhcnRUaW1lckNvbW1pdCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGNvbnRhaW5lciA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHN0YXJ0VGltZXIuY3VycmVudCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICB2YXIgc3RhcnRDb21taXQgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgdmFyIHB1bHNhdGUgPSBwYXJhbXMucHVsc2F0ZSxcbiAgICAgICAgcmlwcGxlWCA9IHBhcmFtcy5yaXBwbGVYLFxuICAgICAgICByaXBwbGVZID0gcGFyYW1zLnJpcHBsZVksXG4gICAgICAgIHJpcHBsZVNpemUgPSBwYXJhbXMucmlwcGxlU2l6ZSxcbiAgICAgICAgY2IgPSBwYXJhbXMuY2I7XG4gICAgc2V0UmlwcGxlcyhmdW5jdGlvbiAob2xkUmlwcGxlcykge1xuICAgICAgcmV0dXJuIFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkob2xkUmlwcGxlcyksIFsvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSaXBwbGUsIHtcbiAgICAgICAga2V5OiBuZXh0S2V5LmN1cnJlbnQsXG4gICAgICAgIGNsYXNzZXM6IGNsYXNzZXMsXG4gICAgICAgIHRpbWVvdXQ6IERVUkFUSU9OLFxuICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplXG4gICAgICB9KV0pO1xuICAgIH0pO1xuICAgIG5leHRLZXkuY3VycmVudCArPSAxO1xuICAgIHJpcHBsZUNhbGxiYWNrLmN1cnJlbnQgPSBjYjtcbiAgfSwgW2NsYXNzZXNdKTtcbiAgdmFyIHN0YXJ0ID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHZhciBldmVudCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIHZhciBjYiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xuICAgIHZhciBfb3B0aW9ucyRwdWxzYXRlID0gb3B0aW9ucy5wdWxzYXRlLFxuICAgICAgICBwdWxzYXRlID0gX29wdGlvbnMkcHVsc2F0ZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRwdWxzYXRlLFxuICAgICAgICBfb3B0aW9ucyRjZW50ZXIgPSBvcHRpb25zLmNlbnRlcixcbiAgICAgICAgY2VudGVyID0gX29wdGlvbnMkY2VudGVyID09PSB2b2lkIDAgPyBjZW50ZXJQcm9wIHx8IG9wdGlvbnMucHVsc2F0ZSA6IF9vcHRpb25zJGNlbnRlcixcbiAgICAgICAgX29wdGlvbnMkZmFrZUVsZW1lbnQgPSBvcHRpb25zLmZha2VFbGVtZW50LFxuICAgICAgICBmYWtlRWxlbWVudCA9IF9vcHRpb25zJGZha2VFbGVtZW50ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGZha2VFbGVtZW50O1xuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdtb3VzZWRvd24nICYmIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQpIHtcbiAgICAgIGlnbm9yaW5nTW91c2VEb3duLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBpZ25vcmluZ01vdXNlRG93bi5jdXJyZW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IGZha2VFbGVtZW50ID8gbnVsbCA6IGNvbnRhaW5lci5jdXJyZW50O1xuICAgIHZhciByZWN0ID0gZWxlbWVudCA/IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB0b3A6IDBcbiAgICB9OyAvLyBHZXQgdGhlIHNpemUgb2YgdGhlIHJpcHBsZVxuXG4gICAgdmFyIHJpcHBsZVg7XG4gICAgdmFyIHJpcHBsZVk7XG4gICAgdmFyIHJpcHBsZVNpemU7XG5cbiAgICBpZiAoY2VudGVyIHx8IGV2ZW50LmNsaWVudFggPT09IDAgJiYgZXZlbnQuY2xpZW50WSA9PT0gMCB8fCAhZXZlbnQuY2xpZW50WCAmJiAhZXZlbnQudG91Y2hlcykge1xuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQocmVjdC53aWR0aCAvIDIpO1xuICAgICAgcmlwcGxlWSA9IE1hdGgucm91bmQocmVjdC5oZWlnaHQgLyAyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9yZWYgPSBldmVudC50b3VjaGVzID8gZXZlbnQudG91Y2hlc1swXSA6IGV2ZW50LFxuICAgICAgICAgIGNsaWVudFggPSBfcmVmLmNsaWVudFgsXG4gICAgICAgICAgY2xpZW50WSA9IF9yZWYuY2xpZW50WTtcblxuICAgICAgcmlwcGxlWCA9IE1hdGgucm91bmQoY2xpZW50WCAtIHJlY3QubGVmdCk7XG4gICAgICByaXBwbGVZID0gTWF0aC5yb3VuZChjbGllbnRZIC0gcmVjdC50b3ApO1xuICAgIH1cblxuICAgIGlmIChjZW50ZXIpIHtcbiAgICAgIHJpcHBsZVNpemUgPSBNYXRoLnNxcnQoKDIgKiBNYXRoLnBvdyhyZWN0LndpZHRoLCAyKSArIE1hdGgucG93KHJlY3QuaGVpZ2h0LCAyKSkgLyAzKTsgLy8gRm9yIHNvbWUgcmVhc29uIHRoZSBhbmltYXRpb24gaXMgYnJva2VuIG9uIE1vYmlsZSBDaHJvbWUgaWYgdGhlIHNpemUgaWYgZXZlbi5cblxuICAgICAgaWYgKHJpcHBsZVNpemUgJSAyID09PSAwKSB7XG4gICAgICAgIHJpcHBsZVNpemUgKz0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHNpemVYID0gTWF0aC5tYXgoTWF0aC5hYnMoKGVsZW1lbnQgPyBlbGVtZW50LmNsaWVudFdpZHRoIDogMCkgLSByaXBwbGVYKSwgcmlwcGxlWCkgKiAyICsgMjtcbiAgICAgIHZhciBzaXplWSA9IE1hdGgubWF4KE1hdGguYWJzKChlbGVtZW50ID8gZWxlbWVudC5jbGllbnRIZWlnaHQgOiAwKSAtIHJpcHBsZVkpLCByaXBwbGVZKSAqIDIgKyAyO1xuICAgICAgcmlwcGxlU2l6ZSA9IE1hdGguc3FydChNYXRoLnBvdyhzaXplWCwgMikgKyBNYXRoLnBvdyhzaXplWSwgMikpO1xuICAgIH0gLy8gVG91Y2hlIGRldmljZXNcblxuXG4gICAgaWYgKGV2ZW50LnRvdWNoZXMpIHtcbiAgICAgIC8vIGNoZWNrIHRoYXQgdGhpcyBpc24ndCBhbm90aGVyIHRvdWNoc3RhcnQgZHVlIHRvIG11bHRpdG91Y2hcbiAgICAgIC8vIG90aGVyd2lzZSB3ZSB3aWxsIG9ubHkgY2xlYXIgYSBzaW5nbGUgdGltZXIgd2hlbiB1bm1vdW50aW5nIHdoaWxlIHR3b1xuICAgICAgLy8gYXJlIHJ1bm5pbmdcbiAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgLy8gUHJlcGFyZSB0aGUgcmlwcGxlIGVmZmVjdC5cbiAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHN0YXJ0Q29tbWl0KHtcbiAgICAgICAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICAgICAgcmlwcGxlWTogcmlwcGxlWSxcbiAgICAgICAgICAgIHJpcHBsZVNpemU6IHJpcHBsZVNpemUsXG4gICAgICAgICAgICBjYjogY2JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTsgLy8gRGVsYXkgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgcmlwcGxlIGVmZmVjdC5cblxuXG4gICAgICAgIHN0YXJ0VGltZXIuY3VycmVudCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQpIHtcbiAgICAgICAgICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCgpO1xuICAgICAgICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIERFTEFZX1JJUFBMRSk7IC8vIFdlIGhhdmUgdG8gbWFrZSBhIHRyYWRlb2ZmIHdpdGggdGhpcyB2YWx1ZS5cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3RhcnRDb21taXQoe1xuICAgICAgICBwdWxzYXRlOiBwdWxzYXRlLFxuICAgICAgICByaXBwbGVYOiByaXBwbGVYLFxuICAgICAgICByaXBwbGVZOiByaXBwbGVZLFxuICAgICAgICByaXBwbGVTaXplOiByaXBwbGVTaXplLFxuICAgICAgICBjYjogY2JcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2NlbnRlclByb3AsIHN0YXJ0Q29tbWl0XSk7XG4gIHZhciBwdWxzYXRlID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHN0YXJ0KHt9LCB7XG4gICAgICBwdWxzYXRlOiB0cnVlXG4gICAgfSk7XG4gIH0sIFtzdGFydF0pO1xuICB2YXIgc3RvcCA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uIChldmVudCwgY2IpIHtcbiAgICBjbGVhclRpbWVvdXQoc3RhcnRUaW1lci5jdXJyZW50KTsgLy8gVGhlIHRvdWNoIGludGVyYWN0aW9uIG9jY3VycyB0b28gcXVpY2tseS5cbiAgICAvLyBXZSBzdGlsbCB3YW50IHRvIHNob3cgcmlwcGxlIGVmZmVjdC5cblxuICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCkge1xuICAgICAgZXZlbnQucGVyc2lzdCgpO1xuICAgICAgc3RhcnRUaW1lckNvbW1pdC5jdXJyZW50KCk7XG4gICAgICBzdGFydFRpbWVyQ29tbWl0LmN1cnJlbnQgPSBudWxsO1xuICAgICAgc3RhcnRUaW1lci5jdXJyZW50ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN0b3AoZXZlbnQsIGNiKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0YXJ0VGltZXJDb21taXQuY3VycmVudCA9IG51bGw7XG4gICAgc2V0UmlwcGxlcyhmdW5jdGlvbiAob2xkUmlwcGxlcykge1xuICAgICAgaWYgKG9sZFJpcHBsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gb2xkUmlwcGxlcy5zbGljZSgxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9sZFJpcHBsZXM7XG4gICAgfSk7XG4gICAgcmlwcGxlQ2FsbGJhY2suY3VycmVudCA9IGNiO1xuICB9LCBbXSk7XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHB1bHNhdGU6IHB1bHNhdGUsXG4gICAgICBzdGFydDogc3RhcnQsXG4gICAgICBzdG9wOiBzdG9wXG4gICAgfTtcbiAgfSwgW3B1bHNhdGUsIHN0YXJ0LCBzdG9wXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSksXG4gICAgcmVmOiBjb250YWluZXJcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXAsIHtcbiAgICBjb21wb25lbnQ6IG51bGwsXG4gICAgZXhpdDogdHJ1ZVxuICB9LCByaXBwbGVzKSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFRvdWNoUmlwcGxlLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBzdGFydHMgYXQgdGhlIGNlbnRlciBvZiB0aGUgY29tcG9uZW50XG4gICAqIHJhdGhlciB0aGFuIGF0IHRoZSBwb2ludCBvZiBpbnRlcmFjdGlvbi5cbiAgICovXG4gIGNlbnRlcjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCB3aXRoU3R5bGVzKHN0eWxlcywge1xuICBmbGlwOiBmYWxzZSxcbiAgbmFtZTogJ011aVRvdWNoUmlwcGxlJ1xufSkoIC8qI19fUFVSRV9fKi9SZWFjdC5tZW1vKFRvdWNoUmlwcGxlKSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB7IGVsZW1lbnRUeXBlQWNjZXB0aW5nUmVmLCByZWZUeXBlIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZUV2ZW50Q2FsbGJhY2sgZnJvbSAnLi4vdXRpbHMvdXNlRXZlbnRDYWxsYmFjayc7XG5pbXBvcnQgZGVwcmVjYXRlZFByb3BUeXBlIGZyb20gJy4uL3V0aWxzL2RlcHJlY2F0ZWRQcm9wVHlwZSc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgdXNlSXNGb2N1c1Zpc2libGUgZnJvbSAnLi4vdXRpbHMvdXNlSXNGb2N1c1Zpc2libGUnO1xuaW1wb3J0IFRvdWNoUmlwcGxlIGZyb20gJy4vVG91Y2hSaXBwbGUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICBXZWJraXRUYXBIaWdobGlnaHRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd0cmFuc3BhcmVudCcsXG4gICAgLy8gUmVzZXQgZGVmYXVsdCB2YWx1ZVxuICAgIC8vIFdlIGRpc2FibGUgdGhlIGZvY3VzIHJpbmcgZm9yIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgdXNlcnMuXG4gICAgb3V0bGluZTogMCxcbiAgICBib3JkZXI6IDAsXG4gICAgbWFyZ2luOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgbWFyZ2luIGluIFNhZmFyaVxuICAgIGJvcmRlclJhZGl1czogMCxcbiAgICBwYWRkaW5nOiAwLFxuICAgIC8vIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBGaXJlZm94XG4gICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgdXNlclNlbGVjdDogJ25vbmUnLFxuICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICctbW96LWFwcGVhcmFuY2UnOiAnbm9uZScsXG4gICAgLy8gUmVzZXRcbiAgICAnLXdlYmtpdC1hcHBlYXJhbmNlJzogJ25vbmUnLFxuICAgIC8vIFJlc2V0XG4gICAgdGV4dERlY29yYXRpb246ICdub25lJyxcbiAgICAvLyBTbyB3ZSB0YWtlIHByZWNlZGVudCBvdmVyIHRoZSBzdHlsZSBvZiBhIG5hdGl2ZSA8YSAvPiBlbGVtZW50LlxuICAgIGNvbG9yOiAnaW5oZXJpdCcsXG4gICAgJyY6Oi1tb3otZm9jdXMtaW5uZXInOiB7XG4gICAgICBib3JkZXJTdHlsZTogJ25vbmUnIC8vIFJlbW92ZSBGaXJlZm94IGRvdHRlZCBvdXRsaW5lLlxuXG4gICAgfSxcbiAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJyxcbiAgICAgIC8vIERpc2FibGUgbGluayBpbnRlcmFjdGlvbnNcbiAgICAgIGN1cnNvcjogJ2RlZmF1bHQnXG4gICAgfSxcbiAgICAnQG1lZGlhIHByaW50Jzoge1xuICAgICAgY29sb3JBZGp1c3Q6ICdleGFjdCdcbiAgICB9XG4gIH0sXG5cbiAgLyogUHNldWRvLWNsYXNzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZGlzYWJsZWQ9e3RydWV9YC4gKi9cbiAgZGlzYWJsZWQ6IHt9LFxuXG4gIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYga2V5Ym9hcmQgZm9jdXNlZC4gKi9cbiAgZm9jdXNWaXNpYmxlOiB7fVxufTtcbi8qKlxuICogYEJ1dHRvbkJhc2VgIGNvbnRhaW5zIGFzIGZldyBzdHlsZXMgYXMgcG9zc2libGUuXG4gKiBJdCBhaW1zIHRvIGJlIGEgc2ltcGxlIGJ1aWxkaW5nIGJsb2NrIGZvciBjcmVhdGluZyBhIGJ1dHRvbi5cbiAqIEl0IGNvbnRhaW5zIGEgbG9hZCBvZiBzdHlsZSByZXNldCBhbmQgc29tZSBmb2N1cy9yaXBwbGUgbG9naWMuXG4gKi9cblxudmFyIEJ1dHRvbkJhc2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCdXR0b25CYXNlKHByb3BzLCByZWYpIHtcbiAgdmFyIGFjdGlvbiA9IHByb3BzLmFjdGlvbixcbiAgICAgIGJ1dHRvblJlZlByb3AgPSBwcm9wcy5idXR0b25SZWYsXG4gICAgICBfcHJvcHMkY2VudGVyUmlwcGxlID0gcHJvcHMuY2VudGVyUmlwcGxlLFxuICAgICAgY2VudGVyUmlwcGxlID0gX3Byb3BzJGNlbnRlclJpcHBsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkY2VudGVyUmlwcGxlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9wcm9wcyRjb21wb25lbnQgPT09IHZvaWQgMCA/ICdidXR0b24nIDogX3Byb3BzJGNvbXBvbmVudCxcbiAgICAgIF9wcm9wcyRkaXNhYmxlZCA9IHByb3BzLmRpc2FibGVkLFxuICAgICAgZGlzYWJsZWQgPSBfcHJvcHMkZGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVkLFxuICAgICAgX3Byb3BzJGRpc2FibGVSaXBwbGUgPSBwcm9wcy5kaXNhYmxlUmlwcGxlLFxuICAgICAgZGlzYWJsZVJpcHBsZSA9IF9wcm9wcyRkaXNhYmxlUmlwcGxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUmlwcGxlLFxuICAgICAgX3Byb3BzJGRpc2FibGVUb3VjaFJpID0gcHJvcHMuZGlzYWJsZVRvdWNoUmlwcGxlLFxuICAgICAgZGlzYWJsZVRvdWNoUmlwcGxlID0gX3Byb3BzJGRpc2FibGVUb3VjaFJpID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlVG91Y2hSaSxcbiAgICAgIF9wcm9wcyRmb2N1c1JpcHBsZSA9IHByb3BzLmZvY3VzUmlwcGxlLFxuICAgICAgZm9jdXNSaXBwbGUgPSBfcHJvcHMkZm9jdXNSaXBwbGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGZvY3VzUmlwcGxlLFxuICAgICAgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lID0gcHJvcHMuZm9jdXNWaXNpYmxlQ2xhc3NOYW1lLFxuICAgICAgb25CbHVyID0gcHJvcHMub25CbHVyLFxuICAgICAgb25DbGljayA9IHByb3BzLm9uQ2xpY2ssXG4gICAgICBvbkZvY3VzID0gcHJvcHMub25Gb2N1cyxcbiAgICAgIG9uRm9jdXNWaXNpYmxlID0gcHJvcHMub25Gb2N1c1Zpc2libGUsXG4gICAgICBvbktleURvd24gPSBwcm9wcy5vbktleURvd24sXG4gICAgICBvbktleVVwID0gcHJvcHMub25LZXlVcCxcbiAgICAgIG9uTW91c2VEb3duID0gcHJvcHMub25Nb3VzZURvd24sXG4gICAgICBvbk1vdXNlTGVhdmUgPSBwcm9wcy5vbk1vdXNlTGVhdmUsXG4gICAgICBvbk1vdXNlVXAgPSBwcm9wcy5vbk1vdXNlVXAsXG4gICAgICBvblRvdWNoRW5kID0gcHJvcHMub25Ub3VjaEVuZCxcbiAgICAgIG9uVG91Y2hNb3ZlID0gcHJvcHMub25Ub3VjaE1vdmUsXG4gICAgICBvblRvdWNoU3RhcnQgPSBwcm9wcy5vblRvdWNoU3RhcnQsXG4gICAgICBvbkRyYWdMZWF2ZSA9IHByb3BzLm9uRHJhZ0xlYXZlLFxuICAgICAgX3Byb3BzJHRhYkluZGV4ID0gcHJvcHMudGFiSW5kZXgsXG4gICAgICB0YWJJbmRleCA9IF9wcm9wcyR0YWJJbmRleCA9PT0gdm9pZCAwID8gMCA6IF9wcm9wcyR0YWJJbmRleCxcbiAgICAgIFRvdWNoUmlwcGxlUHJvcHMgPSBwcm9wcy5Ub3VjaFJpcHBsZVByb3BzLFxuICAgICAgX3Byb3BzJHR5cGUgPSBwcm9wcy50eXBlLFxuICAgICAgdHlwZSA9IF9wcm9wcyR0eXBlID09PSB2b2lkIDAgPyAnYnV0dG9uJyA6IF9wcm9wcyR0eXBlLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFjdGlvblwiLCBcImJ1dHRvblJlZlwiLCBcImNlbnRlclJpcHBsZVwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbXBvbmVudFwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZVJpcHBsZVwiLCBcImRpc2FibGVUb3VjaFJpcHBsZVwiLCBcImZvY3VzUmlwcGxlXCIsIFwiZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXCIsIFwib25CbHVyXCIsIFwib25DbGlja1wiLCBcIm9uRm9jdXNcIiwgXCJvbkZvY3VzVmlzaWJsZVwiLCBcIm9uS2V5RG93blwiLCBcIm9uS2V5VXBcIiwgXCJvbk1vdXNlRG93blwiLCBcIm9uTW91c2VMZWF2ZVwiLCBcIm9uTW91c2VVcFwiLCBcIm9uVG91Y2hFbmRcIiwgXCJvblRvdWNoTW92ZVwiLCBcIm9uVG91Y2hTdGFydFwiLCBcIm9uRHJhZ0xlYXZlXCIsIFwidGFiSW5kZXhcIiwgXCJUb3VjaFJpcHBsZVByb3BzXCIsIFwidHlwZVwiXSk7XG5cbiAgdmFyIGJ1dHRvblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcblxuICBmdW5jdGlvbiBnZXRCdXR0b25Ob2RlKCkge1xuICAgIC8vICNTdHJpY3RNb2RlIHJlYWR5XG4gICAgcmV0dXJuIFJlYWN0RE9NLmZpbmRET01Ob2RlKGJ1dHRvblJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIHZhciByaXBwbGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKGZhbHNlKSxcbiAgICAgIGZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZVswXSxcbiAgICAgIHNldEZvY3VzVmlzaWJsZSA9IF9SZWFjdCR1c2VTdGF0ZVsxXTtcblxuICBpZiAoZGlzYWJsZWQgJiYgZm9jdXNWaXNpYmxlKSB7XG4gICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgfVxuXG4gIHZhciBfdXNlSXNGb2N1c1Zpc2libGUgPSB1c2VJc0ZvY3VzVmlzaWJsZSgpLFxuICAgICAgaXNGb2N1c1Zpc2libGUgPSBfdXNlSXNGb2N1c1Zpc2libGUuaXNGb2N1c1Zpc2libGUsXG4gICAgICBvbkJsdXJWaXNpYmxlID0gX3VzZUlzRm9jdXNWaXNpYmxlLm9uQmx1clZpc2libGUsXG4gICAgICBmb2N1c1Zpc2libGVSZWYgPSBfdXNlSXNGb2N1c1Zpc2libGUucmVmO1xuXG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoYWN0aW9uLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvY3VzVmlzaWJsZTogZnVuY3Rpb24gZm9jdXNWaXNpYmxlKCkge1xuICAgICAgICBzZXRGb2N1c1Zpc2libGUodHJ1ZSk7XG4gICAgICAgIGJ1dHRvblJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUgJiYgZm9jdXNSaXBwbGUgJiYgIWRpc2FibGVSaXBwbGUpIHtcbiAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoKTtcbiAgICB9XG4gIH0sIFtkaXNhYmxlUmlwcGxlLCBmb2N1c1JpcHBsZSwgZm9jdXNWaXNpYmxlXSk7XG5cbiAgZnVuY3Rpb24gdXNlUmlwcGxlSGFuZGxlcihyaXBwbGVBY3Rpb24sIGV2ZW50Q2FsbGJhY2spIHtcbiAgICB2YXIgc2tpcFJpcHBsZUFjdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZGlzYWJsZVRvdWNoUmlwcGxlO1xuICAgIHJldHVybiB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGV2ZW50Q2FsbGJhY2spIHtcbiAgICAgICAgZXZlbnRDYWxsYmFjayhldmVudCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpZ25vcmUgPSBza2lwUmlwcGxlQWN0aW9uO1xuXG4gICAgICBpZiAoIWlnbm9yZSAmJiByaXBwbGVSZWYuY3VycmVudCkge1xuICAgICAgICByaXBwbGVSZWYuY3VycmVudFtyaXBwbGVBY3Rpb25dKGV2ZW50KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgaGFuZGxlTW91c2VEb3duID0gdXNlUmlwcGxlSGFuZGxlcignc3RhcnQnLCBvbk1vdXNlRG93bik7XG4gIHZhciBoYW5kbGVEcmFnTGVhdmUgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdG9wJywgb25EcmFnTGVhdmUpO1xuICB2YXIgaGFuZGxlTW91c2VVcCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvbk1vdXNlVXApO1xuICB2YXIgaGFuZGxlTW91c2VMZWF2ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoZm9jdXNWaXNpYmxlKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChvbk1vdXNlTGVhdmUpIHtcbiAgICAgIG9uTW91c2VMZWF2ZShldmVudCk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZVRvdWNoU3RhcnQgPSB1c2VSaXBwbGVIYW5kbGVyKCdzdGFydCcsIG9uVG91Y2hTdGFydCk7XG4gIHZhciBoYW5kbGVUb3VjaEVuZCA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoRW5kKTtcbiAgdmFyIGhhbmRsZVRvdWNoTW92ZSA9IHVzZVJpcHBsZUhhbmRsZXIoJ3N0b3AnLCBvblRvdWNoTW92ZSk7XG4gIHZhciBoYW5kbGVCbHVyID0gdXNlUmlwcGxlSGFuZGxlcignc3RvcCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgIGlmIChmb2N1c1Zpc2libGUpIHtcbiAgICAgIG9uQmx1clZpc2libGUoZXZlbnQpO1xuICAgICAgc2V0Rm9jdXNWaXNpYmxlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBpZiAob25CbHVyKSB7XG4gICAgICBvbkJsdXIoZXZlbnQpO1xuICAgIH1cbiAgfSwgZmFsc2UpO1xuICB2YXIgaGFuZGxlRm9jdXMgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIEZpeCBmb3IgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83NzY5XG4gICAgaWYgKCFidXR0b25SZWYuY3VycmVudCkge1xuICAgICAgYnV0dG9uUmVmLmN1cnJlbnQgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuICAgIH1cblxuICAgIGlmIChpc0ZvY3VzVmlzaWJsZShldmVudCkpIHtcbiAgICAgIHNldEZvY3VzVmlzaWJsZSh0cnVlKTtcblxuICAgICAgaWYgKG9uRm9jdXNWaXNpYmxlKSB7XG4gICAgICAgIG9uRm9jdXNWaXNpYmxlKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob25Gb2N1cykge1xuICAgICAgb25Gb2N1cyhldmVudCk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgaXNOb25OYXRpdmVCdXR0b24gPSBmdW5jdGlvbiBpc05vbk5hdGl2ZUJ1dHRvbigpIHtcbiAgICB2YXIgYnV0dG9uID0gZ2V0QnV0dG9uTm9kZSgpO1xuICAgIHJldHVybiBjb21wb25lbnQgJiYgY29tcG9uZW50ICE9PSAnYnV0dG9uJyAmJiAhKGJ1dHRvbi50YWdOYW1lID09PSAnQScgJiYgYnV0dG9uLmhyZWYpO1xuICB9O1xuICAvKipcbiAgICogSUUgMTEgc2hpbSBmb3IgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0tleWJvYXJkRXZlbnQvcmVwZWF0XG4gICAqL1xuXG5cbiAgdmFyIGtleWRvd25SZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICB2YXIgaGFuZGxlS2V5RG93biA9IHVzZUV2ZW50Q2FsbGJhY2soZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgLy8gQ2hlY2sgaWYga2V5IGlzIGFscmVhZHkgZG93biB0byBhdm9pZCByZXBlYXRzIGJlaW5nIGNvdW50ZWQgYXMgbXVsdGlwbGUgYWN0aXZhdGlvbnNcbiAgICBpZiAoZm9jdXNSaXBwbGUgJiYgIWtleWRvd25SZWYuY3VycmVudCAmJiBmb2N1c1Zpc2libGUgJiYgcmlwcGxlUmVmLmN1cnJlbnQgJiYgZXZlbnQua2V5ID09PSAnICcpIHtcbiAgICAgIGtleWRvd25SZWYuY3VycmVudCA9IHRydWU7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnN0YXJ0KGV2ZW50KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICcgJykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAob25LZXlEb3duKSB7XG4gICAgICBvbktleURvd24oZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChldmVudC50YXJnZXQgPT09IGV2ZW50LmN1cnJlbnRUYXJnZXQgJiYgaXNOb25OYXRpdmVCdXR0b24oKSAmJiBldmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWRpc2FibGVkKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICBpZiAob25DbGljaykge1xuICAgICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlS2V5VXAgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGNhbGxpbmcgcHJldmVudERlZmF1bHQgaW4ga2V5VXAgb24gYSA8YnV0dG9uPiB3aWxsIG5vdCBkaXNwYXRjaCBhIGNsaWNrIGV2ZW50IGlmIFNwYWNlIGlzIHByZXNzZWRcbiAgICAvLyBodHRwczovL2NvZGVzYW5kYm94LmlvL3MvYnV0dG9uLWtleXVwLXByZXZlbnRkZWZhdWx0LWRuN2YwXG4gICAgaWYgKGZvY3VzUmlwcGxlICYmIGV2ZW50LmtleSA9PT0gJyAnICYmIHJpcHBsZVJlZi5jdXJyZW50ICYmIGZvY3VzVmlzaWJsZSAmJiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAga2V5ZG93blJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgICBldmVudC5wZXJzaXN0KCk7XG4gICAgICByaXBwbGVSZWYuY3VycmVudC5zdG9wKGV2ZW50LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJpcHBsZVJlZi5jdXJyZW50LnB1bHNhdGUoZXZlbnQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG9uS2V5VXApIHtcbiAgICAgIG9uS2V5VXAoZXZlbnQpO1xuICAgIH0gLy8gS2V5Ym9hcmQgYWNjZXNzaWJpbGl0eSBmb3Igbm9uIGludGVyYWN0aXZlIGVsZW1lbnRzXG5cblxuICAgIGlmIChvbkNsaWNrICYmIGV2ZW50LnRhcmdldCA9PT0gZXZlbnQuY3VycmVudFRhcmdldCAmJiBpc05vbk5hdGl2ZUJ1dHRvbigpICYmIGV2ZW50LmtleSA9PT0gJyAnICYmICFldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICBvbkNsaWNrKGV2ZW50KTtcbiAgICB9XG4gIH0pO1xuICB2YXIgQ29tcG9uZW50UHJvcCA9IGNvbXBvbmVudDtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicgJiYgb3RoZXIuaHJlZikge1xuICAgIENvbXBvbmVudFByb3AgPSAnYSc7XG4gIH1cblxuICB2YXIgYnV0dG9uUHJvcHMgPSB7fTtcblxuICBpZiAoQ29tcG9uZW50UHJvcCA9PT0gJ2J1dHRvbicpIHtcbiAgICBidXR0b25Qcm9wcy50eXBlID0gdHlwZTtcbiAgICBidXR0b25Qcm9wcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9IGVsc2Uge1xuICAgIGlmIChDb21wb25lbnRQcm9wICE9PSAnYScgfHwgIW90aGVyLmhyZWYpIHtcbiAgICAgIGJ1dHRvblByb3BzLnJvbGUgPSAnYnV0dG9uJztcbiAgICB9XG5cbiAgICBidXR0b25Qcm9wc1snYXJpYS1kaXNhYmxlZCddID0gZGlzYWJsZWQ7XG4gIH1cblxuICB2YXIgaGFuZGxlVXNlclJlZiA9IHVzZUZvcmtSZWYoYnV0dG9uUmVmUHJvcCwgcmVmKTtcbiAgdmFyIGhhbmRsZU93blJlZiA9IHVzZUZvcmtSZWYoZm9jdXNWaXNpYmxlUmVmLCBidXR0b25SZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVVc2VyUmVmLCBoYW5kbGVPd25SZWYpO1xuXG4gIHZhciBfUmVhY3QkdXNlU3RhdGUyID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpLFxuICAgICAgbW91bnRlZFN0YXRlID0gX1JlYWN0JHVzZVN0YXRlMlswXSxcbiAgICAgIHNldE1vdW50ZWRTdGF0ZSA9IF9SZWFjdCR1c2VTdGF0ZTJbMV07XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBzZXRNb3VudGVkU3RhdGUodHJ1ZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGVuYWJsZVRvdWNoUmlwcGxlID0gbW91bnRlZFN0YXRlICYmICFkaXNhYmxlUmlwcGxlICYmICFkaXNhYmxlZDtcblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZW5hYmxlVG91Y2hSaXBwbGUgJiYgIXJpcHBsZVJlZi5jdXJyZW50KSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogVGhlIGBjb21wb25lbnRgIHByb3AgcHJvdmlkZWQgdG8gQnV0dG9uQmFzZSBpcyBpbnZhbGlkLicsICdQbGVhc2UgbWFrZSBzdXJlIHRoZSBjaGlsZHJlbiBwcm9wIGlzIHJlbmRlcmVkIGluIHRoaXMgY3VzdG9tIGNvbXBvbmVudC4nXS5qb2luKCdcXG4nKSk7XG4gICAgICB9XG4gICAgfSwgW2VuYWJsZVRvdWNoUmlwcGxlXSk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50UHJvcCwgX2V4dGVuZHMoe1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgZm9jdXNWaXNpYmxlICYmIFtjbGFzc2VzLmZvY3VzVmlzaWJsZSwgZm9jdXNWaXNpYmxlQ2xhc3NOYW1lXSwgZGlzYWJsZWQgJiYgY2xhc3Nlcy5kaXNhYmxlZCksXG4gICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgIG9uQ2xpY2s6IG9uQ2xpY2ssXG4gICAgb25Gb2N1czogaGFuZGxlRm9jdXMsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIG9uS2V5VXA6IGhhbmRsZUtleVVwLFxuICAgIG9uTW91c2VEb3duOiBoYW5kbGVNb3VzZURvd24sXG4gICAgb25Nb3VzZUxlYXZlOiBoYW5kbGVNb3VzZUxlYXZlLFxuICAgIG9uTW91c2VVcDogaGFuZGxlTW91c2VVcCxcbiAgICBvbkRyYWdMZWF2ZTogaGFuZGxlRHJhZ0xlYXZlLFxuICAgIG9uVG91Y2hFbmQ6IGhhbmRsZVRvdWNoRW5kLFxuICAgIG9uVG91Y2hNb3ZlOiBoYW5kbGVUb3VjaE1vdmUsXG4gICAgb25Ub3VjaFN0YXJ0OiBoYW5kbGVUb3VjaFN0YXJ0LFxuICAgIHJlZjogaGFuZGxlUmVmLFxuICAgIHRhYkluZGV4OiBkaXNhYmxlZCA/IC0xIDogdGFiSW5kZXhcbiAgfSwgYnV0dG9uUHJvcHMsIG90aGVyKSwgY2hpbGRyZW4sIGVuYWJsZVRvdWNoUmlwcGxlID9cbiAgLyojX19QVVJFX18qL1xuXG4gIC8qIFRvdWNoUmlwcGxlIGlzIG9ubHkgbmVlZGVkIGNsaWVudC1zaWRlLCB4MiBib29zdCBvbiB0aGUgc2VydmVyLiAqL1xuICBSZWFjdC5jcmVhdGVFbGVtZW50KFRvdWNoUmlwcGxlLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiByaXBwbGVSZWYsXG4gICAgY2VudGVyOiBjZW50ZXJSaXBwbGVcbiAgfSwgVG91Y2hSaXBwbGVQcm9wcykpIDogbnVsbCk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IEJ1dHRvbkJhc2UucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogQSByZWYgZm9yIGltcGVyYXRpdmUgYWN0aW9ucy5cbiAgICogSXQgY3VycmVudGx5IG9ubHkgc3VwcG9ydHMgYGZvY3VzVmlzaWJsZSgpYCBhY3Rpb24uXG4gICAqL1xuICBhY3Rpb246IHJlZlR5cGUsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICpcbiAgICogVXNlIHRoYXQgcHJvcCB0byBwYXNzIGEgcmVmIHRvIHRoZSBuYXRpdmUgYnV0dG9uIGNvbXBvbmVudC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIGByZWZgIGluc3RlYWQuXG4gICAqL1xuICBidXR0b25SZWY6IGRlcHJlY2F0ZWRQcm9wVHlwZShyZWZUeXBlLCAnVXNlIGByZWZgIGluc3RlYWQuJyksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZXMgd2lsbCBiZSBjZW50ZXJlZC5cbiAgICogVGhleSB3b24ndCBzdGFydCBhdCB0aGUgY3Vyc29yIGludGVyYWN0aW9uIHBvc2l0aW9uLlxuICAgKi9cbiAgY2VudGVyUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb21wb25lbnQgdXNlZCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAgICogRWl0aGVyIGEgc3RyaW5nIHRvIHVzZSBhIEhUTUwgZWxlbWVudCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudDogZWxlbWVudFR5cGVBY2NlcHRpbmdSZWYsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICpcbiAgICog4pqg77iPIFdpdGhvdXQgYSByaXBwbGUgdGhlcmUgaXMgbm8gc3R5bGluZyBmb3IgOmZvY3VzLXZpc2libGUgYnkgZGVmYXVsdC4gQmUgc3VyZVxuICAgKiB0byBoaWdobGlnaHQgdGhlIGVsZW1lbnQgYnkgYXBwbHlpbmcgc2VwYXJhdGUgc3R5bGVzIHdpdGggdGhlIGBmb2N1c1Zpc2libGVDbGFzc05hbWVgLlxuICAgKi9cbiAgZGlzYWJsZVJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRvdWNoIHJpcHBsZSBlZmZlY3Qgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICovXG4gIGRpc2FibGVUb3VjaFJpcHBsZTogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhc2UgYnV0dG9uIHdpbGwgaGF2ZSBhIGtleWJvYXJkIGZvY3VzIHJpcHBsZS5cbiAgICovXG4gIGZvY3VzUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhpcyBwcm9wIGNhbiBoZWxwIGlkZW50aWZ5IHdoaWNoIGVsZW1lbnQgaGFzIGtleWJvYXJkIGZvY3VzLlxuICAgKiBUaGUgY2xhc3MgbmFtZSB3aWxsIGJlIGFwcGxpZWQgd2hlbiB0aGUgZWxlbWVudCBnYWlucyB0aGUgZm9jdXMgdGhyb3VnaCBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICogSXQncyBhIHBvbHlmaWxsIGZvciB0aGUgW0NTUyA6Zm9jdXMtdmlzaWJsZSBzZWxlY3Rvcl0oaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL3NlbGVjdG9ycy00LyN0aGUtZm9jdXMtdmlzaWJsZS1wc2V1ZG8pLlxuICAgKiBUaGUgcmF0aW9uYWxlIGZvciB1c2luZyB0aGlzIGZlYXR1cmUgW2lzIGV4cGxhaW5lZCBoZXJlXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlL2Jsb2IvbWFzdGVyL2V4cGxhaW5lci5tZCkuXG4gICAqIEEgW3BvbHlmaWxsIGNhbiBiZSB1c2VkXShodHRwczovL2dpdGh1Yi5jb20vV0lDRy9mb2N1cy12aXNpYmxlKSB0byBhcHBseSBhIGBmb2N1cy12aXNpYmxlYCBjbGFzcyB0byBvdGhlciBjb21wb25lbnRzXG4gICAqIGlmIG5lZWRlZC5cbiAgICovXG4gIGZvY3VzVmlzaWJsZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgaHJlZjogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25CbHVyOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRHJhZ0xlYXZlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25Gb2N1czogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCBpcyBmb2N1c2VkIHdpdGggYSBrZXlib2FyZC5cbiAgICogV2UgdHJpZ2dlciBhIGBvbkZvY3VzYCBjYWxsYmFjayB0b28uXG4gICAqL1xuICBvbkZvY3VzVmlzaWJsZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5RG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uS2V5VXA6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbk1vdXNlRG93bjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VMZWF2ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uTW91c2VVcDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hFbmQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvblRvdWNoTW92ZTogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uVG91Y2hTdGFydDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHRhYkluZGV4OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc3RyaW5nXSksXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIGBUb3VjaFJpcHBsZWAgZWxlbWVudC5cbiAgICovXG4gIFRvdWNoUmlwcGxlUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIHR5cGU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vbmVPZihbJ2J1dHRvbicsICdyZXNldCcsICdzdWJtaXQnXSksIFByb3BUeXBlcy5zdHJpbmddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCdXR0b25CYXNlJ1xufSkoQnV0dG9uQmFzZSk7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbHN4IGZyb20gJ2Nsc3gnO1xuaW1wb3J0IHsgY2hhaW5Qcm9wVHlwZXMgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IHdpdGhTdHlsZXMgZnJvbSAnLi4vc3R5bGVzL3dpdGhTdHlsZXMnO1xuaW1wb3J0IHsgYWxwaGEgfSBmcm9tICcuLi9zdHlsZXMvY29sb3JNYW5pcHVsYXRvcic7XG5pbXBvcnQgQnV0dG9uQmFzZSBmcm9tICcuLi9CdXR0b25CYXNlJztcbmltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4uL3V0aWxzL2NhcGl0YWxpemUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSBmdW5jdGlvbiBzdHlsZXModGhlbWUpIHtcbiAgcmV0dXJuIHtcbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50LiAqL1xuICAgIHJvb3Q6IHtcbiAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICBmbGV4OiAnMCAwIGF1dG8nLFxuICAgICAgZm9udFNpemU6IHRoZW1lLnR5cG9ncmFwaHkucHhUb1JlbSgyNCksXG4gICAgICBwYWRkaW5nOiAxMixcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBvdmVyZmxvdzogJ3Zpc2libGUnLFxuICAgICAgLy8gRXhwbGljaXRseSBzZXQgdGhlIGRlZmF1bHQgdmFsdWUgdG8gc29sdmUgYSBidWcgb24gSUUgMTEuXG4gICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLFxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCdiYWNrZ3JvdW5kLWNvbG9yJywge1xuICAgICAgICBkdXJhdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuZHVyYXRpb24uc2hvcnRlc3RcbiAgICAgIH0pLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogYWxwaGEodGhlbWUucGFsZXR0ZS5hY3Rpb24uYWN0aXZlLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnJiRkaXNhYmxlZCc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLFxuICAgICAgICBjb2xvcjogdGhlbWUucGFsZXR0ZS5hY3Rpb24uZGlzYWJsZWRcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgZWRnZT1cInN0YXJ0XCJgLiAqL1xuICAgIGVkZ2VTdGFydDoge1xuICAgICAgbWFyZ2luTGVmdDogLTEyLFxuICAgICAgJyRzaXplU21hbGwmJzoge1xuICAgICAgICBtYXJnaW5MZWZ0OiAtM1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBlZGdlPVwiZW5kXCJgLiAqL1xuICAgIGVkZ2VFbmQ6IHtcbiAgICAgIG1hcmdpblJpZ2h0OiAtMTIsXG4gICAgICAnJHNpemVTbWFsbCYnOiB7XG4gICAgICAgIG1hcmdpblJpZ2h0OiAtM1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cImluaGVyaXRcImAuICovXG4gICAgY29sb3JJbmhlcml0OiB7XG4gICAgICBjb2xvcjogJ2luaGVyaXQnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGNvbG9yPVwicHJpbWFyeVwiYC4gKi9cbiAgICBjb2xvclByaW1hcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnByaW1hcnkubWFpbixcbiAgICAgICcmOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGFscGhhKHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLCB0aGVtZS5wYWxldHRlLmFjdGlvbi5ob3Zlck9wYWNpdHkpLFxuICAgICAgICAvLyBSZXNldCBvbiB0b3VjaCBkZXZpY2VzLCBpdCBkb2Vzbid0IGFkZCBzcGVjaWZpY2l0eVxuICAgICAgICAnQG1lZGlhIChob3Zlcjogbm9uZSknOiB7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5tYWluLFxuICAgICAgJyY6aG92ZXInOiB7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogYWxwaGEodGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbiwgdGhlbWUucGFsZXR0ZS5hY3Rpb24uaG92ZXJPcGFjaXR5KSxcbiAgICAgICAgLy8gUmVzZXQgb24gdG91Y2ggZGV2aWNlcywgaXQgZG9lc24ndCBhZGQgc3BlY2lmaWNpdHlcbiAgICAgICAgJ0BtZWRpYSAoaG92ZXI6IG5vbmUpJzoge1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFBzZXVkby1jbGFzcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGRpc2FibGVkPXt0cnVlfWAuICovXG4gICAgZGlzYWJsZWQ6IHt9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgc2l6ZT1cInNtYWxsXCJgLiAqL1xuICAgIHNpemVTbWFsbDoge1xuICAgICAgcGFkZGluZzogMyxcbiAgICAgIGZvbnRTaXplOiB0aGVtZS50eXBvZ3JhcGh5LnB4VG9SZW0oMTgpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjaGlsZHJlbiBjb250YWluZXIgZWxlbWVudC4gKi9cbiAgICBsYWJlbDoge1xuICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGFsaWduSXRlbXM6ICdpbmhlcml0JyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnaW5oZXJpdCdcbiAgICB9XG4gIH07XG59O1xuLyoqXG4gKiBSZWZlciB0byB0aGUgW0ljb25zXSgvY29tcG9uZW50cy9pY29ucy8pIHNlY3Rpb24gb2YgdGhlIGRvY3VtZW50YXRpb25cbiAqIHJlZ2FyZGluZyB0aGUgYXZhaWxhYmxlIGljb24gb3B0aW9ucy5cbiAqL1xuXG52YXIgSWNvbkJ1dHRvbiA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEljb25CdXR0b24ocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGVkZ2UgPSBwcm9wcy5lZGdlLFxuICAgICAgZWRnZSA9IF9wcm9wcyRlZGdlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRlZGdlLFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGRpc2FibGVkID0gcHJvcHMuZGlzYWJsZWQsXG4gICAgICBkaXNhYmxlZCA9IF9wcm9wcyRkaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZWQsXG4gICAgICBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPSBwcm9wcy5kaXNhYmxlRm9jdXNSaXBwbGUsXG4gICAgICBkaXNhYmxlRm9jdXNSaXBwbGUgPSBfcHJvcHMkZGlzYWJsZUZvY3VzUmkgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVGb2N1c1JpLFxuICAgICAgX3Byb3BzJHNpemUgPSBwcm9wcy5zaXplLFxuICAgICAgc2l6ZSA9IF9wcm9wcyRzaXplID09PSB2b2lkIDAgPyAnbWVkaXVtJyA6IF9wcm9wcyRzaXplLFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImVkZ2VcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzZXNcIiwgXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZUZvY3VzUmlwcGxlXCIsIFwic2l6ZVwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KEJ1dHRvbkJhc2UsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUsIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIGRpc2FibGVkICYmIGNsYXNzZXMuZGlzYWJsZWQsIHNpemUgPT09IFwic21hbGxcIiAmJiBjbGFzc2VzW1wic2l6ZVwiLmNvbmNhdChjYXBpdGFsaXplKHNpemUpKV0sIHtcbiAgICAgICdzdGFydCc6IGNsYXNzZXMuZWRnZVN0YXJ0LFxuICAgICAgJ2VuZCc6IGNsYXNzZXMuZWRnZUVuZFxuICAgIH1bZWRnZV0pLFxuICAgIGNlbnRlclJpcHBsZTogdHJ1ZSxcbiAgICBmb2N1c1JpcHBsZTogIWRpc2FibGVGb2N1c1JpcHBsZSxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInNwYW5cIiwge1xuICAgIGNsYXNzTmFtZTogY2xhc3Nlcy5sYWJlbFxuICB9LCBjaGlsZHJlbikpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBJY29uQnV0dG9uLnByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFRoZSBpY29uIGVsZW1lbnQuXG4gICAqL1xuICBjaGlsZHJlbjogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm5vZGUsIGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHZhciBmb3VuZCA9IFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkocHJvcHMuY2hpbGRyZW4pLnNvbWUoZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSAmJiBjaGlsZC5wcm9wcy5vbkNsaWNrO1xuICAgIH0pO1xuXG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFsnTWF0ZXJpYWwtVUk6IFlvdSBhcmUgcHJvdmlkaW5nIGFuIG9uQ2xpY2sgZXZlbnQgbGlzdGVuZXIgJyArICd0byBhIGNoaWxkIG9mIGEgYnV0dG9uIGVsZW1lbnQuJywgJ0ZpcmVmb3ggd2lsbCBuZXZlciB0cmlnZ2VyIHRoZSBldmVudC4nLCAnWW91IHNob3VsZCBtb3ZlIHRoZSBvbkNsaWNrIGxpc3RlbmVyIHRvIHRoZSBwYXJlbnQgYnV0dG9uIGVsZW1lbnQuJywgJ2h0dHBzOi8vZ2l0aHViLmNvbS9tdWktb3JnL21hdGVyaWFsLXVpL2lzc3Vlcy8xMzk1NyddLmpvaW4oJ1xcbicpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSksXG5cbiAgLyoqXG4gICAqIE92ZXJyaWRlIG9yIGV4dGVuZCB0aGUgc3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudC5cbiAgICogU2VlIFtDU1MgQVBJXSgjY3NzKSBiZWxvdyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgKi9cbiAgY2xhc3NlczogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIFRoZSBjb2xvciBvZiB0aGUgY29tcG9uZW50LiBJdCBzdXBwb3J0cyB0aG9zZSB0aGVtZSBjb2xvcnMgdGhhdCBtYWtlIHNlbnNlIGZvciB0aGlzIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbG9yOiBQcm9wVHlwZXMub25lT2YoWydkZWZhdWx0JywgJ2luaGVyaXQnLCAncHJpbWFyeScsICdzZWNvbmRhcnknXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJ1dHRvbiB3aWxsIGJlIGRpc2FibGVkLlxuICAgKi9cbiAgZGlzYWJsZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSAga2V5Ym9hcmQgZm9jdXMgcmlwcGxlIHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlRm9jdXNSaXBwbGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSByaXBwbGUgZWZmZWN0IHdpbGwgYmUgZGlzYWJsZWQuXG4gICAqL1xuICBkaXNhYmxlUmlwcGxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgZ2l2ZW4sIHVzZXMgYSBuZWdhdGl2ZSBtYXJnaW4gdG8gY291bnRlcmFjdCB0aGUgcGFkZGluZyBvbiBvbmVcbiAgICogc2lkZSAodGhpcyBpcyBvZnRlbiBoZWxwZnVsIGZvciBhbGlnbmluZyB0aGUgbGVmdCBvciByaWdodFxuICAgKiBzaWRlIG9mIHRoZSBpY29uIHdpdGggY29udGVudCBhYm92ZSBvciBiZWxvdywgd2l0aG91dCBydWluaW5nIHRoZSBib3JkZXJcbiAgICogc2l6ZSBhbmQgc2hhcGUpLlxuICAgKi9cbiAgZWRnZTogUHJvcFR5cGVzLm9uZU9mKFsnc3RhcnQnLCAnZW5kJywgZmFsc2VdKSxcblxuICAvKipcbiAgICogVGhlIHNpemUgb2YgdGhlIGJ1dHRvbi5cbiAgICogYHNtYWxsYCBpcyBlcXVpdmFsZW50IHRvIHRoZSBkZW5zZSBidXR0b24gc3R5bGluZy5cbiAgICovXG4gIHNpemU6IFByb3BUeXBlcy5vbmVPZihbJ3NtYWxsJywgJ21lZGl1bSddKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlJY29uQnV0dG9uJ1xufSkoSWNvbkJ1dHRvbik7IiwiaW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9zbGljZWRUb0FycmF5XCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgeyBjaGFpblByb3BUeXBlcyB9IGZyb20gJ0BtYXRlcmlhbC11aS91dGlscyc7XG5pbXBvcnQgd2l0aFN0eWxlcyBmcm9tICcuLi9zdHlsZXMvd2l0aFN0eWxlcyc7XG5pbXBvcnQgY2FwaXRhbGl6ZSBmcm9tICcuLi91dGlscy9jYXBpdGFsaXplJztcbnZhciBSQURJVVNfU1RBTkRBUkQgPSAxMDtcbnZhciBSQURJVVNfRE9UID0gNDtcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7XG4gICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgIGRpc3BsYXk6ICdpbmxpbmUtZmxleCcsXG4gICAgICAvLyBGb3IgY29ycmVjdCBhbGlnbm1lbnQgd2l0aCB0aGUgdGV4dC5cbiAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgZmxleFNocmluazogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYmFkZ2UgYHNwYW5gIGVsZW1lbnQuICovXG4gICAgYmFkZ2U6IHtcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgICAgZmxleFdyYXA6ICd3cmFwJyxcbiAgICAgIGp1c3RpZnlDb250ZW50OiAnY2VudGVyJyxcbiAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gICAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICBmb250RmFtaWx5OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRGYW1pbHksXG4gICAgICBmb250V2VpZ2h0OiB0aGVtZS50eXBvZ3JhcGh5LmZvbnRXZWlnaHRNZWRpdW0sXG4gICAgICBmb250U2l6ZTogdGhlbWUudHlwb2dyYXBoeS5weFRvUmVtKDEyKSxcbiAgICAgIG1pbldpZHRoOiBSQURJVVNfU1RBTkRBUkQgKiAyLFxuICAgICAgbGluZUhlaWdodDogMSxcbiAgICAgIHBhZGRpbmc6ICcwIDZweCcsXG4gICAgICBoZWlnaHQ6IFJBRElVU19TVEFOREFSRCAqIDIsXG4gICAgICBib3JkZXJSYWRpdXM6IFJBRElVU19TVEFOREFSRCxcbiAgICAgIHpJbmRleDogMSxcbiAgICAgIC8vIFJlbmRlciB0aGUgYmFkZ2Ugb24gdG9wIG9mIHBvdGVudGlhbCByaXBwbGVzLlxuICAgICAgdHJhbnNpdGlvbjogdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCB7XG4gICAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VJbk91dCxcbiAgICAgICAgZHVyYXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmR1cmF0aW9uLmVudGVyaW5nU2NyZWVuXG4gICAgICB9KVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBjb2xvcj1cInByaW1hcnlcImAuICovXG4gICAgY29sb3JQcmltYXJ5OiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5tYWluLFxuICAgICAgY29sb3I6IHRoZW1lLnBhbGV0dGUucHJpbWFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJzZWNvbmRhcnlcImAuICovXG4gICAgY29sb3JTZWNvbmRhcnk6IHtcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhlbWUucGFsZXR0ZS5zZWNvbmRhcnkubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLnNlY29uZGFyeS5jb250cmFzdFRleHRcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgY29sb3I9XCJlcnJvclwiYC4gKi9cbiAgICBjb2xvckVycm9yOiB7XG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoZW1lLnBhbGV0dGUuZXJyb3IubWFpbixcbiAgICAgIGNvbG9yOiB0aGVtZS5wYWxldHRlLmVycm9yLmNvbnRyYXN0VGV4dFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGB2YXJpYW50PVwiZG90XCJgLiAqL1xuICAgIGRvdDoge1xuICAgICAgYm9yZGVyUmFkaXVzOiBSQURJVVNfRE9ULFxuICAgICAgaGVpZ2h0OiBSQURJVVNfRE9UICogMixcbiAgICAgIG1pbldpZHRoOiBSQURJVVNfRE9UICogMixcbiAgICAgIHBhZGRpbmc6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICd0b3AnLCAncmlnaHQnIH19IG92ZXJsYXA9XCJyZWN0YW5nbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wUmlnaHRSZWN0YW5nbGU6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgLTUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIC01MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ3RvcCcsICdyaWdodCcgfX0gb3ZlcmxhcD1cInJlY3Rhbmd1bGFyXCJgLiAqL1xuICAgIGFuY2hvck9yaWdpblRvcFJpZ2h0UmVjdGFuZ3VsYXI6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgLTUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIC01MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdyaWdodCcgfX0gb3ZlcmxhcD1cInJlY3RhbmdsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21SaWdodFJlY3RhbmdsZToge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIDUwJSknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAnYm90dG9tJywgJ3JpZ2h0JyB9fSBvdmVybGFwPVwicmVjdGFuZ3VsYXJcImAuICovXG4gICAgYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRSZWN0YW5ndWxhcjoge1xuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICB0cmFuc2Zvcm06ICdzY2FsZSgxKSB0cmFuc2xhdGUoNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIDUwJSknXG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYGFuY2hvck9yaWdpbj17eyAndG9wJywgJ2xlZnQnIH19IG92ZXJsYXA9XCJyZWN0YW5nbGVcImAuICovXG4gICAgYW5jaG9yT3JpZ2luVG9wTGVmdFJlY3RhbmdsZToge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICd0b3AnLCAnbGVmdCcgfX0gb3ZlcmxhcD1cInJlY3Rhbmd1bGFyXCJgLiAqL1xuICAgIGFuY2hvck9yaWdpblRvcExlZnRSZWN0YW5ndWxhcjoge1xuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAnbGVmdCcgfX0gb3ZlcmxhcD1cInJlY3RhbmdsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ2xlOiB7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIDUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdsZWZ0JyB9fSBvdmVybGFwPVwicmVjdGFuZ3VsYXJcImAuICovXG4gICAgYW5jaG9yT3JpZ2luQm90dG9tTGVmdFJlY3Rhbmd1bGFyOiB7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIDUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ3RvcCcsICdyaWdodCcgfX0gb3ZlcmxhcD1cImNpcmNsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Ub3BSaWdodENpcmNsZToge1xuICAgICAgdG9wOiAnMTQlJyxcbiAgICAgIHJpZ2h0OiAnMTQlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSg1MCUsIC01MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzEwMCUgMCUnLFxuICAgICAgJyYkaW52aXNpYmxlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCAtNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICd0b3AnLCAncmlnaHQnIH19IG92ZXJsYXA9XCJjaXJjdWxhclwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Ub3BSaWdodENpcmN1bGFyOiB7XG4gICAgICB0b3A6ICcxNCUnLFxuICAgICAgcmlnaHQ6ICcxNCUnLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgLTUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSg1MCUsIC01MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdyaWdodCcgfX0gb3ZlcmxhcD1cImNpcmNsZVwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21SaWdodENpcmNsZToge1xuICAgICAgYm90dG9tOiAnMTQlJyxcbiAgICAgIHJpZ2h0OiAnMTQlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSg1MCUsIDUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMTAwJSAxMDAlJyxcbiAgICAgICcmJGludmlzaWJsZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKDUwJSwgNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAncmlnaHQnIH19IG92ZXJsYXA9XCJjaXJjdWxhclwiYC4gKi9cbiAgICBhbmNob3JPcmlnaW5Cb3R0b21SaWdodENpcmN1bGFyOiB7XG4gICAgICBib3R0b206ICcxNCUnLFxuICAgICAgcmlnaHQ6ICcxNCUnLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKDUwJSwgNTAlKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcxMDAlIDEwMCUnLFxuICAgICAgJyYkaW52aXNpYmxlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoNTAlLCA1MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ3RvcCcsICdsZWZ0JyB9fSBvdmVybGFwPVwiY2lyY2xlXCJgLiAqL1xuICAgIGFuY2hvck9yaWdpblRvcExlZnRDaXJjbGU6IHtcbiAgICAgIHRvcDogJzE0JScsXG4gICAgICBsZWZ0OiAnMTQlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICB0cmFuc2Zvcm1PcmlnaW46ICcwJSAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCAtNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICd0b3AnLCAnbGVmdCcgfX0gb3ZlcmxhcD1cImNpcmN1bGFyXCJgLiAqL1xuICAgIGFuY2hvck9yaWdpblRvcExlZnRDaXJjdWxhcjoge1xuICAgICAgdG9wOiAnMTQlJyxcbiAgICAgIGxlZnQ6ICcxNCUnLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIC01MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDAlJyxcbiAgICAgICcmJGludmlzaWJsZSc6IHtcbiAgICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMCkgdHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIGBhbmNob3JPcmlnaW49e3sgJ2JvdHRvbScsICdsZWZ0JyB9fSBvdmVybGFwPVwiY2lyY2xlXCJgLiAqL1xuICAgIGFuY2hvck9yaWdpbkJvdHRvbUxlZnRDaXJjbGU6IHtcbiAgICAgIGJvdHRvbTogJzE0JScsXG4gICAgICBsZWZ0OiAnMTQlJyxcbiAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDEpIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJyxcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogJzAlIDEwMCUnLFxuICAgICAgJyYkaW52aXNpYmxlJzoge1xuICAgICAgICB0cmFuc2Zvcm06ICdzY2FsZSgwKSB0cmFuc2xhdGUoLTUwJSwgNTAlKSdcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgYW5jaG9yT3JpZ2luPXt7ICdib3R0b20nLCAnbGVmdCcgfX0gb3ZlcmxhcD1cImNpcmN1bGFyXCJgLiAqL1xuICAgIGFuY2hvck9yaWdpbkJvdHRvbUxlZnRDaXJjdWxhcjoge1xuICAgICAgYm90dG9tOiAnMTQlJyxcbiAgICAgIGxlZnQ6ICcxNCUnLFxuICAgICAgdHJhbnNmb3JtOiAnc2NhbGUoMSkgdHJhbnNsYXRlKC01MCUsIDUwJSknLFxuICAgICAgdHJhbnNmb3JtT3JpZ2luOiAnMCUgMTAwJScsXG4gICAgICAnJiRpbnZpc2libGUnOiB7XG4gICAgICAgIHRyYW5zZm9ybTogJ3NjYWxlKDApIHRyYW5zbGF0ZSgtNTAlLCA1MCUpJ1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiBQc2V1ZG8tY2xhc3MgdG8gdGhlIGJhZGdlIGBzcGFuYCBlbGVtZW50IGlmIGBpbnZpc2libGU9e3RydWV9YC4gKi9cbiAgICBpbnZpc2libGU6IHtcbiAgICAgIHRyYW5zaXRpb246IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgndHJhbnNmb3JtJywge1xuICAgICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5lYXNlSW5PdXQsXG4gICAgICAgIGR1cmF0aW9uOiB0aGVtZS50cmFuc2l0aW9ucy5kdXJhdGlvbi5sZWF2aW5nU2NyZWVuXG4gICAgICB9KVxuICAgIH1cbiAgfTtcbn07XG52YXIgQmFkZ2UgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBCYWRnZShwcm9wcywgcmVmKSB7XG4gIHZhciBfcHJvcHMkYW5jaG9yT3JpZ2luID0gcHJvcHMuYW5jaG9yT3JpZ2luLFxuICAgICAgYW5jaG9yT3JpZ2luID0gX3Byb3BzJGFuY2hvck9yaWdpbiA9PT0gdm9pZCAwID8ge1xuICAgIHZlcnRpY2FsOiAndG9wJyxcbiAgICBob3Jpem9udGFsOiAncmlnaHQnXG4gIH0gOiBfcHJvcHMkYW5jaG9yT3JpZ2luLFxuICAgICAgYmFkZ2VDb250ZW50ID0gcHJvcHMuYmFkZ2VDb250ZW50LFxuICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGNvbG9yID0gcHJvcHMuY29sb3IsXG4gICAgICBjb2xvciA9IF9wcm9wcyRjb2xvciA9PT0gdm9pZCAwID8gJ2RlZmF1bHQnIDogX3Byb3BzJGNvbG9yLFxuICAgICAgX3Byb3BzJGNvbXBvbmVudCA9IHByb3BzLmNvbXBvbmVudCxcbiAgICAgIENvbXBvbmVudFByb3AgPSBfcHJvcHMkY29tcG9uZW50ID09PSB2b2lkIDAgPyAnc3BhbicgOiBfcHJvcHMkY29tcG9uZW50LFxuICAgICAgaW52aXNpYmxlUHJvcCA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIF9wcm9wcyRtYXggPSBwcm9wcy5tYXgsXG4gICAgICBtYXggPSBfcHJvcHMkbWF4ID09PSB2b2lkIDAgPyA5OSA6IF9wcm9wcyRtYXgsXG4gICAgICBfcHJvcHMkb3ZlcmxhcCA9IHByb3BzLm92ZXJsYXAsXG4gICAgICBvdmVybGFwID0gX3Byb3BzJG92ZXJsYXAgPT09IHZvaWQgMCA/ICdyZWN0YW5nbGUnIDogX3Byb3BzJG92ZXJsYXAsXG4gICAgICBfcHJvcHMkc2hvd1plcm8gPSBwcm9wcy5zaG93WmVybyxcbiAgICAgIHNob3daZXJvID0gX3Byb3BzJHNob3daZXJvID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRzaG93WmVybyxcbiAgICAgIF9wcm9wcyR2YXJpYW50ID0gcHJvcHMudmFyaWFudCxcbiAgICAgIHZhcmlhbnQgPSBfcHJvcHMkdmFyaWFudCA9PT0gdm9pZCAwID8gJ3N0YW5kYXJkJyA6IF9wcm9wcyR2YXJpYW50LFxuICAgICAgb3RoZXIgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFtcImFuY2hvck9yaWdpblwiLCBcImJhZGdlQ29udGVudFwiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImNvbG9yXCIsIFwiY29tcG9uZW50XCIsIFwiaW52aXNpYmxlXCIsIFwibWF4XCIsIFwib3ZlcmxhcFwiLCBcInNob3daZXJvXCIsIFwidmFyaWFudFwiXSk7XG5cbiAgdmFyIGludmlzaWJsZSA9IGludmlzaWJsZVByb3A7XG5cbiAgaWYgKGludmlzaWJsZVByb3AgPT0gbnVsbCAmJiAoYmFkZ2VDb250ZW50ID09PSAwICYmICFzaG93WmVybyB8fCBiYWRnZUNvbnRlbnQgPT0gbnVsbCAmJiB2YXJpYW50ICE9PSAnZG90JykpIHtcbiAgICBpbnZpc2libGUgPSB0cnVlO1xuICB9XG5cbiAgdmFyIGRpc3BsYXlWYWx1ZSA9ICcnO1xuXG4gIGlmICh2YXJpYW50ICE9PSAnZG90Jykge1xuICAgIGRpc3BsYXlWYWx1ZSA9IGJhZGdlQ29udGVudCA+IG1heCA/IFwiXCIuY29uY2F0KG1heCwgXCIrXCIpIDogYmFkZ2VDb250ZW50O1xuICB9XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudFByb3AsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc05hbWUpLFxuICAgIHJlZjogcmVmXG4gIH0sIG90aGVyKSwgY2hpbGRyZW4sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMuYmFkZ2UsIGNsYXNzZXNbXCJcIi5jb25jYXQoYW5jaG9yT3JpZ2luLmhvcml6b250YWwpLmNvbmNhdChjYXBpdGFsaXplKGFuY2hvck9yaWdpbi52ZXJ0aWNhbCksIFwifVwiKV0sIGNsYXNzZXNbXCJhbmNob3JPcmlnaW5cIi5jb25jYXQoY2FwaXRhbGl6ZShhbmNob3JPcmlnaW4udmVydGljYWwpKS5jb25jYXQoY2FwaXRhbGl6ZShhbmNob3JPcmlnaW4uaG9yaXpvbnRhbCkpLmNvbmNhdChjYXBpdGFsaXplKG92ZXJsYXApKV0sIGNvbG9yICE9PSAnZGVmYXVsdCcgJiYgY2xhc3Nlc1tcImNvbG9yXCIuY29uY2F0KGNhcGl0YWxpemUoY29sb3IpKV0sIGludmlzaWJsZSAmJiBjbGFzc2VzLmludmlzaWJsZSwgdmFyaWFudCA9PT0gJ2RvdCcgJiYgY2xhc3Nlcy5kb3QpXG4gIH0sIGRpc3BsYXlWYWx1ZSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBCYWRnZS5wcm9wVHlwZXMgPSB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIFdhcm5pbmcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gfCBUaGVzZSBQcm9wVHlwZXMgYXJlIGdlbmVyYXRlZCBmcm9tIHRoZSBUeXBlU2NyaXB0IHR5cGUgZGVmaW5pdGlvbnMgfFxuICAvLyB8ICAgICBUbyB1cGRhdGUgdGhlbSBlZGl0IHRoZSBkLnRzIGZpbGUgYW5kIHJ1biBcInlhcm4gcHJvcHR5cGVzXCIgICAgIHxcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBUaGUgYW5jaG9yIG9mIHRoZSBiYWRnZS5cbiAgICovXG4gIGFuY2hvck9yaWdpbjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBob3Jpem9udGFsOiBQcm9wVHlwZXMub25lT2YoWydsZWZ0JywgJ3JpZ2h0J10pLmlzUmVxdWlyZWQsXG4gICAgdmVydGljYWw6IFByb3BUeXBlcy5vbmVPZihbJ2JvdHRvbScsICd0b3AnXSkuaXNSZXF1aXJlZFxuICB9KSxcblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgcmVuZGVyZWQgd2l0aGluIHRoZSBiYWRnZS5cbiAgICovXG4gIGJhZGdlQ29udGVudDogUHJvcFR5cGVzLm5vZGUsXG5cbiAgLyoqXG4gICAqIFRoZSBiYWRnZSB3aWxsIGJlIGFkZGVkIHJlbGF0aXZlIHRvIHRoaXMgbm9kZS5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBjaGFpblByb3BUeXBlcyhQcm9wVHlwZXMub2JqZWN0LCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICB2YXIgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXM7XG5cbiAgICBpZiAoY2xhc3NlcyA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBbWydhbmNob3JPcmlnaW5Ub3BSaWdodFJlY3RhbmdsZScsICdhbmNob3JPcmlnaW5Ub3BSaWdodFJlY3Rhbmd1bGFyJ10sIFsnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRSZWN0YW5nbGUnLCAnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRSZWN0YW5ndWxhciddLCBbJ2FuY2hvck9yaWdpblRvcExlZnRSZWN0YW5nbGUnLCAnYW5jaG9yT3JpZ2luVG9wTGVmdFJlY3Rhbmd1bGFyJ10sIFsnYW5jaG9yT3JpZ2luQm90dG9tTGVmdFJlY3RhbmdsZScsICdhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ3VsYXInXSwgWydhbmNob3JPcmlnaW5Ub3BSaWdodENpcmNsZScsICdhbmNob3JPcmlnaW5Ub3BSaWdodENpcmN1bGFyJ10sIFsnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRDaXJjbGUnLCAnYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRDaXJjdWxhciddLCBbJ2FuY2hvck9yaWdpblRvcExlZnRDaXJjbGUnLCAnYW5jaG9yT3JpZ2luVG9wTGVmdENpcmN1bGFyJ11dLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBfcmVmMiA9IF9zbGljZWRUb0FycmF5KF9yZWYsIDIpLFxuICAgICAgICAgIGRlcHJlY2F0ZWRDbGFzc0tleSA9IF9yZWYyWzBdLFxuICAgICAgICAgIG5ld0NsYXNzS2V5ID0gX3JlZjJbMV07XG5cbiAgICAgIGlmIChjbGFzc2VzW2RlcHJlY2F0ZWRDbGFzc0tleV0gIT0gbnVsbCAmJiAvLyAyIGNsYXNzbmFtZXM/IG9uZSBmcm9tIHdpdGhTdHlsZXMgdGhlIG90aGVyIG11c3QgYmUgY3VzdG9tXG4gICAgICBjbGFzc2VzW2RlcHJlY2F0ZWRDbGFzc0tleV0uc3BsaXQoJyAnKS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1hdGVyaWFsLVVJOiBUaGUgYFwiLmNvbmNhdChkZXByZWNhdGVkQ2xhc3NLZXksIFwiYCBjbGFzcyB3YXMgZGVwcmVjYXRlZC4gVXNlIGBcIikuY29uY2F0KG5ld0NsYXNzS2V5LCBcImAgaW5zdGVhZC5cIikpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuXG4gIC8qKlxuICAgKiBUaGUgY29sb3Igb2YgdGhlIGNvbXBvbmVudC4gSXQgc3VwcG9ydHMgdGhvc2UgdGhlbWUgY29sb3JzIHRoYXQgbWFrZSBzZW5zZSBmb3IgdGhpcyBjb21wb25lbnQuXG4gICAqL1xuICBjb2xvcjogUHJvcFR5cGVzLm9uZU9mKFsnZGVmYXVsdCcsICdlcnJvcicsICdwcmltYXJ5JywgJ3NlY29uZGFyeSddKSxcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCB1c2VkIGZvciB0aGUgcm9vdCBub2RlLlxuICAgKiBFaXRoZXIgYSBzdHJpbmcgdG8gdXNlIGEgSFRNTCBlbGVtZW50IG9yIGEgY29tcG9uZW50LlxuICAgKi9cbiAgY29tcG9uZW50OiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhZGdlIHdpbGwgYmUgaW52aXNpYmxlLlxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogTWF4IGNvdW50IHRvIHNob3cuXG4gICAqL1xuICBtYXg6IFByb3BUeXBlcy5udW1iZXIsXG5cbiAgLyoqXG4gICAqIFdyYXBwZWQgc2hhcGUgdGhlIGJhZGdlIHNob3VsZCBvdmVybGFwLlxuICAgKi9cbiAgb3ZlcmxhcDogY2hhaW5Qcm9wVHlwZXMoUHJvcFR5cGVzLm9uZU9mKFsnY2lyY2xlJywgJ3JlY3RhbmdsZScsICdjaXJjdWxhcicsICdyZWN0YW5ndWxhciddKSwgZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdmFyIG92ZXJsYXAgPSBwcm9wcy5vdmVybGFwO1xuXG4gICAgaWYgKG92ZXJsYXAgPT09ICdyZWN0YW5nbGUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdGVyaWFsLVVJOiBgb3ZlcmxhcD1cInJlY3RhbmdsZVwiYCB3YXMgZGVwcmVjYXRlZC4gVXNlIGBvdmVybGFwPVwicmVjdGFuZ3VsYXJcImAgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAob3ZlcmxhcCA9PT0gJ2NpcmNsZScpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWF0ZXJpYWwtVUk6IGBvdmVybGFwPVwiY2lyY2xlXCJgIHdhcyBkZXByZWNhdGVkLiBVc2UgYG92ZXJsYXA9XCJjaXJjdWxhclwiYCBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9KSxcblxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciB0aGUgYmFkZ2UgaXMgaGlkZGVuIHdoZW4gYGJhZGdlQ29udGVudGAgaXMgemVyby5cbiAgICovXG4gIHNob3daZXJvOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsnZG90JywgJ3N0YW5kYXJkJ10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aUJhZGdlJ1xufSkoQmFkZ2UpOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAqIGFzIFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgZXhhY3RQcm9wLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGRlcHJlY2F0ZWRQcm9wVHlwZSBmcm9tICcuLi91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUnO1xuaW1wb3J0IHNldFJlZiBmcm9tICcuLi91dGlscy9zZXRSZWYnO1xuaW1wb3J0IHVzZUZvcmtSZWYgZnJvbSAnLi4vdXRpbHMvdXNlRm9ya1JlZic7XG5cbmZ1bmN0aW9uIGdldENvbnRhaW5lcihjb250YWluZXIpIHtcbiAgY29udGFpbmVyID0gdHlwZW9mIGNvbnRhaW5lciA9PT0gJ2Z1bmN0aW9uJyA/IGNvbnRhaW5lcigpIDogY29udGFpbmVyOyAvLyAjU3RyaWN0TW9kZSByZWFkeVxuXG4gIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShjb250YWluZXIpO1xufVxuXG52YXIgdXNlRW5oYW5jZWRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbi8qKlxuICogUG9ydGFscyBwcm92aWRlIGEgZmlyc3QtY2xhc3Mgd2F5IHRvIHJlbmRlciBjaGlsZHJlbiBpbnRvIGEgRE9NIG5vZGVcbiAqIHRoYXQgZXhpc3RzIG91dHNpZGUgdGhlIERPTSBoaWVyYXJjaHkgb2YgdGhlIHBhcmVudCBjb21wb25lbnQuXG4gKi9cblxudmFyIFBvcnRhbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFBvcnRhbChwcm9wcywgcmVmKSB7XG4gIHZhciBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY29udGFpbmVyID0gcHJvcHMuY29udGFpbmVyLFxuICAgICAgX3Byb3BzJGRpc2FibGVQb3J0YWwgPSBwcm9wcy5kaXNhYmxlUG9ydGFsLFxuICAgICAgZGlzYWJsZVBvcnRhbCA9IF9wcm9wcyRkaXNhYmxlUG9ydGFsID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlUG9ydGFsLFxuICAgICAgb25SZW5kZXJlZCA9IHByb3BzLm9uUmVuZGVyZWQ7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKG51bGwpLFxuICAgICAgbW91bnROb2RlID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0TW91bnROb2RlID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKCAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGRyZW4pID8gY2hpbGRyZW4ucmVmIDogbnVsbCwgcmVmKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0TW91bnROb2RlKGdldENvbnRhaW5lcihjb250YWluZXIpIHx8IGRvY3VtZW50LmJvZHkpO1xuICAgIH1cbiAgfSwgW2NvbnRhaW5lciwgZGlzYWJsZVBvcnRhbF0pO1xuICB1c2VFbmhhbmNlZEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG1vdW50Tm9kZSAmJiAhZGlzYWJsZVBvcnRhbCkge1xuICAgICAgc2V0UmVmKHJlZiwgbW91bnROb2RlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNldFJlZihyZWYsIG51bGwpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9LCBbcmVmLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcbiAgdXNlRW5oYW5jZWRFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmIChvblJlbmRlcmVkICYmIChtb3VudE5vZGUgfHwgZGlzYWJsZVBvcnRhbCkpIHtcbiAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICB9XG4gIH0sIFtvblJlbmRlcmVkLCBtb3VudE5vZGUsIGRpc2FibGVQb3J0YWxdKTtcblxuICBpZiAoZGlzYWJsZVBvcnRhbCkge1xuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIHJldHVybiBtb3VudE5vZGUgPyAvKiNfX1BVUkVfXyovUmVhY3RET00uY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBtb3VudE5vZGUpIDogbW91bnROb2RlO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBQb3J0YWwucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNoaWxkcmVuIHRvIHJlbmRlciBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogQSBIVE1MIGVsZW1lbnQsIGNvbXBvbmVudCBpbnN0YW5jZSwgb3IgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGVpdGhlci5cbiAgICogVGhlIGBjb250YWluZXJgIHdpbGwgaGF2ZSB0aGUgcG9ydGFsIGNoaWxkcmVuIGFwcGVuZGVkIHRvIGl0LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpdCB1c2VzIHRoZSBib2R5IG9mIHRoZSB0b3AtbGV2ZWwgZG9jdW1lbnQgb2JqZWN0LFxuICAgKiBzbyBpdCdzIHNpbXBseSBgZG9jdW1lbnQuYm9keWAgbW9zdCBvZiB0aGUgdGltZS5cbiAgICovXG4gIGNvbnRhaW5lcjogUHJvcFR5cGVzXG4gIC8qIEB0eXBlc2NyaXB0LXRvLXByb3B0eXBlcy1pZ25vcmUgKi9cbiAgLm9uZU9mVHlwZShbSFRNTEVsZW1lbnRUeXBlLCBQcm9wVHlwZXMuaW5zdGFuY2VPZihSZWFjdC5Db21wb25lbnQpLCBQcm9wVHlwZXMuZnVuY10pLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBwb3J0YWwgYmVoYXZpb3IuXG4gICAqIFRoZSBjaGlsZHJlbiBzdGF5IHdpdGhpbiBpdCdzIHBhcmVudCBET00gaGllcmFyY2h5LlxuICAgKi9cbiAgZGlzYWJsZVBvcnRhbDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIG9uY2UgdGhlIGNoaWxkcmVuIGhhcyBiZWVuIG1vdW50ZWQgaW50byB0aGUgYGNvbnRhaW5lcmAuXG4gICAqXG4gICAqIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUsIHRoZSByZWYgY2FuIGJlIHVzZWQgaW5zdGVhZC5cbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSByZWYgaW5zdGVhZC5cbiAgICovXG4gIG9uUmVuZGVyZWQ6IGRlcHJlY2F0ZWRQcm9wVHlwZShQcm9wVHlwZXMuZnVuYywgJ1VzZSB0aGUgcmVmIGluc3RlYWQuJylcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBQb3J0YWxbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoUG9ydGFsLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvcnRhbDsiLCJpbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVja1wiO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3NcIjtcbmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RvQ29uc3VtYWJsZUFycmF5XCI7XG5pbXBvcnQgZ2V0U2Nyb2xsYmFyU2l6ZSBmcm9tICcuLi91dGlscy9nZXRTY3JvbGxiYXJTaXplJztcbmltcG9ydCBvd25lckRvY3VtZW50IGZyb20gJy4uL3V0aWxzL293bmVyRG9jdW1lbnQnO1xuaW1wb3J0IG93bmVyV2luZG93IGZyb20gJy4uL3V0aWxzL293bmVyV2luZG93JzsgLy8gSXMgYSB2ZXJ0aWNhbCBzY3JvbGxiYXIgZGlzcGxheWVkP1xuXG5mdW5jdGlvbiBpc092ZXJmbG93aW5nKGNvbnRhaW5lcikge1xuICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChjb250YWluZXIpO1xuXG4gIGlmIChkb2MuYm9keSA9PT0gY29udGFpbmVyKSB7XG4gICAgcmV0dXJuIG93bmVyV2luZG93KGRvYykuaW5uZXJXaWR0aCA+IGRvYy5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIH1cblxuICByZXR1cm4gY29udGFpbmVyLnNjcm9sbEhlaWdodCA+IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcmlhSGlkZGVuKG5vZGUsIHNob3cpIHtcbiAgaWYgKHNob3cpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICB9IGVsc2Uge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWhpZGRlbicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFBhZGRpbmdSaWdodChub2RlKSB7XG4gIHJldHVybiBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKVsncGFkZGluZy1yaWdodCddLCAxMCkgfHwgMDtcbn1cblxuZnVuY3Rpb24gYXJpYUhpZGRlblNpYmxpbmdzKGNvbnRhaW5lciwgbW91bnROb2RlLCBjdXJyZW50Tm9kZSkge1xuICB2YXIgbm9kZXNUb0V4Y2x1ZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IFtdO1xuICB2YXIgc2hvdyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ID8gYXJndW1lbnRzWzRdIDogdW5kZWZpbmVkO1xuICB2YXIgYmxhY2tsaXN0ID0gW21vdW50Tm9kZSwgY3VycmVudE5vZGVdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkobm9kZXNUb0V4Y2x1ZGUpKTtcbiAgdmFyIGJsYWNrbGlzdFRhZ05hbWVzID0gWydURU1QTEFURScsICdTQ1JJUFQnLCAnU1RZTEUnXTtcbiAgW10uZm9yRWFjaC5jYWxsKGNvbnRhaW5lci5jaGlsZHJlbiwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBibGFja2xpc3QuaW5kZXhPZihub2RlKSA9PT0gLTEgJiYgYmxhY2tsaXN0VGFnTmFtZXMuaW5kZXhPZihub2RlLnRhZ05hbWUpID09PSAtMSkge1xuICAgICAgYXJpYUhpZGRlbihub2RlLCBzaG93KTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXhPZihjb250YWluZXJJbmZvLCBjYWxsYmFjaykge1xuICB2YXIgaWR4ID0gLTE7XG4gIGNvbnRhaW5lckluZm8uc29tZShmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHtcbiAgICBpZiAoY2FsbGJhY2soaXRlbSkpIHtcbiAgICAgIGlkeCA9IGluZGV4O1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29udGFpbmVyKGNvbnRhaW5lckluZm8sIHByb3BzKSB7XG4gIHZhciByZXN0b3JlU3R5bGUgPSBbXTtcbiAgdmFyIHJlc3RvcmVQYWRkaW5ncyA9IFtdO1xuICB2YXIgY29udGFpbmVyID0gY29udGFpbmVySW5mby5jb250YWluZXI7XG4gIHZhciBmaXhlZE5vZGVzO1xuXG4gIGlmICghcHJvcHMuZGlzYWJsZVNjcm9sbExvY2spIHtcbiAgICBpZiAoaXNPdmVyZmxvd2luZyhjb250YWluZXIpKSB7XG4gICAgICAvLyBDb21wdXRlIHRoZSBzaXplIGJlZm9yZSBhcHBseWluZyBvdmVyZmxvdyBoaWRkZW4gdG8gYXZvaWQgYW55IHNjcm9sbCBqdW1wcy5cbiAgICAgIHZhciBzY3JvbGxiYXJTaXplID0gZ2V0U2Nyb2xsYmFyU2l6ZSgpO1xuICAgICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgICB2YWx1ZTogY29udGFpbmVyLnN0eWxlLnBhZGRpbmdSaWdodCxcbiAgICAgICAga2V5OiAncGFkZGluZy1yaWdodCcsXG4gICAgICAgIGVsOiBjb250YWluZXJcbiAgICAgIH0pOyAvLyBVc2UgY29tcHV0ZWQgc3R5bGUsIGhlcmUgdG8gZ2V0IHRoZSByZWFsIHBhZGRpbmcgdG8gYWRkIG91ciBzY3JvbGxiYXIgd2lkdGguXG5cbiAgICAgIGNvbnRhaW5lci5zdHlsZVsncGFkZGluZy1yaWdodCddID0gXCJcIi5jb25jYXQoZ2V0UGFkZGluZ1JpZ2h0KGNvbnRhaW5lcikgKyBzY3JvbGxiYXJTaXplLCBcInB4XCIpOyAvLyAubXVpLWZpeGVkIGlzIGEgZ2xvYmFsIGhlbHBlci5cblxuICAgICAgZml4ZWROb2RlcyA9IG93bmVyRG9jdW1lbnQoY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcubXVpLWZpeGVkJyk7XG4gICAgICBbXS5mb3JFYWNoLmNhbGwoZml4ZWROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgcmVzdG9yZVBhZGRpbmdzLnB1c2gobm9kZS5zdHlsZS5wYWRkaW5nUmlnaHQpO1xuICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IFwiXCIuY29uY2F0KGdldFBhZGRpbmdSaWdodChub2RlKSArIHNjcm9sbGJhclNpemUsIFwicHhcIik7XG4gICAgICB9KTtcbiAgICB9IC8vIEltcHJvdmUgR2F0c2J5IHN1cHBvcnRcbiAgICAvLyBodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9mb3JjZS12ZXJ0aWNhbC1zY3JvbGxiYXIvXG5cblxuICAgIHZhciBwYXJlbnQgPSBjb250YWluZXIucGFyZW50RWxlbWVudDtcbiAgICB2YXIgc2Nyb2xsQ29udGFpbmVyID0gcGFyZW50Lm5vZGVOYW1lID09PSAnSFRNTCcgJiYgd2luZG93LmdldENvbXB1dGVkU3R5bGUocGFyZW50KVsnb3ZlcmZsb3cteSddID09PSAnc2Nyb2xsJyA/IHBhcmVudCA6IGNvbnRhaW5lcjsgLy8gQmxvY2sgdGhlIHNjcm9sbCBldmVuIGlmIG5vIHNjcm9sbGJhciBpcyB2aXNpYmxlIHRvIGFjY291bnQgZm9yIG1vYmlsZSBrZXlib2FyZFxuICAgIC8vIHNjcmVlbnNpemUgc2hyaW5rLlxuXG4gICAgcmVzdG9yZVN0eWxlLnB1c2goe1xuICAgICAgdmFsdWU6IHNjcm9sbENvbnRhaW5lci5zdHlsZS5vdmVyZmxvdyxcbiAgICAgIGtleTogJ292ZXJmbG93JyxcbiAgICAgIGVsOiBzY3JvbGxDb250YWluZXJcbiAgICB9KTtcbiAgICBzY3JvbGxDb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgfVxuXG4gIHZhciByZXN0b3JlID0gZnVuY3Rpb24gcmVzdG9yZSgpIHtcbiAgICBpZiAoZml4ZWROb2Rlcykge1xuICAgICAgW10uZm9yRWFjaC5jYWxsKGZpeGVkTm9kZXMsIGZ1bmN0aW9uIChub2RlLCBpKSB7XG4gICAgICAgIGlmIChyZXN0b3JlUGFkZGluZ3NbaV0pIHtcbiAgICAgICAgICBub2RlLnN0eWxlLnBhZGRpbmdSaWdodCA9IHJlc3RvcmVQYWRkaW5nc1tpXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KCdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJlc3RvcmVTdHlsZS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgICAgIGVsID0gX3JlZi5lbCxcbiAgICAgICAgICBrZXkgPSBfcmVmLmtleTtcblxuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gcmVzdG9yZTtcbn1cblxuZnVuY3Rpb24gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKSB7XG4gIHZhciBoaWRkZW5TaWJsaW5ncyA9IFtdO1xuICBbXS5mb3JFYWNoLmNhbGwoY29udGFpbmVyLmNoaWxkcmVuLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nKSA9PT0gJ3RydWUnKSB7XG4gICAgICBoaWRkZW5TaWJsaW5ncy5wdXNoKG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBoaWRkZW5TaWJsaW5ncztcbn1cbi8qKlxuICogQGlnbm9yZSAtIGRvIG5vdCBkb2N1bWVudC5cbiAqXG4gKiBQcm9wZXIgc3RhdGUgbWFuYWdlbWVudCBmb3IgY29udGFpbmVycyBhbmQgdGhlIG1vZGFscyBpbiB0aG9zZSBjb250YWluZXJzLlxuICogU2ltcGxpZmllZCwgYnV0IGluc3BpcmVkIGJ5IHJlYWN0LW92ZXJsYXkncyBNb2RhbE1hbmFnZXIgY2xhc3MuXG4gKiBVc2VkIGJ5IHRoZSBNb2RhbCB0byBlbnN1cmUgcHJvcGVyIHN0eWxpbmcgb2YgY29udGFpbmVycy5cbiAqL1xuXG5cbnZhciBNb2RhbE1hbmFnZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBNb2RhbE1hbmFnZXIoKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1vZGFsTWFuYWdlcik7XG5cbiAgICAvLyB0aGlzLm1vZGFsc1ttb2RhbEluZGV4XSA9IG1vZGFsXG4gICAgdGhpcy5tb2RhbHMgPSBbXTsgLy8gdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XSA9IHtcbiAgICAvLyAgIG1vZGFsczogW10sXG4gICAgLy8gICBjb250YWluZXIsXG4gICAgLy8gICByZXN0b3JlOiBudWxsLFxuICAgIC8vIH1cblxuICAgIHRoaXMuY29udGFpbmVycyA9IFtdO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1vZGFsTWFuYWdlciwgW3tcbiAgICBrZXk6IFwiYWRkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChtb2RhbCwgY29udGFpbmVyKSB7XG4gICAgICB2YXIgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIG1vZGFsSW5kZXggPSB0aGlzLm1vZGFscy5sZW5ndGg7XG4gICAgICB0aGlzLm1vZGFscy5wdXNoKG1vZGFsKTsgLy8gSWYgdGhlIG1vZGFsIHdlIGFyZSBhZGRpbmcgaXMgYWxyZWFkeSBpbiB0aGUgRE9NLlxuXG4gICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaGlkZGVuU2libGluZ05vZGVzID0gZ2V0SGlkZGVuU2libGluZ3MoY29udGFpbmVyKTtcbiAgICAgIGFyaWFIaWRkZW5TaWJsaW5ncyhjb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSwgbW9kYWwubW9kYWxSZWYsIGhpZGRlblNpYmxpbmdOb2RlcywgdHJ1ZSk7XG4gICAgICB2YXIgY29udGFpbmVySW5kZXggPSBmaW5kSW5kZXhPZih0aGlzLmNvbnRhaW5lcnMsIGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmNvbnRhaW5lciA9PT0gY29udGFpbmVyO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChjb250YWluZXJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJzW2NvbnRhaW5lckluZGV4XS5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbnRhaW5lcnMucHVzaCh7XG4gICAgICAgIG1vZGFsczogW21vZGFsXSxcbiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICAgIHJlc3RvcmU6IG51bGwsXG4gICAgICAgIGhpZGRlblNpYmxpbmdOb2RlczogaGlkZGVuU2libGluZ05vZGVzXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtb2RhbEluZGV4O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJtb3VudFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtb3VudChtb2RhbCwgcHJvcHMpIHtcbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuXG4gICAgICBpZiAoIWNvbnRhaW5lckluZm8ucmVzdG9yZSkge1xuICAgICAgICBjb250YWluZXJJbmZvLnJlc3RvcmUgPSBoYW5kbGVDb250YWluZXIoY29udGFpbmVySW5mbywgcHJvcHMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZW1vdmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKG1vZGFsKSB7XG4gICAgICB2YXIgbW9kYWxJbmRleCA9IHRoaXMubW9kYWxzLmluZGV4T2YobW9kYWwpO1xuXG4gICAgICBpZiAobW9kYWxJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuIG1vZGFsSW5kZXg7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250YWluZXJJbmRleCA9IGZpbmRJbmRleE9mKHRoaXMuY29udGFpbmVycywgZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubW9kYWxzLmluZGV4T2YobW9kYWwpICE9PSAtMTtcbiAgICAgIH0pO1xuICAgICAgdmFyIGNvbnRhaW5lckluZm8gPSB0aGlzLmNvbnRhaW5lcnNbY29udGFpbmVySW5kZXhdO1xuICAgICAgY29udGFpbmVySW5mby5tb2RhbHMuc3BsaWNlKGNvbnRhaW5lckluZm8ubW9kYWxzLmluZGV4T2YobW9kYWwpLCAxKTtcbiAgICAgIHRoaXMubW9kYWxzLnNwbGljZShtb2RhbEluZGV4LCAxKTsgLy8gSWYgdGhhdCB3YXMgdGhlIGxhc3QgbW9kYWwgaW4gYSBjb250YWluZXIsIGNsZWFuIHVwIHRoZSBjb250YWluZXIuXG5cbiAgICAgIGlmIChjb250YWluZXJJbmZvLm1vZGFscy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgLy8gVGhlIG1vZGFsIG1pZ2h0IGJlIGNsb3NlZCBiZWZvcmUgaXQgaGFkIHRoZSBjaGFuY2UgdG8gYmUgbW91bnRlZCBpbiB0aGUgRE9NLlxuICAgICAgICBpZiAoY29udGFpbmVySW5mby5yZXN0b3JlKSB7XG4gICAgICAgICAgY29udGFpbmVySW5mby5yZXN0b3JlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kYWwubW9kYWxSZWYpIHtcbiAgICAgICAgICAvLyBJbiBjYXNlIHRoZSBtb2RhbCB3YXNuJ3QgaW4gdGhlIERPTSB5ZXQuXG4gICAgICAgICAgYXJpYUhpZGRlbihtb2RhbC5tb2RhbFJlZiwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmlhSGlkZGVuU2libGluZ3MoY29udGFpbmVySW5mby5jb250YWluZXIsIG1vZGFsLm1vdW50Tm9kZSwgbW9kYWwubW9kYWxSZWYsIGNvbnRhaW5lckluZm8uaGlkZGVuU2libGluZ05vZGVzLCBmYWxzZSk7XG4gICAgICAgIHRoaXMuY29udGFpbmVycy5zcGxpY2UoY29udGFpbmVySW5kZXgsIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIG1ha2Ugc3VyZSB0aGUgbmV4dCB0b3AgbW9kYWwgaXMgdmlzaWJsZSB0byBhIHNjcmVlbiByZWFkZXIuXG4gICAgICAgIHZhciBuZXh0VG9wID0gY29udGFpbmVySW5mby5tb2RhbHNbY29udGFpbmVySW5mby5tb2RhbHMubGVuZ3RoIC0gMV07IC8vIGFzIHNvb24gYXMgYSBtb2RhbCBpcyBhZGRpbmcgaXRzIG1vZGFsUmVmIGlzIHVuZGVmaW5lZC4gaXQgY2FuJ3Qgc2V0XG4gICAgICAgIC8vIGFyaWEtaGlkZGVuIGJlY2F1c2UgdGhlIGRvbSBlbGVtZW50IGRvZXNuJ3QgZXhpc3QgZWl0aGVyXG4gICAgICAgIC8vIHdoZW4gbW9kYWwgd2FzIHVubW91bnRlZCBiZWZvcmUgbW9kYWxSZWYgZ2V0cyBudWxsXG5cbiAgICAgICAgaWYgKG5leHRUb3AubW9kYWxSZWYpIHtcbiAgICAgICAgICBhcmlhSGlkZGVuKG5leHRUb3AubW9kYWxSZWYsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbW9kYWxJbmRleDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNUb3BNb2RhbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1RvcE1vZGFsKG1vZGFsKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RhbHMubGVuZ3RoID4gMCAmJiB0aGlzLm1vZGFsc1t0aGlzLm1vZGFscy5sZW5ndGggLSAxXSA9PT0gbW9kYWw7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1vZGFsTWFuYWdlcjtcbn0oKTtcblxuZXhwb3J0IHsgTW9kYWxNYW5hZ2VyIGFzIGRlZmF1bHQgfTsiLCIvLyBBIGNoYW5nZSBvZiB0aGUgYnJvd3NlciB6b29tIGNoYW5nZSB0aGUgc2Nyb2xsYmFyIHNpemUuXG4vLyBDcmVkaXQgaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvM2ZmZTNhNWQ4MmY2ZjU2MWI4MmZmNzhkODJiMzJhN2QxNGFlZDU1OC9qcy9zcmMvbW9kYWwuanMjTDUxMi1MNTE5XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxiYXJTaXplKCkge1xuICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNjcm9sbERpdi5zdHlsZS53aWR0aCA9ICc5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLmhlaWdodCA9ICc5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgc2Nyb2xsRGl2LnN0eWxlLnRvcCA9ICctOTk5OXB4JztcbiAgc2Nyb2xsRGl2LnN0eWxlLm92ZXJmbG93ID0gJ3Njcm9sbCc7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgdmFyIHNjcm9sbGJhclNpemUgPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGg7XG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KTtcbiAgcmV0dXJuIHNjcm9sbGJhclNpemU7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn0iLCIvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiwganN4LWExMXkvbm8tbm9uaW50ZXJhY3RpdmUtdGFiaW5kZXgsIGNhbWVsY2FzZSAqL1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgb3duZXJEb2N1bWVudCBmcm9tICcuLi91dGlscy9vd25lckRvY3VtZW50JztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHsgZXhhY3RQcm9wIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbi8qKlxuICogVXRpbGl0eSBjb21wb25lbnQgdGhhdCBsb2NrcyBmb2N1cyBpbnNpZGUgdGhlIGNvbXBvbmVudC5cbiAqL1xuXG5mdW5jdGlvbiBVbnN0YWJsZV9UcmFwRm9jdXMocHJvcHMpIHtcbiAgdmFyIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MgPSBwcm9wcy5kaXNhYmxlQXV0b0ZvY3VzLFxuICAgICAgZGlzYWJsZUF1dG9Gb2N1cyA9IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUF1dG9Gb2MsXG4gICAgICBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPSBwcm9wcy5kaXNhYmxlRW5mb3JjZUZvY3VzLFxuICAgICAgZGlzYWJsZUVuZm9yY2VGb2N1cyA9IF9wcm9wcyRkaXNhYmxlRW5mb3JjZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVuZm9yY2UsXG4gICAgICBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPSBwcm9wcy5kaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJlc3RvcmUsXG4gICAgICBnZXREb2MgPSBwcm9wcy5nZXREb2MsXG4gICAgICBpc0VuYWJsZWQgPSBwcm9wcy5pc0VuYWJsZWQsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbjtcbiAgdmFyIGlnbm9yZU5leHRFbmZvcmNlRm9jdXMgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHNlbnRpbmVsU3RhcnQgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBzZW50aW5lbEVuZCA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIG5vZGVUb1Jlc3RvcmUgPSBSZWFjdC51c2VSZWYoKTtcbiAgdmFyIHJvb3RSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7IC8vIGNhbiBiZSByZW1vdmVkIG9uY2Ugd2UgZHJvcCBzdXBwb3J0IGZvciBub24gcmVmIGZvcndhcmRpbmcgY2xhc3MgY29tcG9uZW50c1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIHJvb3RSZWYuY3VycmVudCA9IFJlYWN0RE9NLmZpbmRET01Ob2RlKGluc3RhbmNlKTtcbiAgfSwgW10pO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIGhhbmRsZU93blJlZik7XG4gIHZhciBwcmV2T3BlblJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHByZXZPcGVuUmVmLmN1cnJlbnQgPSBvcGVuO1xuICB9LCBbb3Blbl0pO1xuXG4gIGlmICghcHJldk9wZW5SZWYuY3VycmVudCAmJiBvcGVuICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gV0FSTklORzogUG90ZW50aWFsbHkgdW5zYWZlIGluIGNvbmN1cnJlbnQgbW9kZS5cbiAgICAvLyBUaGUgd2F5IHRoZSByZWFkIG9uIGBub2RlVG9SZXN0b3JlYCBpcyBzZXR1cCBjb3VsZCBtYWtlIHRoaXMgYWN0dWFsbHkgc2FmZS5cbiAgICAvLyBTYXkgd2UgcmVuZGVyIGBvcGVuPXtmYWxzZX1gIC0+IGBvcGVuPXt0cnVlfWAgYnV0IG5ldmVyIGNvbW1pdC5cbiAgICAvLyBXZSBoYXZlIG5vdyB3cml0dGVuIGEgc3RhdGUgdGhhdCB3YXNuJ3QgY29tbWl0dGVkLiBCdXQgbm8gY29tbWl0dGVkIGVmZmVjdFxuICAgIC8vIHdpbGwgcmVhZCB0aGlzIHdyb25nIHZhbHVlLiBXZSBvbmx5IHJlYWQgZnJvbSBgbm9kZVRvUmVzdG9yZWAgaW4gZWZmZWN0c1xuICAgIC8vIHRoYXQgd2VyZSBjb21taXR0ZWQgb24gYG9wZW49e3RydWV9YFxuICAgIC8vIFdBUk5JTkc6IFByZXZlbnRzIHRoZSBpbnN0YW5jZSBmcm9tIGJlaW5nIGdhcmJhZ2UgY29sbGVjdGVkLiBTaG91bGQgb25seVxuICAgIC8vIGhvbGQgYSB3ZWFrIHJlZi5cbiAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQgPSBnZXREb2MoKS5hY3RpdmVFbGVtZW50O1xuICB9XG5cbiAgUmVhY3QudXNlRWZmZWN0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIW9wZW4pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZG9jID0gb3duZXJEb2N1bWVudChyb290UmVmLmN1cnJlbnQpOyAvLyBXZSBtaWdodCByZW5kZXIgYW4gZW1wdHkgY2hpbGQuXG5cbiAgICBpZiAoIWRpc2FibGVBdXRvRm9jdXMgJiYgcm9vdFJlZi5jdXJyZW50ICYmICFyb290UmVmLmN1cnJlbnQuY29udGFpbnMoZG9jLmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgICBpZiAoIXJvb3RSZWYuY3VycmVudC5oYXNBdHRyaWJ1dGUoJ3RhYkluZGV4JykpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFRoZSBtb2RhbCBjb250ZW50IG5vZGUgZG9lcyBub3QgYWNjZXB0IGZvY3VzLicsICdGb3IgdGhlIGJlbmVmaXQgb2YgYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgJyArICd0aGUgdGFiSW5kZXggb2YgdGhlIG5vZGUgaXMgYmVpbmcgc2V0IHRvIFwiLTFcIi4nXS5qb2luKCdcXG4nKSk7XG4gICAgICAgIH1cblxuICAgICAgICByb290UmVmLmN1cnJlbnQuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsIC0xKTtcbiAgICAgIH1cblxuICAgICAgcm9vdFJlZi5jdXJyZW50LmZvY3VzKCk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW4gPSBmdW5jdGlvbiBjb250YWluKCkge1xuICAgICAgdmFyIHJvb3RFbGVtZW50ID0gcm9vdFJlZi5jdXJyZW50OyAvLyBDbGVhbnVwIGZ1bmN0aW9ucyBhcmUgZXhlY3V0ZWQgbGF6aWx5IGluIFJlYWN0IDE3LlxuICAgICAgLy8gQ29udGFpbiBjYW4gYmUgY2FsbGVkIGJldHdlZW4gdGhlIGNvbXBvbmVudCBiZWluZyB1bm1vdW50ZWQgYW5kIGl0cyBjbGVhbnVwIGZ1bmN0aW9uIGJlaW5nIHJ1bi5cblxuICAgICAgaWYgKHJvb3RFbGVtZW50ID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFkb2MuaGFzRm9jdXMoKSB8fCBkaXNhYmxlRW5mb3JjZUZvY3VzIHx8ICFpc0VuYWJsZWQoKSB8fCBpZ25vcmVOZXh0RW5mb3JjZUZvY3VzLmN1cnJlbnQpIHtcbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJvb3RSZWYuY3VycmVudCAmJiAhcm9vdFJlZi5jdXJyZW50LmNvbnRhaW5zKGRvYy5hY3RpdmVFbGVtZW50KSkge1xuICAgICAgICByb290UmVmLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIGxvb3BGb2N1cyA9IGZ1bmN0aW9uIGxvb3BGb2N1cyhldmVudCkge1xuICAgICAgLy8gOSA9IFRhYlxuICAgICAgaWYgKGRpc2FibGVFbmZvcmNlRm9jdXMgfHwgIWlzRW5hYmxlZCgpIHx8IGV2ZW50LmtleUNvZGUgIT09IDkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSAvLyBNYWtlIHN1cmUgdGhlIG5leHQgdGFiIHN0YXJ0cyBmcm9tIHRoZSByaWdodCBwbGFjZS5cblxuXG4gICAgICBpZiAoZG9jLmFjdGl2ZUVsZW1lbnQgPT09IHJvb3RSZWYuY3VycmVudCkge1xuICAgICAgICAvLyBXZSBuZWVkIHRvIGlnbm9yZSB0aGUgbmV4dCBjb250YWluIGFzXG4gICAgICAgIC8vIGl0IHdpbGwgdHJ5IHRvIG1vdmUgdGhlIGZvY3VzIGJhY2sgdG8gdGhlIHJvb3RSZWYgZWxlbWVudC5cbiAgICAgICAgaWdub3JlTmV4dEVuZm9yY2VGb2N1cy5jdXJyZW50ID0gdHJ1ZTtcblxuICAgICAgICBpZiAoZXZlbnQuc2hpZnRLZXkpIHtcbiAgICAgICAgICBzZW50aW5lbEVuZC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VudGluZWxTdGFydC5jdXJyZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgY29udGFpbiwgdHJ1ZSk7XG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBsb29wRm9jdXMsIHRydWUpOyAvLyBXaXRoIEVkZ2UsIFNhZmFyaSBhbmQgRmlyZWZveCwgbm8gZm9jdXMgcmVsYXRlZCBldmVudHMgYXJlIGZpcmVkIHdoZW4gdGhlIGZvY3VzZWQgYXJlYSBzdG9wcyBiZWluZyBhIGZvY3VzZWQgYXJlYVxuICAgIC8vIGUuZy4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NTU5NTYxLlxuICAgIC8vXG4gICAgLy8gVGhlIHdoYXR3ZyBzcGVjIGRlZmluZXMgaG93IHRoZSBicm93c2VyIHNob3VsZCBiZWhhdmUgYnV0IGRvZXMgbm90IGV4cGxpY2l0bHkgbWVudGlvbiBhbnkgZXZlbnRzOlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2ludGVyYWN0aW9uLmh0bWwjZm9jdXMtZml4dXAtcnVsZS5cblxuICAgIHZhciBpbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnRhaW4oKTtcbiAgICB9LCA1MCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgY29udGFpbiwgdHJ1ZSk7XG4gICAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGxvb3BGb2N1cywgdHJ1ZSk7IC8vIHJlc3RvcmVMYXN0Rm9jdXMoKVxuXG4gICAgICBpZiAoIWRpc2FibGVSZXN0b3JlRm9jdXMpIHtcbiAgICAgICAgLy8gSW4gSUUgMTEgaXQgaXMgcG9zc2libGUgZm9yIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgdG8gYmUgbnVsbCByZXN1bHRpbmdcbiAgICAgICAgLy8gaW4gbm9kZVRvUmVzdG9yZS5jdXJyZW50IGJlaW5nIG51bGwuXG4gICAgICAgIC8vIE5vdCBhbGwgZWxlbWVudHMgaW4gSUUgMTEgaGF2ZSBhIGZvY3VzIG1ldGhvZC5cbiAgICAgICAgLy8gT25jZSBJRSAxMSBzdXBwb3J0IGlzIGRyb3BwZWQgdGhlIGZvY3VzKCkgY2FsbCBjYW4gYmUgdW5jb25kaXRpb25hbC5cbiAgICAgICAgaWYgKG5vZGVUb1Jlc3RvcmUuY3VycmVudCAmJiBub2RlVG9SZXN0b3JlLmN1cnJlbnQuZm9jdXMpIHtcbiAgICAgICAgICBub2RlVG9SZXN0b3JlLmN1cnJlbnQuZm9jdXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGVUb1Jlc3RvcmUuY3VycmVudCA9IG51bGw7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW2Rpc2FibGVBdXRvRm9jdXMsIGRpc2FibGVFbmZvcmNlRm9jdXMsIGRpc2FibGVSZXN0b3JlRm9jdXMsIGlzRW5hYmxlZCwgb3Blbl0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICB0YWJJbmRleDogMCxcbiAgICByZWY6IHNlbnRpbmVsU3RhcnQsXG4gICAgXCJkYXRhLXRlc3RcIjogXCJzZW50aW5lbFN0YXJ0XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIHtcbiAgICByZWY6IGhhbmRsZVJlZlxuICB9KSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIHRhYkluZGV4OiAwLFxuICAgIHJlZjogc2VudGluZWxFbmQsXG4gICAgXCJkYXRhLXRlc3RcIjogXCJzZW50aW5lbEVuZFwiXG4gIH0pKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVW5zdGFibGVfVHJhcEZvY3VzLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgdHJhcCBmb2N1cyB3aWxsIG5vdCBhdXRvbWF0aWNhbGx5IHNoaWZ0IGZvY3VzIHRvIGl0c2VsZiB3aGVuIGl0IG9wZW5zLCBhbmRcbiAgICogcmVwbGFjZSBpdCB0byB0aGUgbGFzdCBmb2N1c2VkIGVsZW1lbnQgd2hlbiBpdCBjbG9zZXMuXG4gICAqIFRoaXMgYWxzbyB3b3JrcyBjb3JyZWN0bHkgd2l0aCBhbnkgdHJhcCBmb2N1cyBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgdHJhcCBmb2N1cyBsZXNzXG4gICAqIGFjY2Vzc2libGUgdG8gYXNzaXN0aXZlIHRlY2hub2xvZ2llcywgbGlrZSBzY3JlZW4gcmVhZGVycy5cbiAgICovXG4gIGRpc2FibGVBdXRvRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSB0cmFwIGZvY3VzIHdpbGwgbm90IHByZXZlbnQgZm9jdXMgZnJvbSBsZWF2aW5nIHRoZSB0cmFwIGZvY3VzIHdoaWxlIG9wZW4uXG4gICAqXG4gICAqIEdlbmVyYWxseSB0aGlzIHNob3VsZCBuZXZlciBiZSBzZXQgdG8gYHRydWVgIGFzIGl0IG1ha2VzIHRoZSB0cmFwIGZvY3VzIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIHRyYXAgZm9jdXMgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIHRyYXAgZm9jdXMgaXMgaGlkZGVuLlxuICAgKi9cbiAgZGlzYWJsZVJlc3RvcmVGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZG9jdW1lbnQgdG8gY29uc2lkZXIuXG4gICAqIFdlIHVzZSBpdCB0byBpbXBsZW1lbnQgdGhlIHJlc3RvcmUgZm9jdXMgYmV0d2VlbiBkaWZmZXJlbnQgYnJvd3NlciBkb2N1bWVudHMuXG4gICAqL1xuICBnZXREb2M6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIERvIHdlIHN0aWxsIHdhbnQgdG8gZW5mb3JjZSB0aGUgZm9jdXM/XG4gICAqIFRoaXMgcHJvcCBoZWxwcyBuZXN0aW5nIFRyYXBGb2N1cyBlbGVtZW50cy5cbiAgICovXG4gIGlzRW5hYmxlZDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBmb2N1cyB3aWxsIGJlIGxvY2tlZC5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBVbnN0YWJsZV9UcmFwRm9jdXNbJ3Byb3BUeXBlcycgKyAnJ10gPSBleGFjdFByb3AoVW5zdGFibGVfVHJhcEZvY3VzLnByb3BUeXBlcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuc3RhYmxlX1RyYXBGb2N1czsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICB6SW5kZXg6IC0xLFxuICAgIHBvc2l0aW9uOiAnZml4ZWQnLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gIGludmlzaWJsZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9XG59O1xuLyoqXG4gKiBAaWdub3JlIC0gaW50ZXJuYWwgY29tcG9uZW50LlxuICovXG5cbnZhciBTaW1wbGVCYWNrZHJvcCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIFNpbXBsZUJhY2tkcm9wKHByb3BzLCByZWYpIHtcbiAgdmFyIF9wcm9wcyRpbnZpc2libGUgPSBwcm9wcy5pbnZpc2libGUsXG4gICAgICBpbnZpc2libGUgPSBfcHJvcHMkaW52aXNpYmxlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRpbnZpc2libGUsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJpbnZpc2libGVcIiwgXCJvcGVuXCJdKTtcblxuICByZXR1cm4gb3BlbiA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIHN0eWxlcy5yb290LCBpbnZpc2libGUgPyBzdHlsZXMuaW52aXNpYmxlIDoge30sIG90aGVyLnN0eWxlKVxuICB9KSkgOiBudWxsO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBTaW1wbGVCYWNrZHJvcC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBpbnZpc2libGUuXG4gICAqIEl0IGNhbiBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nIGEgcG9wb3ZlciBvciBhIGN1c3RvbSBzZWxlY3QgY29tcG9uZW50LlxuICAgKi9cbiAgaW52aXNpYmxlOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgb3Blbi5cbiAgICovXG4gIG9wZW46IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWRcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTaW1wbGVCYWNrZHJvcDsiLCJpbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc1wiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGdldFRoZW1lUHJvcHMsIHVzZVRoZW1lIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3N0eWxlcyc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmLCBIVE1MRWxlbWVudFR5cGUgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IGRlcHJlY2F0ZWRQcm9wVHlwZSBmcm9tICcuLi91dGlscy9kZXByZWNhdGVkUHJvcFR5cGUnO1xuaW1wb3J0IG93bmVyRG9jdW1lbnQgZnJvbSAnLi4vdXRpbHMvb3duZXJEb2N1bWVudCc7XG5pbXBvcnQgUG9ydGFsIGZyb20gJy4uL1BvcnRhbCc7XG5pbXBvcnQgY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIGZyb20gJy4uL3V0aWxzL2NyZWF0ZUNoYWluZWRGdW5jdGlvbic7XG5pbXBvcnQgdXNlRm9ya1JlZiBmcm9tICcuLi91dGlscy91c2VGb3JrUmVmJztcbmltcG9ydCB1c2VFdmVudENhbGxiYWNrIGZyb20gJy4uL3V0aWxzL3VzZUV2ZW50Q2FsbGJhY2snO1xuaW1wb3J0IHpJbmRleCBmcm9tICcuLi9zdHlsZXMvekluZGV4JztcbmltcG9ydCBNb2RhbE1hbmFnZXIsIHsgYXJpYUhpZGRlbiB9IGZyb20gJy4vTW9kYWxNYW5hZ2VyJztcbmltcG9ydCBUcmFwRm9jdXMgZnJvbSAnLi4vVW5zdGFibGVfVHJhcEZvY3VzJztcbmltcG9ydCBTaW1wbGVCYWNrZHJvcCBmcm9tICcuL1NpbXBsZUJhY2tkcm9wJztcblxuZnVuY3Rpb24gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikge1xuICBjb250YWluZXIgPSB0eXBlb2YgY29udGFpbmVyID09PSAnZnVuY3Rpb24nID8gY29udGFpbmVyKCkgOiBjb250YWluZXI7XG4gIHJldHVybiBSZWFjdERPTS5maW5kRE9NTm9kZShjb250YWluZXIpO1xufVxuXG5mdW5jdGlvbiBnZXRIYXNUcmFuc2l0aW9uKHByb3BzKSB7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbiA/IHByb3BzLmNoaWxkcmVuLnByb3BzLmhhc093blByb3BlcnR5KCdpbicpIDogZmFsc2U7XG59IC8vIEEgbW9kYWwgbWFuYWdlciB1c2VkIHRvIHRyYWNrIGFuZCBtYW5hZ2UgdGhlIHN0YXRlIG9mIG9wZW4gTW9kYWxzLlxuLy8gTW9kYWxzIGRvbid0IG9wZW4gb24gdGhlIHNlcnZlciBzbyB0aGlzIHdvbid0IGNvbmZsaWN0IHdpdGggY29uY3VycmVudCByZXF1ZXN0cy5cblxuXG52YXIgZGVmYXVsdE1hbmFnZXIgPSBuZXcgTW9kYWxNYW5hZ2VyKCk7XG5leHBvcnQgdmFyIHN0eWxlcyA9IGZ1bmN0aW9uIHN0eWxlcyh0aGVtZSkge1xuICByZXR1cm4ge1xuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gICAgcm9vdDoge1xuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB6SW5kZXg6IHRoZW1lLnpJbmRleC5tb2RhbCxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgdG9wOiAwLFxuICAgICAgbGVmdDogMFxuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgcm9vdCBlbGVtZW50IGlmIHRoZSBgTW9kYWxgIGhhcyBleGl0ZWQuICovXG4gICAgaGlkZGVuOiB7XG4gICAgICB2aXNpYmlsaXR5OiAnaGlkZGVuJ1xuICAgIH1cbiAgfTtcbn07XG4vKipcbiAqIE1vZGFsIGlzIGEgbG93ZXItbGV2ZWwgY29uc3RydWN0IHRoYXQgaXMgbGV2ZXJhZ2VkIGJ5IHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czpcbiAqXG4gKiAtIFtEaWFsb2ddKC9hcGkvZGlhbG9nLylcbiAqIC0gW0RyYXdlcl0oL2FwaS9kcmF3ZXIvKVxuICogLSBbTWVudV0oL2FwaS9tZW51LylcbiAqIC0gW1BvcG92ZXJdKC9hcGkvcG9wb3Zlci8pXG4gKlxuICogSWYgeW91IGFyZSBjcmVhdGluZyBhIG1vZGFsIGRpYWxvZywgeW91IHByb2JhYmx5IHdhbnQgdG8gdXNlIHRoZSBbRGlhbG9nXSgvYXBpL2RpYWxvZy8pIGNvbXBvbmVudFxuICogcmF0aGVyIHRoYW4gZGlyZWN0bHkgdXNpbmcgTW9kYWwuXG4gKlxuICogVGhpcyBjb21wb25lbnQgc2hhcmVzIG1hbnkgY29uY2VwdHMgd2l0aCBbcmVhY3Qtb3ZlcmxheXNdKGh0dHBzOi8vcmVhY3QtYm9vdHN0cmFwLmdpdGh1Yi5pby9yZWFjdC1vdmVybGF5cy8jbW9kYWxzKS5cbiAqL1xuXG52YXIgTW9kYWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBNb2RhbChpblByb3BzLCByZWYpIHtcbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIHByb3BzID0gZ2V0VGhlbWVQcm9wcyh7XG4gICAgbmFtZTogJ011aU1vZGFsJyxcbiAgICBwcm9wczogX2V4dGVuZHMoe30sIGluUHJvcHMpLFxuICAgIHRoZW1lOiB0aGVtZVxuICB9KTtcblxuICB2YXIgX3Byb3BzJEJhY2tkcm9wQ29tcG9uID0gcHJvcHMuQmFja2Ryb3BDb21wb25lbnQsXG4gICAgICBCYWNrZHJvcENvbXBvbmVudCA9IF9wcm9wcyRCYWNrZHJvcENvbXBvbiA9PT0gdm9pZCAwID8gU2ltcGxlQmFja2Ryb3AgOiBfcHJvcHMkQmFja2Ryb3BDb21wb24sXG4gICAgICBCYWNrZHJvcFByb3BzID0gcHJvcHMuQmFja2Ryb3BQcm9wcyxcbiAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICBfcHJvcHMkY2xvc2VBZnRlclRyYW4gPSBwcm9wcy5jbG9zZUFmdGVyVHJhbnNpdGlvbixcbiAgICAgIGNsb3NlQWZ0ZXJUcmFuc2l0aW9uID0gX3Byb3BzJGNsb3NlQWZ0ZXJUcmFuID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRjbG9zZUFmdGVyVHJhbixcbiAgICAgIGNvbnRhaW5lciA9IHByb3BzLmNvbnRhaW5lcixcbiAgICAgIF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyA9IHByb3BzLmRpc2FibGVBdXRvRm9jdXMsXG4gICAgICBkaXNhYmxlQXV0b0ZvY3VzID0gX3Byb3BzJGRpc2FibGVBdXRvRm9jID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlQXV0b0ZvYyxcbiAgICAgIF9wcm9wcyRkaXNhYmxlQmFja2RybyA9IHByb3BzLmRpc2FibGVCYWNrZHJvcENsaWNrLFxuICAgICAgZGlzYWJsZUJhY2tkcm9wQ2xpY2sgPSBfcHJvcHMkZGlzYWJsZUJhY2tkcm8gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVCYWNrZHJvLFxuICAgICAgX3Byb3BzJGRpc2FibGVFbmZvcmNlID0gcHJvcHMuZGlzYWJsZUVuZm9yY2VGb2N1cyxcbiAgICAgIGRpc2FibGVFbmZvcmNlRm9jdXMgPSBfcHJvcHMkZGlzYWJsZUVuZm9yY2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVFbmZvcmNlLFxuICAgICAgX3Byb3BzJGRpc2FibGVFc2NhcGVLID0gcHJvcHMuZGlzYWJsZUVzY2FwZUtleURvd24sXG4gICAgICBkaXNhYmxlRXNjYXBlS2V5RG93biA9IF9wcm9wcyRkaXNhYmxlRXNjYXBlSyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZUVzY2FwZUssXG4gICAgICBfcHJvcHMkZGlzYWJsZVBvcnRhbCA9IHByb3BzLmRpc2FibGVQb3J0YWwsXG4gICAgICBkaXNhYmxlUG9ydGFsID0gX3Byb3BzJGRpc2FibGVQb3J0YWwgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVQb3J0YWwsXG4gICAgICBfcHJvcHMkZGlzYWJsZVJlc3RvcmUgPSBwcm9wcy5kaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgICAgZGlzYWJsZVJlc3RvcmVGb2N1cyA9IF9wcm9wcyRkaXNhYmxlUmVzdG9yZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZGlzYWJsZVJlc3RvcmUsXG4gICAgICBfcHJvcHMkZGlzYWJsZVNjcm9sbEwgPSBwcm9wcy5kaXNhYmxlU2Nyb2xsTG9jayxcbiAgICAgIGRpc2FibGVTY3JvbGxMb2NrID0gX3Byb3BzJGRpc2FibGVTY3JvbGxMID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRkaXNhYmxlU2Nyb2xsTCxcbiAgICAgIF9wcm9wcyRoaWRlQmFja2Ryb3AgPSBwcm9wcy5oaWRlQmFja2Ryb3AsXG4gICAgICBoaWRlQmFja2Ryb3AgPSBfcHJvcHMkaGlkZUJhY2tkcm9wID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRoaWRlQmFja2Ryb3AsXG4gICAgICBfcHJvcHMka2VlcE1vdW50ZWQgPSBwcm9wcy5rZWVwTW91bnRlZCxcbiAgICAgIGtlZXBNb3VudGVkID0gX3Byb3BzJGtlZXBNb3VudGVkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRrZWVwTW91bnRlZCxcbiAgICAgIF9wcm9wcyRtYW5hZ2VyID0gcHJvcHMubWFuYWdlcixcbiAgICAgIG1hbmFnZXIgPSBfcHJvcHMkbWFuYWdlciA9PT0gdm9pZCAwID8gZGVmYXVsdE1hbmFnZXIgOiBfcHJvcHMkbWFuYWdlcixcbiAgICAgIG9uQmFja2Ryb3BDbGljayA9IHByb3BzLm9uQmFja2Ryb3BDbGljayxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgb25Fc2NhcGVLZXlEb3duID0gcHJvcHMub25Fc2NhcGVLZXlEb3duLFxuICAgICAgb25SZW5kZXJlZCA9IHByb3BzLm9uUmVuZGVyZWQsXG4gICAgICBvcGVuID0gcHJvcHMub3BlbixcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJCYWNrZHJvcENvbXBvbmVudFwiLCBcIkJhY2tkcm9wUHJvcHNcIiwgXCJjaGlsZHJlblwiLCBcImNsb3NlQWZ0ZXJUcmFuc2l0aW9uXCIsIFwiY29udGFpbmVyXCIsIFwiZGlzYWJsZUF1dG9Gb2N1c1wiLCBcImRpc2FibGVCYWNrZHJvcENsaWNrXCIsIFwiZGlzYWJsZUVuZm9yY2VGb2N1c1wiLCBcImRpc2FibGVFc2NhcGVLZXlEb3duXCIsIFwiZGlzYWJsZVBvcnRhbFwiLCBcImRpc2FibGVSZXN0b3JlRm9jdXNcIiwgXCJkaXNhYmxlU2Nyb2xsTG9ja1wiLCBcImhpZGVCYWNrZHJvcFwiLCBcImtlZXBNb3VudGVkXCIsIFwibWFuYWdlclwiLCBcIm9uQmFja2Ryb3BDbGlja1wiLCBcIm9uQ2xvc2VcIiwgXCJvbkVzY2FwZUtleURvd25cIiwgXCJvblJlbmRlcmVkXCIsIFwib3BlblwiXSk7XG5cbiAgdmFyIF9SZWFjdCR1c2VTdGF0ZSA9IFJlYWN0LnVzZVN0YXRlKHRydWUpLFxuICAgICAgZXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlWzBdLFxuICAgICAgc2V0RXhpdGVkID0gX1JlYWN0JHVzZVN0YXRlWzFdO1xuXG4gIHZhciBtb2RhbCA9IFJlYWN0LnVzZVJlZih7fSk7XG4gIHZhciBtb3VudE5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBtb2RhbFJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdmFyIGhhbmRsZVJlZiA9IHVzZUZvcmtSZWYobW9kYWxSZWYsIHJlZik7XG4gIHZhciBoYXNUcmFuc2l0aW9uID0gZ2V0SGFzVHJhbnNpdGlvbihwcm9wcyk7XG5cbiAgdmFyIGdldERvYyA9IGZ1bmN0aW9uIGdldERvYygpIHtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudChtb3VudE5vZGVSZWYuY3VycmVudCk7XG4gIH07XG5cbiAgdmFyIGdldE1vZGFsID0gZnVuY3Rpb24gZ2V0TW9kYWwoKSB7XG4gICAgbW9kYWwuY3VycmVudC5tb2RhbFJlZiA9IG1vZGFsUmVmLmN1cnJlbnQ7XG4gICAgbW9kYWwuY3VycmVudC5tb3VudE5vZGUgPSBtb3VudE5vZGVSZWYuY3VycmVudDtcbiAgICByZXR1cm4gbW9kYWwuY3VycmVudDtcbiAgfTtcblxuICB2YXIgaGFuZGxlTW91bnRlZCA9IGZ1bmN0aW9uIGhhbmRsZU1vdW50ZWQoKSB7XG4gICAgbWFuYWdlci5tb3VudChnZXRNb2RhbCgpLCB7XG4gICAgICBkaXNhYmxlU2Nyb2xsTG9jazogZGlzYWJsZVNjcm9sbExvY2tcbiAgICB9KTsgLy8gRml4IGEgYnVnIG9uIENocm9tZSB3aGVyZSB0aGUgc2Nyb2xsIGlzbid0IGluaXRpYWxseSAwLlxuXG4gICAgbW9kYWxSZWYuY3VycmVudC5zY3JvbGxUb3AgPSAwO1xuICB9O1xuXG4gIHZhciBoYW5kbGVPcGVuID0gdXNlRXZlbnRDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc29sdmVkQ29udGFpbmVyID0gZ2V0Q29udGFpbmVyKGNvbnRhaW5lcikgfHwgZ2V0RG9jKCkuYm9keTtcbiAgICBtYW5hZ2VyLmFkZChnZXRNb2RhbCgpLCByZXNvbHZlZENvbnRhaW5lcik7IC8vIFRoZSBlbGVtZW50IHdhcyBhbHJlYWR5IG1vdW50ZWQuXG5cbiAgICBpZiAobW9kYWxSZWYuY3VycmVudCkge1xuICAgICAgaGFuZGxlTW91bnRlZCgpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBpc1RvcE1vZGFsID0gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBtYW5hZ2VyLmlzVG9wTW9kYWwoZ2V0TW9kYWwoKSk7XG4gIH0sIFttYW5hZ2VyXSk7XG4gIHZhciBoYW5kbGVQb3J0YWxSZWYgPSB1c2VFdmVudENhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgbW91bnROb2RlUmVmLmN1cnJlbnQgPSBub2RlO1xuXG4gICAgaWYgKCFub2RlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uUmVuZGVyZWQpIHtcbiAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICB9XG5cbiAgICBpZiAob3BlbiAmJiBpc1RvcE1vZGFsKCkpIHtcbiAgICAgIGhhbmRsZU1vdW50ZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXJpYUhpZGRlbihtb2RhbFJlZi5jdXJyZW50LCB0cnVlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlQ2xvc2UgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgbWFuYWdlci5yZW1vdmUoZ2V0TW9kYWwoKSk7XG4gIH0sIFttYW5hZ2VyXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZUNsb3NlKCk7XG4gICAgfTtcbiAgfSwgW2hhbmRsZUNsb3NlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKG9wZW4pIHtcbiAgICAgIGhhbmRsZU9wZW4oKTtcbiAgICB9IGVsc2UgaWYgKCFoYXNUcmFuc2l0aW9uIHx8ICFjbG9zZUFmdGVyVHJhbnNpdGlvbikge1xuICAgICAgaGFuZGxlQ2xvc2UoKTtcbiAgICB9XG4gIH0sIFtvcGVuLCBoYW5kbGVDbG9zZSwgaGFzVHJhbnNpdGlvbiwgY2xvc2VBZnRlclRyYW5zaXRpb24sIGhhbmRsZU9wZW5dKTtcblxuICBpZiAoIWtlZXBNb3VudGVkICYmICFvcGVuICYmICghaGFzVHJhbnNpdGlvbiB8fCBleGl0ZWQpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgaGFuZGxlRW50ZXIgPSBmdW5jdGlvbiBoYW5kbGVFbnRlcigpIHtcbiAgICBzZXRFeGl0ZWQoZmFsc2UpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBmdW5jdGlvbiBoYW5kbGVFeGl0ZWQoKSB7XG4gICAgc2V0RXhpdGVkKHRydWUpO1xuXG4gICAgaWYgKGNsb3NlQWZ0ZXJUcmFuc2l0aW9uKSB7XG4gICAgICBoYW5kbGVDbG9zZSgpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlQmFja2Ryb3BDbGljayA9IGZ1bmN0aW9uIGhhbmRsZUJhY2tkcm9wQ2xpY2soZXZlbnQpIHtcbiAgICBpZiAoZXZlbnQudGFyZ2V0ICE9PSBldmVudC5jdXJyZW50VGFyZ2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKG9uQmFja2Ryb3BDbGljaykge1xuICAgICAgb25CYWNrZHJvcENsaWNrKGV2ZW50KTtcbiAgICB9XG5cbiAgICBpZiAoIWRpc2FibGVCYWNrZHJvcENsaWNrICYmIG9uQ2xvc2UpIHtcbiAgICAgIG9uQ2xvc2UoZXZlbnQsICdiYWNrZHJvcENsaWNrJyk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVLZXlEb3duID0gZnVuY3Rpb24gaGFuZGxlS2V5RG93bihldmVudCkge1xuICAgIC8vIFRoZSBoYW5kbGVyIGRvZXNuJ3QgdGFrZSBldmVudC5kZWZhdWx0UHJldmVudGVkIGludG8gYWNjb3VudDpcbiAgICAvL1xuICAgIC8vIGV2ZW50LnByZXZlbnREZWZhdWx0KCkgaXMgbWVhbnQgdG8gc3RvcCBkZWZhdWx0IGJlaGF2aW91cnMgbGlrZVxuICAgIC8vIGNsaWNraW5nIGEgY2hlY2tib3ggdG8gY2hlY2sgaXQsIGhpdHRpbmcgYSBidXR0b24gdG8gc3VibWl0IGEgZm9ybSxcbiAgICAvLyBhbmQgaGl0dGluZyBsZWZ0IGFycm93IHRvIG1vdmUgdGhlIGN1cnNvciBpbiBhIHRleHQgaW5wdXQgZXRjLlxuICAgIC8vIE9ubHkgc3BlY2lhbCBIVE1MIGVsZW1lbnRzIGhhdmUgdGhlc2UgZGVmYXVsdCBiZWhhdmlvcnMuXG4gICAgaWYgKGV2ZW50LmtleSAhPT0gJ0VzY2FwZScgfHwgIWlzVG9wTW9kYWwoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvbkVzY2FwZUtleURvd24pIHtcbiAgICAgIG9uRXNjYXBlS2V5RG93bihldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKCFkaXNhYmxlRXNjYXBlS2V5RG93bikge1xuICAgICAgLy8gU3dhbGxvdyB0aGUgZXZlbnQsIGluIGNhc2Ugc29tZW9uZSBpcyBsaXN0ZW5pbmcgZm9yIHRoZSBlc2NhcGUga2V5IG9uIHRoZSBib2R5LlxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICAgIG9uQ2xvc2UoZXZlbnQsICdlc2NhcGVLZXlEb3duJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbmxpbmVTdHlsZSA9IHN0eWxlcyh0aGVtZSB8fCB7XG4gICAgekluZGV4OiB6SW5kZXhcbiAgfSk7XG4gIHZhciBjaGlsZFByb3BzID0ge307XG5cbiAgaWYgKGNoaWxkcmVuLnByb3BzLnRhYkluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGlsZFByb3BzLnRhYkluZGV4ID0gY2hpbGRyZW4ucHJvcHMudGFiSW5kZXggfHwgJy0xJztcbiAgfSAvLyBJdCdzIGEgVHJhbnNpdGlvbiBsaWtlIGNvbXBvbmVudFxuXG5cbiAgaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgICBjaGlsZFByb3BzLm9uRW50ZXIgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRW50ZXIsIGNoaWxkcmVuLnByb3BzLm9uRW50ZXIpO1xuICAgIGNoaWxkUHJvcHMub25FeGl0ZWQgPSBjcmVhdGVDaGFpbmVkRnVuY3Rpb24oaGFuZGxlRXhpdGVkLCBjaGlsZHJlbi5wcm9wcy5vbkV4aXRlZCk7XG4gIH1cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUG9ydGFsLCB7XG4gICAgcmVmOiBoYW5kbGVQb3J0YWxSZWYsXG4gICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgZGlzYWJsZVBvcnRhbDogZGlzYWJsZVBvcnRhbFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBoYW5kbGVSZWYsXG4gICAgb25LZXlEb3duOiBoYW5kbGVLZXlEb3duLFxuICAgIHJvbGU6IFwicHJlc2VudGF0aW9uXCJcbiAgfSwgb3RoZXIsIHtcbiAgICBzdHlsZTogX2V4dGVuZHMoe30sIGlubGluZVN0eWxlLnJvb3QsICFvcGVuICYmIGV4aXRlZCA/IGlubGluZVN0eWxlLmhpZGRlbiA6IHt9LCBvdGhlci5zdHlsZSlcbiAgfSksIGhpZGVCYWNrZHJvcCA/IG51bGwgOiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChCYWNrZHJvcENvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIG9wZW46IG9wZW4sXG4gICAgb25DbGljazogaGFuZGxlQmFja2Ryb3BDbGlja1xuICB9LCBCYWNrZHJvcFByb3BzKSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFRyYXBGb2N1cywge1xuICAgIGRpc2FibGVFbmZvcmNlRm9jdXM6IGRpc2FibGVFbmZvcmNlRm9jdXMsXG4gICAgZGlzYWJsZUF1dG9Gb2N1czogZGlzYWJsZUF1dG9Gb2N1cyxcbiAgICBkaXNhYmxlUmVzdG9yZUZvY3VzOiBkaXNhYmxlUmVzdG9yZUZvY3VzLFxuICAgIGdldERvYzogZ2V0RG9jLFxuICAgIGlzRW5hYmxlZDogaXNUb3BNb2RhbCxcbiAgICBvcGVuOiBvcGVuXG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIGNoaWxkUHJvcHMpKSkpO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBNb2RhbC5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBBIGJhY2tkcm9wIGNvbXBvbmVudC4gVGhpcyBwcm9wIGVuYWJsZXMgY3VzdG9tIGJhY2tkcm9wIHJlbmRlcmluZy5cbiAgICovXG4gIEJhY2tkcm9wQ29tcG9uZW50OiBQcm9wVHlwZXMuZWxlbWVudFR5cGUsXG5cbiAgLyoqXG4gICAqIFByb3BzIGFwcGxpZWQgdG8gdGhlIFtgQmFja2Ryb3BgXSgvYXBpL2JhY2tkcm9wLykgZWxlbWVudC5cbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIFdoZW4gc2V0IHRvIHRydWUgdGhlIE1vZGFsIHdhaXRzIHVudGlsIGEgbmVzdGVkIFRyYW5zaXRpb24gaXMgY29tcGxldGVkIGJlZm9yZSBjbG9zaW5nLlxuICAgKi9cbiAgY2xvc2VBZnRlclRyYW5zaXRpb246IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBBIEhUTUwgZWxlbWVudCwgY29tcG9uZW50IGluc3RhbmNlLCBvciBmdW5jdGlvbiB0aGF0IHJldHVybnMgZWl0aGVyLlxuICAgKiBUaGUgYGNvbnRhaW5lcmAgd2lsbCBoYXZlIHRoZSBwb3J0YWwgY2hpbGRyZW4gYXBwZW5kZWQgdG8gaXQuXG4gICAqXG4gICAqIEJ5IGRlZmF1bHQsIGl0IHVzZXMgdGhlIGJvZHkgb2YgdGhlIHRvcC1sZXZlbCBkb2N1bWVudCBvYmplY3QsXG4gICAqIHNvIGl0J3Mgc2ltcGx5IGBkb2N1bWVudC5ib2R5YCBtb3N0IG9mIHRoZSB0aW1lLlxuICAgKi9cbiAgY29udGFpbmVyOiBQcm9wVHlwZXNcbiAgLyogQHR5cGVzY3JpcHQtdG8tcHJvcHR5cGVzLWlnbm9yZSAqL1xuICAub25lT2ZUeXBlKFtIVE1MRWxlbWVudFR5cGUsIFByb3BUeXBlcy5pbnN0YW5jZU9mKFJlYWN0LkNvbXBvbmVudCksIFByb3BUeXBlcy5mdW5jXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIHdpbGwgbm90IGF1dG9tYXRpY2FsbHkgc2hpZnQgZm9jdXMgdG8gaXRzZWxmIHdoZW4gaXQgb3BlbnMsIGFuZFxuICAgKiByZXBsYWNlIGl0IHRvIHRoZSBsYXN0IGZvY3VzZWQgZWxlbWVudCB3aGVuIGl0IGNsb3Nlcy5cbiAgICogVGhpcyBhbHNvIHdvcmtzIGNvcnJlY3RseSB3aXRoIGFueSBtb2RhbCBjaGlsZHJlbiB0aGF0IGhhdmUgdGhlIGBkaXNhYmxlQXV0b0ZvY3VzYCBwcm9wLlxuICAgKlxuICAgKiBHZW5lcmFsbHkgdGhpcyBzaG91bGQgbmV2ZXIgYmUgc2V0IHRvIGB0cnVlYCBhcyBpdCBtYWtlcyB0aGUgbW9kYWwgbGVzc1xuICAgKiBhY2Nlc3NpYmxlIHRvIGFzc2lzdGl2ZSB0ZWNobm9sb2dpZXMsIGxpa2Ugc2NyZWVuIHJlYWRlcnMuXG4gICAqL1xuICBkaXNhYmxlQXV0b0ZvY3VzOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCBjbGlja2luZyB0aGUgYmFja2Ryb3Agd2lsbCBub3QgZmlyZSBgb25DbG9zZWAuXG4gICAqL1xuICBkaXNhYmxlQmFja2Ryb3BDbGljazogZGVwcmVjYXRlZFByb3BUeXBlKFByb3BUeXBlcy5ib29sLCAnVXNlIHRoZSBvbkNsb3NlIHByb3Agd2l0aCB0aGUgYHJlYXNvbmAgYXJndW1lbnQgdG8gZmlsdGVyIHRoZSBgYmFja2Ryb3BDbGlja2AgZXZlbnRzLicpLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBtb2RhbCB3aWxsIG5vdCBwcmV2ZW50IGZvY3VzIGZyb20gbGVhdmluZyB0aGUgbW9kYWwgd2hpbGUgb3Blbi5cbiAgICpcbiAgICogR2VuZXJhbGx5IHRoaXMgc2hvdWxkIG5ldmVyIGJlIHNldCB0byBgdHJ1ZWAgYXMgaXQgbWFrZXMgdGhlIG1vZGFsIGxlc3NcbiAgICogYWNjZXNzaWJsZSB0byBhc3Npc3RpdmUgdGVjaG5vbG9naWVzLCBsaWtlIHNjcmVlbiByZWFkZXJzLlxuICAgKi9cbiAgZGlzYWJsZUVuZm9yY2VGb2N1czogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgaGl0dGluZyBlc2NhcGUgd2lsbCBub3QgZmlyZSBgb25DbG9zZWAuXG4gICAqL1xuICBkaXNhYmxlRXNjYXBlS2V5RG93bjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIERpc2FibGUgdGhlIHBvcnRhbCBiZWhhdmlvci5cbiAgICogVGhlIGNoaWxkcmVuIHN0YXkgd2l0aGluIGl0J3MgcGFyZW50IERPTSBoaWVyYXJjaHkuXG4gICAqL1xuICBkaXNhYmxlUG9ydGFsOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgbW9kYWwgd2lsbCBub3QgcmVzdG9yZSBmb2N1cyB0byBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCBvbmNlXG4gICAqIG1vZGFsIGlzIGhpZGRlbi5cbiAgICovXG4gIGRpc2FibGVSZXN0b3JlRm9jdXM6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHRoZSBzY3JvbGwgbG9jayBiZWhhdmlvci5cbiAgICovXG4gIGRpc2FibGVTY3JvbGxMb2NrOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgYmFja2Ryb3AgaXMgbm90IHJlbmRlcmVkLlxuICAgKi9cbiAgaGlkZUJhY2tkcm9wOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQWx3YXlzIGtlZXAgdGhlIGNoaWxkcmVuIGluIHRoZSBET00uXG4gICAqIFRoaXMgcHJvcCBjYW4gYmUgdXNlZnVsIGluIFNFTyBzaXR1YXRpb24gb3JcbiAgICogd2hlbiB5b3Ugd2FudCB0byBtYXhpbWl6ZSB0aGUgcmVzcG9uc2l2ZW5lc3Mgb2YgdGhlIE1vZGFsLlxuICAgKi9cbiAga2VlcE1vdW50ZWQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBtYW5hZ2VyOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBiYWNrZHJvcCBpcyBjbGlja2VkLlxuICAgKi9cbiAgb25CYWNrZHJvcENsaWNrOiBkZXByZWNhdGVkUHJvcFR5cGUoUHJvcFR5cGVzLmZ1bmMsICdVc2UgdGhlIG9uQ2xvc2UgcHJvcCB3aXRoIHRoZSBgcmVhc29uYCBhcmd1bWVudCB0byBoYW5kbGUgdGhlIGBiYWNrZHJvcENsaWNrYCBldmVudHMuJyksXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIHdoZW4gdGhlIGNvbXBvbmVudCByZXF1ZXN0cyB0byBiZSBjbG9zZWQuXG4gICAqIFRoZSBgcmVhc29uYCBwYXJhbWV0ZXIgY2FuIG9wdGlvbmFsbHkgYmUgdXNlZCB0byBjb250cm9sIHRoZSByZXNwb25zZSB0byBgb25DbG9zZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBUaGUgZXZlbnQgc291cmNlIG9mIHRoZSBjYWxsYmFjay5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiBDYW4gYmU6IGBcImVzY2FwZUtleURvd25cImAsIGBcImJhY2tkcm9wQ2xpY2tcImAuXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgd2hlbiB0aGUgZXNjYXBlIGtleSBpcyBwcmVzc2VkLFxuICAgKiBgZGlzYWJsZUVzY2FwZUtleURvd25gIGlzIGZhbHNlIGFuZCB0aGUgbW9kYWwgaXMgaW4gZm9jdXMuXG4gICAqL1xuICBvbkVzY2FwZUtleURvd246IGRlcHJlY2F0ZWRQcm9wVHlwZShQcm9wVHlwZXMuZnVuYywgJ1VzZSB0aGUgb25DbG9zZSBwcm9wIHdpdGggdGhlIGByZWFzb25gIGFyZ3VtZW50IHRvIGhhbmRsZSB0aGUgYGVzY2FwZUtleURvd25gIGV2ZW50cy4nKSxcblxuICAvKipcbiAgICogQ2FsbGJhY2sgZmlyZWQgb25jZSB0aGUgY2hpbGRyZW4gaGFzIGJlZW4gbW91bnRlZCBpbnRvIHRoZSBgY29udGFpbmVyYC5cbiAgICogSXQgc2lnbmFscyB0aGF0IHRoZSBgb3Blbj17dHJ1ZX1gIHByb3AgdG9vayBlZmZlY3QuXG4gICAqXG4gICAqIFRoaXMgcHJvcCB3aWxsIGJlIHJlbW92ZWQgaW4gdjUsIHRoZSByZWYgY2FuIGJlIHVzZWQgaW5zdGVhZC5cbiAgICovXG4gIG9uUmVuZGVyZWQ6IGRlcHJlY2F0ZWRQcm9wVHlwZShQcm9wVHlwZXMuZnVuYywgJ1VzZSB0aGUgcmVmIGluc3RlYWQuJyksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIG1vZGFsIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbC5pc1JlcXVpcmVkXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgTW9kYWw7IiwiZXhwb3J0IGRlZmF1bHQge1xuICBkaXNhYmxlZDogZmFsc2Vcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2VcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQgY29uZmlnIGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHRpbWVvdXRzU2hhcGUgfSBmcm9tICcuL3V0aWxzL1Byb3BUeXBlcyc7XG5pbXBvcnQgVHJhbnNpdGlvbkdyb3VwQ29udGV4dCBmcm9tICcuL1RyYW5zaXRpb25Hcm91cENvbnRleHQnO1xuZXhwb3J0IHZhciBVTk1PVU5URUQgPSAndW5tb3VudGVkJztcbmV4cG9ydCB2YXIgRVhJVEVEID0gJ2V4aXRlZCc7XG5leHBvcnQgdmFyIEVOVEVSSU5HID0gJ2VudGVyaW5nJztcbmV4cG9ydCB2YXIgRU5URVJFRCA9ICdlbnRlcmVkJztcbmV4cG9ydCB2YXIgRVhJVElORyA9ICdleGl0aW5nJztcbi8qKlxuICogVGhlIFRyYW5zaXRpb24gY29tcG9uZW50IGxldHMgeW91IGRlc2NyaWJlIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSBjb21wb25lbnRcbiAqIHN0YXRlIHRvIGFub3RoZXIgX292ZXIgdGltZV8gd2l0aCBhIHNpbXBsZSBkZWNsYXJhdGl2ZSBBUEkuIE1vc3QgY29tbW9ubHlcbiAqIGl0J3MgdXNlZCB0byBhbmltYXRlIHRoZSBtb3VudGluZyBhbmQgdW5tb3VudGluZyBvZiBhIGNvbXBvbmVudCwgYnV0IGNhbiBhbHNvXG4gKiBiZSB1c2VkIHRvIGRlc2NyaWJlIGluLXBsYWNlIHRyYW5zaXRpb24gc3RhdGVzIGFzIHdlbGwuXG4gKlxuICogLS0tXG4gKlxuICogKipOb3RlKio6IGBUcmFuc2l0aW9uYCBpcyBhIHBsYXRmb3JtLWFnbm9zdGljIGJhc2UgY29tcG9uZW50LiBJZiB5b3UncmUgdXNpbmdcbiAqIHRyYW5zaXRpb25zIGluIENTUywgeW91J2xsIHByb2JhYmx5IHdhbnQgdG8gdXNlXG4gKiBbYENTU1RyYW5zaXRpb25gXShodHRwczovL3JlYWN0Y29tbXVuaXR5Lm9yZy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Nzcy10cmFuc2l0aW9uKVxuICogaW5zdGVhZC4gSXQgaW5oZXJpdHMgYWxsIHRoZSBmZWF0dXJlcyBvZiBgVHJhbnNpdGlvbmAsIGJ1dCBjb250YWluc1xuICogYWRkaXRpb25hbCBmZWF0dXJlcyBuZWNlc3NhcnkgdG8gcGxheSBuaWNlIHdpdGggQ1NTIHRyYW5zaXRpb25zIChoZW5jZSB0aGVcbiAqIG5hbWUgb2YgdGhlIGNvbXBvbmVudCkuXG4gKlxuICogLS0tXG4gKlxuICogQnkgZGVmYXVsdCB0aGUgYFRyYW5zaXRpb25gIGNvbXBvbmVudCBkb2VzIG5vdCBhbHRlciB0aGUgYmVoYXZpb3Igb2YgdGhlXG4gKiBjb21wb25lbnQgaXQgcmVuZGVycywgaXQgb25seSB0cmFja3MgXCJlbnRlclwiIGFuZCBcImV4aXRcIiBzdGF0ZXMgZm9yIHRoZVxuICogY29tcG9uZW50cy4gSXQncyB1cCB0byB5b3UgdG8gZ2l2ZSBtZWFuaW5nIGFuZCBlZmZlY3QgdG8gdGhvc2Ugc3RhdGVzLiBGb3JcbiAqIGV4YW1wbGUgd2UgY2FuIGFkZCBzdHlsZXMgdG8gYSBjb21wb25lbnQgd2hlbiBpdCBlbnRlcnMgb3IgZXhpdHM6XG4gKlxuICogYGBganN4XG4gKiBpbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG4gKlxuICogY29uc3QgZHVyYXRpb24gPSAzMDA7XG4gKlxuICogY29uc3QgZGVmYXVsdFN0eWxlID0ge1xuICogICB0cmFuc2l0aW9uOiBgb3BhY2l0eSAke2R1cmF0aW9ufW1zIGVhc2UtaW4tb3V0YCxcbiAqICAgb3BhY2l0eTogMCxcbiAqIH1cbiAqXG4gKiBjb25zdCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICogICBlbnRlcmluZzogeyBvcGFjaXR5OiAxIH0sXG4gKiAgIGVudGVyZWQ6ICB7IG9wYWNpdHk6IDEgfSxcbiAqICAgZXhpdGluZzogIHsgb3BhY2l0eTogMCB9LFxuICogICBleGl0ZWQ6ICB7IG9wYWNpdHk6IDAgfSxcbiAqIH07XG4gKlxuICogY29uc3QgRmFkZSA9ICh7IGluOiBpblByb3AgfSkgPT4gKFxuICogICA8VHJhbnNpdGlvbiBpbj17aW5Qcm9wfSB0aW1lb3V0PXtkdXJhdGlvbn0+XG4gKiAgICAge3N0YXRlID0+IChcbiAqICAgICAgIDxkaXYgc3R5bGU9e3tcbiAqICAgICAgICAgLi4uZGVmYXVsdFN0eWxlLFxuICogICAgICAgICAuLi50cmFuc2l0aW9uU3R5bGVzW3N0YXRlXVxuICogICAgICAgfX0+XG4gKiAgICAgICAgIEknbSBhIGZhZGUgVHJhbnNpdGlvbiFcbiAqICAgICAgIDwvZGl2PlxuICogICAgICl9XG4gKiAgIDwvVHJhbnNpdGlvbj5cbiAqICk7XG4gKiBgYGBcbiAqXG4gKiBUaGVyZSBhcmUgNCBtYWluIHN0YXRlcyBhIFRyYW5zaXRpb24gY2FuIGJlIGluOlxuICogIC0gYCdlbnRlcmluZydgXG4gKiAgLSBgJ2VudGVyZWQnYFxuICogIC0gYCdleGl0aW5nJ2BcbiAqICAtIGAnZXhpdGVkJ2BcbiAqXG4gKiBUcmFuc2l0aW9uIHN0YXRlIGlzIHRvZ2dsZWQgdmlhIHRoZSBgaW5gIHByb3AuIFdoZW4gYHRydWVgIHRoZSBjb21wb25lbnRcbiAqIGJlZ2lucyB0aGUgXCJFbnRlclwiIHN0YWdlLiBEdXJpbmcgdGhpcyBzdGFnZSwgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IGZyb21cbiAqIGl0cyBjdXJyZW50IHRyYW5zaXRpb24gc3RhdGUsIHRvIGAnZW50ZXJpbmcnYCBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoZVxuICogdHJhbnNpdGlvbiBhbmQgdGhlbiB0byB0aGUgYCdlbnRlcmVkJ2Agc3RhZ2Ugb25jZSBpdCdzIGNvbXBsZXRlLiBMZXQncyB0YWtlXG4gKiB0aGUgZm9sbG93aW5nIGV4YW1wbGUgKHdlJ2xsIHVzZSB0aGVcbiAqIFt1c2VTdGF0ZV0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2hvb2tzLXJlZmVyZW5jZS5odG1sI3VzZXN0YXRlKSBob29rKTpcbiAqXG4gKiBgYGBqc3hcbiAqIGZ1bmN0aW9uIEFwcCgpIHtcbiAqICAgY29uc3QgW2luUHJvcCwgc2V0SW5Qcm9wXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAqICAgcmV0dXJuIChcbiAqICAgICA8ZGl2PlxuICogICAgICAgPFRyYW5zaXRpb24gaW49e2luUHJvcH0gdGltZW91dD17NTAwfT5cbiAqICAgICAgICAge3N0YXRlID0+IChcbiAqICAgICAgICAgICAvLyAuLi5cbiAqICAgICAgICAgKX1cbiAqICAgICAgIDwvVHJhbnNpdGlvbj5cbiAqICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gc2V0SW5Qcm9wKHRydWUpfT5cbiAqICAgICAgICAgQ2xpY2sgdG8gRW50ZXJcbiAqICAgICAgIDwvYnV0dG9uPlxuICogICAgIDwvZGl2PlxuICogICApO1xuICogfVxuICogYGBgXG4gKlxuICogV2hlbiB0aGUgYnV0dG9uIGlzIGNsaWNrZWQgdGhlIGNvbXBvbmVudCB3aWxsIHNoaWZ0IHRvIHRoZSBgJ2VudGVyaW5nJ2Agc3RhdGVcbiAqIGFuZCBzdGF5IHRoZXJlIGZvciA1MDBtcyAodGhlIHZhbHVlIG9mIGB0aW1lb3V0YCkgYmVmb3JlIGl0IGZpbmFsbHkgc3dpdGNoZXNcbiAqIHRvIGAnZW50ZXJlZCdgLlxuICpcbiAqIFdoZW4gYGluYCBpcyBgZmFsc2VgIHRoZSBzYW1lIHRoaW5nIGhhcHBlbnMgZXhjZXB0IHRoZSBzdGF0ZSBtb3ZlcyBmcm9tXG4gKiBgJ2V4aXRpbmcnYCB0byBgJ2V4aXRlZCdgLlxuICovXG5cbnZhciBUcmFuc2l0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFRyYW5zaXRpb24sIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRyYW5zaXRpb24ocHJvcHMsIGNvbnRleHQpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbCh0aGlzLCBwcm9wcywgY29udGV4dCkgfHwgdGhpcztcbiAgICB2YXIgcGFyZW50R3JvdXAgPSBjb250ZXh0OyAvLyBJbiB0aGUgY29udGV4dCBvZiBhIFRyYW5zaXRpb25Hcm91cCBhbGwgZW50ZXJzIGFyZSByZWFsbHkgYXBwZWFyc1xuXG4gICAgdmFyIGFwcGVhciA9IHBhcmVudEdyb3VwICYmICFwYXJlbnRHcm91cC5pc01vdW50aW5nID8gcHJvcHMuZW50ZXIgOiBwcm9wcy5hcHBlYXI7XG4gICAgdmFyIGluaXRpYWxTdGF0dXM7XG4gICAgX3RoaXMuYXBwZWFyU3RhdHVzID0gbnVsbDtcblxuICAgIGlmIChwcm9wcy5pbikge1xuICAgICAgaWYgKGFwcGVhcikge1xuICAgICAgICBpbml0aWFsU3RhdHVzID0gRVhJVEVEO1xuICAgICAgICBfdGhpcy5hcHBlYXJTdGF0dXMgPSBFTlRFUklORztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFTlRFUkVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvcHMudW5tb3VudE9uRXhpdCB8fCBwcm9wcy5tb3VudE9uRW50ZXIpIHtcbiAgICAgICAgaW5pdGlhbFN0YXR1cyA9IFVOTU9VTlRFRDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluaXRpYWxTdGF0dXMgPSBFWElURUQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBzdGF0dXM6IGluaXRpYWxTdGF0dXNcbiAgICB9O1xuICAgIF90aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNpdGlvbi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBmdW5jdGlvbiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoX3JlZiwgcHJldlN0YXRlKSB7XG4gICAgdmFyIG5leHRJbiA9IF9yZWYuaW47XG5cbiAgICBpZiAobmV4dEluICYmIHByZXZTdGF0ZS5zdGF0dXMgPT09IFVOTU9VTlRFRCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUocHJldlByb3BzKSB7XG4gIC8vICAgbGV0IG5leHRTdGF0dXMgPSBudWxsXG4gIC8vICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAvLyAgICAgY29uc3QgeyBzdGF0dXMgfSA9IHRoaXMuc3RhdGVcbiAgLy8gICAgIGlmICh0aGlzLnByb3BzLmluKSB7XG4gIC8vICAgICAgIGlmIChzdGF0dXMgIT09IEVOVEVSSU5HICYmIHN0YXR1cyAhPT0gRU5URVJFRCkge1xuICAvLyAgICAgICAgIG5leHRTdGF0dXMgPSBFTlRFUklOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9IGVsc2Uge1xuICAvLyAgICAgICBpZiAoc3RhdHVzID09PSBFTlRFUklORyB8fCBzdGF0dXMgPT09IEVOVEVSRUQpIHtcbiAgLy8gICAgICAgICBuZXh0U3RhdHVzID0gRVhJVElOR1xuICAvLyAgICAgICB9XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiB7IG5leHRTdGF0dXMgfVxuICAvLyB9XG4gIDtcblxuICB2YXIgX3Byb3RvID0gVHJhbnNpdGlvbi5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy51cGRhdGVTdGF0dXModHJ1ZSwgdGhpcy5hcHBlYXJTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIG5leHRTdGF0dXMgPSBudWxsO1xuXG4gICAgaWYgKHByZXZQcm9wcyAhPT0gdGhpcy5wcm9wcykge1xuICAgICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgICBpZiAodGhpcy5wcm9wcy5pbikge1xuICAgICAgICBpZiAoc3RhdHVzICE9PSBFTlRFUklORyAmJiBzdGF0dXMgIT09IEVOVEVSRUQpIHtcbiAgICAgICAgICBuZXh0U3RhdHVzID0gRU5URVJJTkc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdGF0dXMgPT09IEVOVEVSSU5HIHx8IHN0YXR1cyA9PT0gRU5URVJFRCkge1xuICAgICAgICAgIG5leHRTdGF0dXMgPSBFWElUSU5HO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVTdGF0dXMoZmFsc2UsIG5leHRTdGF0dXMpO1xuICB9O1xuXG4gIF9wcm90by5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIHRoaXMuY2FuY2VsTmV4dENhbGxiYWNrKCk7XG4gIH07XG5cbiAgX3Byb3RvLmdldFRpbWVvdXRzID0gZnVuY3Rpb24gZ2V0VGltZW91dHMoKSB7XG4gICAgdmFyIHRpbWVvdXQgPSB0aGlzLnByb3BzLnRpbWVvdXQ7XG4gICAgdmFyIGV4aXQsIGVudGVyLCBhcHBlYXI7XG4gICAgZXhpdCA9IGVudGVyID0gYXBwZWFyID0gdGltZW91dDtcblxuICAgIGlmICh0aW1lb3V0ICE9IG51bGwgJiYgdHlwZW9mIHRpbWVvdXQgIT09ICdudW1iZXInKSB7XG4gICAgICBleGl0ID0gdGltZW91dC5leGl0O1xuICAgICAgZW50ZXIgPSB0aW1lb3V0LmVudGVyOyAvLyBUT0RPOiByZW1vdmUgZmFsbGJhY2sgZm9yIG5leHQgbWFqb3JcblxuICAgICAgYXBwZWFyID0gdGltZW91dC5hcHBlYXIgIT09IHVuZGVmaW5lZCA/IHRpbWVvdXQuYXBwZWFyIDogZW50ZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGV4aXQ6IGV4aXQsXG4gICAgICBlbnRlcjogZW50ZXIsXG4gICAgICBhcHBlYXI6IGFwcGVhclxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnVwZGF0ZVN0YXR1cyA9IGZ1bmN0aW9uIHVwZGF0ZVN0YXR1cyhtb3VudGluZywgbmV4dFN0YXR1cykge1xuICAgIGlmIChtb3VudGluZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtb3VudGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChuZXh0U3RhdHVzICE9PSBudWxsKSB7XG4gICAgICAvLyBuZXh0U3RhdHVzIHdpbGwgYWx3YXlzIGJlIEVOVEVSSU5HIG9yIEVYSVRJTkcuXG4gICAgICB0aGlzLmNhbmNlbE5leHRDYWxsYmFjaygpO1xuXG4gICAgICBpZiAobmV4dFN0YXR1cyA9PT0gRU5URVJJTkcpIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRW50ZXIobW91bnRpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wZXJmb3JtRXhpdCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wcm9wcy51bm1vdW50T25FeGl0ICYmIHRoaXMuc3RhdGUuc3RhdHVzID09PSBFWElURUQpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IFVOTU9VTlRFRFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRW50ZXIgPSBmdW5jdGlvbiBwZXJmb3JtRW50ZXIobW91bnRpbmcpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBlbnRlciA9IHRoaXMucHJvcHMuZW50ZXI7XG4gICAgdmFyIGFwcGVhcmluZyA9IHRoaXMuY29udGV4dCA/IHRoaXMuY29udGV4dC5pc01vdW50aW5nIDogbW91bnRpbmc7XG5cbiAgICB2YXIgX3JlZjIgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyBbYXBwZWFyaW5nXSA6IFtSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKSwgYXBwZWFyaW5nXSxcbiAgICAgICAgbWF5YmVOb2RlID0gX3JlZjJbMF0sXG4gICAgICAgIG1heWJlQXBwZWFyaW5nID0gX3JlZjJbMV07XG5cbiAgICB2YXIgdGltZW91dHMgPSB0aGlzLmdldFRpbWVvdXRzKCk7XG4gICAgdmFyIGVudGVyVGltZW91dCA9IGFwcGVhcmluZyA/IHRpbWVvdXRzLmFwcGVhciA6IHRpbWVvdXRzLmVudGVyOyAvLyBubyBlbnRlciBhbmltYXRpb24gc2tpcCByaWdodCB0byBFTlRFUkVEXG4gICAgLy8gaWYgd2UgYXJlIG1vdW50aW5nIGFuZCBydW5uaW5nIHRoaXMgaXQgbWVhbnMgYXBwZWFyIF9tdXN0XyBiZSBzZXRcblxuICAgIGlmICghbW91bnRpbmcgJiYgIWVudGVyIHx8IGNvbmZpZy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICBzdGF0dXM6IEVOVEVSRURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnByb3BzLm9uRW50ZXJlZChtYXliZU5vZGUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wcm9wcy5vbkVudGVyKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRU5URVJJTkdcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvcHMub25FbnRlcmluZyhtYXliZU5vZGUsIG1heWJlQXBwZWFyaW5nKTtcblxuICAgICAgX3RoaXMyLm9uVHJhbnNpdGlvbkVuZChlbnRlclRpbWVvdXQsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNhZmVTZXRTdGF0ZSh7XG4gICAgICAgICAgc3RhdHVzOiBFTlRFUkVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczIucHJvcHMub25FbnRlcmVkKG1heWJlTm9kZSwgbWF5YmVBcHBlYXJpbmcpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by5wZXJmb3JtRXhpdCA9IGZ1bmN0aW9uIHBlcmZvcm1FeGl0KCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGV4aXQgPSB0aGlzLnByb3BzLmV4aXQ7XG4gICAgdmFyIHRpbWVvdXRzID0gdGhpcy5nZXRUaW1lb3V0cygpO1xuICAgIHZhciBtYXliZU5vZGUgPSB0aGlzLnByb3BzLm5vZGVSZWYgPyB1bmRlZmluZWQgOiBSZWFjdERPTS5maW5kRE9NTm9kZSh0aGlzKTsgLy8gbm8gZXhpdCBhbmltYXRpb24gc2tpcCByaWdodCB0byBFWElURURcblxuICAgIGlmICghZXhpdCB8fCBjb25maWcuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgICAgc3RhdHVzOiBFWElURURcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMzLnByb3BzLm9uRXhpdGVkKG1heWJlTm9kZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnByb3BzLm9uRXhpdChtYXliZU5vZGUpO1xuICAgIHRoaXMuc2FmZVNldFN0YXRlKHtcbiAgICAgIHN0YXR1czogRVhJVElOR1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMy5wcm9wcy5vbkV4aXRpbmcobWF5YmVOb2RlKTtcblxuICAgICAgX3RoaXMzLm9uVHJhbnNpdGlvbkVuZCh0aW1lb3V0cy5leGl0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMy5zYWZlU2V0U3RhdGUoe1xuICAgICAgICAgIHN0YXR1czogRVhJVEVEXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBfdGhpczMucHJvcHMub25FeGl0ZWQobWF5YmVOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uY2FuY2VsTmV4dENhbGxiYWNrID0gZnVuY3Rpb24gY2FuY2VsTmV4dENhbGxiYWNrKCkge1xuICAgIGlmICh0aGlzLm5leHRDYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsKCk7XG4gICAgICB0aGlzLm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zYWZlU2V0U3RhdGUgPSBmdW5jdGlvbiBzYWZlU2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjaykge1xuICAgIC8vIFRoaXMgc2hvdWxkbid0IGJlIG5lY2Vzc2FyeSwgYnV0IHRoZXJlIGFyZSB3ZWlyZCByYWNlIGNvbmRpdGlvbnMgd2l0aFxuICAgIC8vIHNldFN0YXRlIGNhbGxiYWNrcyBhbmQgdW5tb3VudGluZyBpbiB0ZXN0aW5nLCBzbyBhbHdheXMgbWFrZSBzdXJlIHRoYXRcbiAgICAvLyB3ZSBjYW4gY2FuY2VsIGFueSBwZW5kaW5nIHNldFN0YXRlIGNhbGxiYWNrcyBhZnRlciB3ZSB1bm1vdW50LlxuICAgIGNhbGxiYWNrID0gdGhpcy5zZXROZXh0Q2FsbGJhY2soY2FsbGJhY2spO1xuICAgIHRoaXMuc2V0U3RhdGUobmV4dFN0YXRlLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgX3Byb3RvLnNldE5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIHNldE5leHRDYWxsYmFjayhjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGFjdGl2ZSA9IHRydWU7XG5cbiAgICB0aGlzLm5leHRDYWxsYmFjayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgaWYgKGFjdGl2ZSkge1xuICAgICAgICBhY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgX3RoaXM0Lm5leHRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgIGNhbGxiYWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5uZXh0Q2FsbGJhY2suY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgYWN0aXZlID0gZmFsc2U7XG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLm5leHRDYWxsYmFjaztcbiAgfTtcblxuICBfcHJvdG8ub25UcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKHRpbWVvdXQsIGhhbmRsZXIpIHtcbiAgICB0aGlzLnNldE5leHRDYWxsYmFjayhoYW5kbGVyKTtcbiAgICB2YXIgbm9kZSA9IHRoaXMucHJvcHMubm9kZVJlZiA/IHRoaXMucHJvcHMubm9kZVJlZi5jdXJyZW50IDogUmVhY3RET00uZmluZERPTU5vZGUodGhpcyk7XG4gICAgdmFyIGRvZXNOb3RIYXZlVGltZW91dE9yTGlzdGVuZXIgPSB0aW1lb3V0ID09IG51bGwgJiYgIXRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXI7XG5cbiAgICBpZiAoIW5vZGUgfHwgZG9lc05vdEhhdmVUaW1lb3V0T3JMaXN0ZW5lcikge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgMCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIpIHtcbiAgICAgIHZhciBfcmVmMyA9IHRoaXMucHJvcHMubm9kZVJlZiA/IFt0aGlzLm5leHRDYWxsYmFja10gOiBbbm9kZSwgdGhpcy5uZXh0Q2FsbGJhY2tdLFxuICAgICAgICAgIG1heWJlTm9kZSA9IF9yZWYzWzBdLFxuICAgICAgICAgIG1heWJlTmV4dENhbGxiYWNrID0gX3JlZjNbMV07XG5cbiAgICAgIHRoaXMucHJvcHMuYWRkRW5kTGlzdGVuZXIobWF5YmVOb2RlLCBtYXliZU5leHRDYWxsYmFjayk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQgIT0gbnVsbCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLm5leHRDYWxsYmFjaywgdGltZW91dCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIHN0YXR1cyA9IHRoaXMuc3RhdGUuc3RhdHVzO1xuXG4gICAgaWYgKHN0YXR1cyA9PT0gVU5NT1VOVEVEKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF90aGlzJHByb3BzLmNoaWxkcmVuLFxuICAgICAgICBfaW4gPSBfdGhpcyRwcm9wcy5pbixcbiAgICAgICAgX21vdW50T25FbnRlciA9IF90aGlzJHByb3BzLm1vdW50T25FbnRlcixcbiAgICAgICAgX3VubW91bnRPbkV4aXQgPSBfdGhpcyRwcm9wcy51bm1vdW50T25FeGl0LFxuICAgICAgICBfYXBwZWFyID0gX3RoaXMkcHJvcHMuYXBwZWFyLFxuICAgICAgICBfZW50ZXIgPSBfdGhpcyRwcm9wcy5lbnRlcixcbiAgICAgICAgX2V4aXQgPSBfdGhpcyRwcm9wcy5leGl0LFxuICAgICAgICBfdGltZW91dCA9IF90aGlzJHByb3BzLnRpbWVvdXQsXG4gICAgICAgIF9hZGRFbmRMaXN0ZW5lciA9IF90aGlzJHByb3BzLmFkZEVuZExpc3RlbmVyLFxuICAgICAgICBfb25FbnRlciA9IF90aGlzJHByb3BzLm9uRW50ZXIsXG4gICAgICAgIF9vbkVudGVyaW5nID0gX3RoaXMkcHJvcHMub25FbnRlcmluZyxcbiAgICAgICAgX29uRW50ZXJlZCA9IF90aGlzJHByb3BzLm9uRW50ZXJlZCxcbiAgICAgICAgX29uRXhpdCA9IF90aGlzJHByb3BzLm9uRXhpdCxcbiAgICAgICAgX29uRXhpdGluZyA9IF90aGlzJHByb3BzLm9uRXhpdGluZyxcbiAgICAgICAgX29uRXhpdGVkID0gX3RoaXMkcHJvcHMub25FeGl0ZWQsXG4gICAgICAgIF9ub2RlUmVmID0gX3RoaXMkcHJvcHMubm9kZVJlZixcbiAgICAgICAgY2hpbGRQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF90aGlzJHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImluXCIsIFwibW91bnRPbkVudGVyXCIsIFwidW5tb3VudE9uRXhpdFwiLCBcImFwcGVhclwiLCBcImVudGVyXCIsIFwiZXhpdFwiLCBcInRpbWVvdXRcIiwgXCJhZGRFbmRMaXN0ZW5lclwiLCBcIm9uRW50ZXJcIiwgXCJvbkVudGVyaW5nXCIsIFwib25FbnRlcmVkXCIsIFwib25FeGl0XCIsIFwib25FeGl0aW5nXCIsIFwib25FeGl0ZWRcIiwgXCJub2RlUmVmXCJdKTtcblxuICAgIHJldHVybiAoXG4gICAgICAvKiNfX1BVUkVfXyovXG4gICAgICAvLyBhbGxvd3MgZm9yIG5lc3RlZCBUcmFuc2l0aW9uc1xuICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uR3JvdXBDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBudWxsXG4gICAgICB9LCB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbicgPyBjaGlsZHJlbihzdGF0dXMsIGNoaWxkUHJvcHMpIDogUmVhY3QuY2xvbmVFbGVtZW50KFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pLCBjaGlsZFByb3BzKSlcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2l0aW9uO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5UcmFuc2l0aW9uLmNvbnRleHRUeXBlID0gVHJhbnNpdGlvbkdyb3VwQ29udGV4dDtcblRyYW5zaXRpb24ucHJvcFR5cGVzID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8ge1xuICAvKipcbiAgICogQSBSZWFjdCByZWZlcmVuY2UgdG8gRE9NIGVsZW1lbnQgdGhhdCBuZWVkIHRvIHRyYW5zaXRpb246XG4gICAqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTEyNzEzMC80NjcxOTMyXG4gICAqXG4gICAqICAgLSBXaGVuIGBub2RlUmVmYCBwcm9wIGlzIHVzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkIHRvIGNhbGxiYWNrIGZ1bmN0aW9uc1xuICAgKiAgICAgIChlLmcuIGBvbkVudGVyYCkgYmVjYXVzZSB1c2VyIGFscmVhZHkgaGFzIGRpcmVjdCBhY2Nlc3MgdG8gdGhlIG5vZGUuXG4gICAqICAgLSBXaGVuIGNoYW5naW5nIGBrZXlgIHByb3Agb2YgYFRyYW5zaXRpb25gIGluIGEgYFRyYW5zaXRpb25Hcm91cGAgYSBuZXdcbiAgICogICAgIGBub2RlUmVmYCBuZWVkIHRvIGJlIHByb3ZpZGVkIHRvIGBUcmFuc2l0aW9uYCB3aXRoIGNoYW5nZWQgYGtleWAgcHJvcFxuICAgKiAgICAgKHNlZVxuICAgKiAgICAgW3Rlc3QvQ1NTVHJhbnNpdGlvbi10ZXN0LmpzXShodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2Jsb2IvMTM0MzVmODk3YjNhYjcxZjZlMTlkNzI0ZjE0NTU5NmY1OTEwNTgxYy90ZXN0L0NTU1RyYW5zaXRpb24tdGVzdC5qcyNMMzYyLUw0MzcpKS5cbiAgICovXG4gIG5vZGVSZWY6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgY3VycmVudDogdHlwZW9mIEVsZW1lbnQgPT09ICd1bmRlZmluZWQnID8gUHJvcFR5cGVzLmFueSA6IGZ1bmN0aW9uIChwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgICB2YXIgdmFsdWUgPSBwcm9wVmFsdWVba2V5XTtcbiAgICAgIHJldHVybiBQcm9wVHlwZXMuaW5zdGFuY2VPZih2YWx1ZSAmJiAnb3duZXJEb2N1bWVudCcgaW4gdmFsdWUgPyB2YWx1ZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LkVsZW1lbnQgOiBFbGVtZW50KShwcm9wVmFsdWUsIGtleSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KTtcbiAgICB9XG4gIH0pLFxuXG4gIC8qKlxuICAgKiBBIGBmdW5jdGlvbmAgY2hpbGQgY2FuIGJlIHVzZWQgaW5zdGVhZCBvZiBhIFJlYWN0IGVsZW1lbnQuIFRoaXMgZnVuY3Rpb24gaXNcbiAgICogY2FsbGVkIHdpdGggdGhlIGN1cnJlbnQgdHJhbnNpdGlvbiBzdGF0dXMgKGAnZW50ZXJpbmcnYCwgYCdlbnRlcmVkJ2AsXG4gICAqIGAnZXhpdGluZydgLCBgJ2V4aXRlZCdgKSwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gYXBwbHkgY29udGV4dFxuICAgKiBzcGVjaWZpYyBwcm9wcyB0byBhIGNvbXBvbmVudC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIDxUcmFuc2l0aW9uIGluPXt0aGlzLnN0YXRlLmlufSB0aW1lb3V0PXsxNTB9PlxuICAgKiAgIHtzdGF0ZSA9PiAoXG4gICAqICAgICA8TXlDb21wb25lbnQgY2xhc3NOYW1lPXtgZmFkZSBmYWRlLSR7c3RhdGV9YH0gLz5cbiAgICogICApfVxuICAgKiA8L1RyYW5zaXRpb24+XG4gICAqIGBgYFxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsIFByb3BUeXBlcy5lbGVtZW50LmlzUmVxdWlyZWRdKS5pc1JlcXVpcmVkLFxuXG4gIC8qKlxuICAgKiBTaG93IHRoZSBjb21wb25lbnQ7IHRyaWdnZXJzIHRoZSBlbnRlciBvciBleGl0IHN0YXRlc1xuICAgKi9cbiAgaW46IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBCeSBkZWZhdWx0IHRoZSBjaGlsZCBjb21wb25lbnQgaXMgbW91bnRlZCBpbW1lZGlhdGVseSBhbG9uZyB3aXRoXG4gICAqIHRoZSBwYXJlbnQgYFRyYW5zaXRpb25gIGNvbXBvbmVudC4gSWYgeW91IHdhbnQgdG8gXCJsYXp5IG1vdW50XCIgdGhlIGNvbXBvbmVudCBvbiB0aGVcbiAgICogZmlyc3QgYGluPXt0cnVlfWAgeW91IGNhbiBzZXQgYG1vdW50T25FbnRlcmAuIEFmdGVyIHRoZSBmaXJzdCBlbnRlciB0cmFuc2l0aW9uIHRoZSBjb21wb25lbnQgd2lsbCBzdGF5XG4gICAqIG1vdW50ZWQsIGV2ZW4gb24gXCJleGl0ZWRcIiwgdW5sZXNzIHlvdSBhbHNvIHNwZWNpZnkgYHVubW91bnRPbkV4aXRgLlxuICAgKi9cbiAgbW91bnRPbkVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IHN0YXlzIG1vdW50ZWQgYWZ0ZXIgaXQgcmVhY2hlcyB0aGUgYCdleGl0ZWQnYCBzdGF0ZS5cbiAgICogU2V0IGB1bm1vdW50T25FeGl0YCBpZiB5b3UnZCBwcmVmZXIgdG8gdW5tb3VudCB0aGUgY29tcG9uZW50IGFmdGVyIGl0IGZpbmlzaGVzIGV4aXRpbmcuXG4gICAqL1xuICB1bm1vdW50T25FeGl0OiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogQnkgZGVmYXVsdCB0aGUgY2hpbGQgY29tcG9uZW50IGRvZXMgbm90IHBlcmZvcm0gdGhlIGVudGVyIHRyYW5zaXRpb24gd2hlblxuICAgKiBpdCBmaXJzdCBtb3VudHMsIHJlZ2FyZGxlc3Mgb2YgdGhlIHZhbHVlIG9mIGBpbmAuIElmIHlvdSB3YW50IHRoaXNcbiAgICogYmVoYXZpb3IsIHNldCBib3RoIGBhcHBlYXJgIGFuZCBgaW5gIHRvIGB0cnVlYC5cbiAgICpcbiAgICogPiAqKk5vdGUqKjogdGhlcmUgYXJlIG5vIHNwZWNpYWwgYXBwZWFyIHN0YXRlcyBsaWtlIGBhcHBlYXJpbmdgL2BhcHBlYXJlZGAsIHRoaXMgcHJvcFxuICAgKiA+IG9ubHkgYWRkcyBhbiBhZGRpdGlvbmFsIGVudGVyIHRyYW5zaXRpb24uIEhvd2V2ZXIsIGluIHRoZVxuICAgKiA+IGA8Q1NTVHJhbnNpdGlvbj5gIGNvbXBvbmVudCB0aGF0IGZpcnN0IGVudGVyIHRyYW5zaXRpb24gZG9lcyByZXN1bHQgaW5cbiAgICogPiBhZGRpdGlvbmFsIGAuYXBwZWFyLSpgIGNsYXNzZXMsIHRoYXQgd2F5IHlvdSBjYW4gY2hvb3NlIHRvIHN0eWxlIGl0XG4gICAqID4gZGlmZmVyZW50bHkuXG4gICAqL1xuICBhcHBlYXI6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBFbmFibGUgb3IgZGlzYWJsZSBlbnRlciB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGVudGVyOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogRW5hYmxlIG9yIGRpc2FibGUgZXhpdCB0cmFuc2l0aW9ucy5cbiAgICovXG4gIGV4aXQ6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24sIGluIG1pbGxpc2Vjb25kcy5cbiAgICogUmVxdWlyZWQgdW5sZXNzIGBhZGRFbmRMaXN0ZW5lcmAgaXMgcHJvdmlkZWQuXG4gICAqXG4gICAqIFlvdSBtYXkgc3BlY2lmeSBhIHNpbmdsZSB0aW1lb3V0IGZvciBhbGwgdHJhbnNpdGlvbnM6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXs1MDB9XG4gICAqIGBgYFxuICAgKlxuICAgKiBvciBpbmRpdmlkdWFsbHk6XG4gICAqXG4gICAqIGBgYGpzeFxuICAgKiB0aW1lb3V0PXt7XG4gICAqICBhcHBlYXI6IDUwMCxcbiAgICogIGVudGVyOiAzMDAsXG4gICAqICBleGl0OiA1MDAsXG4gICAqIH19XG4gICAqIGBgYFxuICAgKlxuICAgKiAtIGBhcHBlYXJgIGRlZmF1bHRzIHRvIHRoZSB2YWx1ZSBvZiBgZW50ZXJgXG4gICAqIC0gYGVudGVyYCBkZWZhdWx0cyB0byBgMGBcbiAgICogLSBgZXhpdGAgZGVmYXVsdHMgdG8gYDBgXG4gICAqXG4gICAqIEB0eXBlIHtudW1iZXIgfCB7IGVudGVyPzogbnVtYmVyLCBleGl0PzogbnVtYmVyLCBhcHBlYXI/OiBudW1iZXIgfX1cbiAgICovXG4gIHRpbWVvdXQ6IGZ1bmN0aW9uIHRpbWVvdXQocHJvcHMpIHtcbiAgICB2YXIgcHQgPSB0aW1lb3V0c1NoYXBlO1xuICAgIGlmICghcHJvcHMuYWRkRW5kTGlzdGVuZXIpIHB0ID0gcHQuaXNSZXF1aXJlZDtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBwdC5hcHBseSh2b2lkIDAsIFtwcm9wc10uY29uY2F0KGFyZ3MpKTtcbiAgfSxcblxuICAvKipcbiAgICogQWRkIGEgY3VzdG9tIHRyYW5zaXRpb24gZW5kIHRyaWdnZXIuIENhbGxlZCB3aXRoIHRoZSB0cmFuc2l0aW9uaW5nXG4gICAqIERPTSBub2RlIGFuZCBhIGBkb25lYCBjYWxsYmFjay4gQWxsb3dzIGZvciBtb3JlIGZpbmUgZ3JhaW5lZCB0cmFuc2l0aW9uIGVuZFxuICAgKiBsb2dpYy4gVGltZW91dHMgYXJlIHN0aWxsIHVzZWQgYXMgYSBmYWxsYmFjayBpZiBwcm92aWRlZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogYGBganN4XG4gICAqIGFkZEVuZExpc3RlbmVyPXsobm9kZSwgZG9uZSkgPT4ge1xuICAgKiAgIC8vIHVzZSB0aGUgY3NzIHRyYW5zaXRpb25lbmQgZXZlbnQgdG8gbWFyayB0aGUgZmluaXNoIG9mIGEgdHJhbnNpdGlvblxuICAgKiAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGRvbmUsIGZhbHNlKTtcbiAgICogfX1cbiAgICogYGBgXG4gICAqL1xuICBhZGRFbmRMaXN0ZW5lcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJlbnRlcmluZ1wiIHN0YXR1cyBpcyBhcHBsaWVkLiBBbiBleHRyYSBwYXJhbWV0ZXJcbiAgICogYGlzQXBwZWFyaW5nYCBpcyBzdXBwbGllZCB0byBpbmRpY2F0ZSBpZiB0aGUgZW50ZXIgc3RhZ2UgaXMgb2NjdXJyaW5nIG9uIHRoZSBpbml0aWFsIG1vdW50XG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50LCBpc0FwcGVhcmluZzogYm9vbCkgLT4gdm9pZFxuICAgKi9cbiAgb25FbnRlcjogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyaW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuIEFuIGV4dHJhIHBhcmFtZXRlclxuICAgKiBgaXNBcHBlYXJpbmdgIGlzIHN1cHBsaWVkIHRvIGluZGljYXRlIGlmIHRoZSBlbnRlciBzdGFnZSBpcyBvY2N1cnJpbmcgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZC5cbiAgICpcbiAgICogQHR5cGUgRnVuY3Rpb24obm9kZTogSHRtbEVsZW1lbnQsIGlzQXBwZWFyaW5nOiBib29sKVxuICAgKi9cbiAgb25FbnRlcmluZzogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGFmdGVyIHRoZSBcImVudGVyZWRcIiBzdGF0dXMgaXMgYXBwbGllZC4gQW4gZXh0cmEgcGFyYW1ldGVyXG4gICAqIGBpc0FwcGVhcmluZ2AgaXMgc3VwcGxpZWQgdG8gaW5kaWNhdGUgaWYgdGhlIGVudGVyIHN0YWdlIGlzIG9jY3VycmluZyBvbiB0aGUgaW5pdGlhbCBtb3VudFxuICAgKlxuICAgKiAqKk5vdGUqKjogd2hlbiBgbm9kZVJlZmAgcHJvcCBpcyBwYXNzZWQsIGBub2RlYCBpcyBub3QgcGFzc2VkLlxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCwgaXNBcHBlYXJpbmc6IGJvb2wpIC0+IHZvaWRcbiAgICovXG4gIG9uRW50ZXJlZDogUHJvcFR5cGVzLmZ1bmMsXG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIGZpcmVkIGJlZm9yZSB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0aW5nXCIgc3RhdHVzIGlzIGFwcGxpZWQuXG4gICAqXG4gICAqICoqTm90ZSoqOiB3aGVuIGBub2RlUmVmYCBwcm9wIGlzIHBhc3NlZCwgYG5vZGVgIGlzIG5vdCBwYXNzZWQuXG4gICAqXG4gICAqIEB0eXBlIEZ1bmN0aW9uKG5vZGU6IEh0bWxFbGVtZW50KSAtPiB2b2lkXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCBhZnRlciB0aGUgXCJleGl0ZWRcIiBzdGF0dXMgaXMgYXBwbGllZC5cbiAgICpcbiAgICogKipOb3RlKio6IHdoZW4gYG5vZGVSZWZgIHByb3AgaXMgcGFzc2VkLCBgbm9kZWAgaXMgbm90IHBhc3NlZFxuICAgKlxuICAgKiBAdHlwZSBGdW5jdGlvbihub2RlOiBIdG1sRWxlbWVudCkgLT4gdm9pZFxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jXG59IDoge307IC8vIE5hbWUgdGhlIGZ1bmN0aW9uIHNvIGl0IGlzIGNsZWFyZXIgaW4gdGhlIGRvY3VtZW50YXRpb25cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cblRyYW5zaXRpb24uZGVmYXVsdFByb3BzID0ge1xuICBpbjogZmFsc2UsXG4gIG1vdW50T25FbnRlcjogZmFsc2UsXG4gIHVubW91bnRPbkV4aXQ6IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgb25FbnRlcjogbm9vcCxcbiAgb25FbnRlcmluZzogbm9vcCxcbiAgb25FbnRlcmVkOiBub29wLFxuICBvbkV4aXQ6IG5vb3AsXG4gIG9uRXhpdGluZzogbm9vcCxcbiAgb25FeGl0ZWQ6IG5vb3Bcbn07XG5UcmFuc2l0aW9uLlVOTU9VTlRFRCA9IFVOTU9VTlRFRDtcblRyYW5zaXRpb24uRVhJVEVEID0gRVhJVEVEO1xuVHJhbnNpdGlvbi5FTlRFUklORyA9IEVOVEVSSU5HO1xuVHJhbnNpdGlvbi5FTlRFUkVEID0gRU5URVJFRDtcblRyYW5zaXRpb24uRVhJVElORyA9IEVYSVRJTkc7XG5leHBvcnQgZGVmYXVsdCBUcmFuc2l0aW9uOyIsImltcG9ydCB7IHVzZVRoZW1lIGFzIHVzZVRoZW1lV2l0aG91dERlZmF1bHQgfSBmcm9tICdAbWF0ZXJpYWwtdWkvc3R5bGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVmYXVsdFRoZW1lIGZyb20gJy4vZGVmYXVsdFRoZW1lJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRoZW1lKCkge1xuICB2YXIgdGhlbWUgPSB1c2VUaGVtZVdpdGhvdXREZWZhdWx0KCkgfHwgZGVmYXVsdFRoZW1lO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlRGVidWdWYWx1ZSh0aGVtZSk7XG4gIH1cblxuICByZXR1cm4gdGhlbWU7XG59IiwiZXhwb3J0IHZhciByZWZsb3cgPSBmdW5jdGlvbiByZWZsb3cobm9kZSkge1xuICByZXR1cm4gbm9kZS5zY3JvbGxUb3A7XG59O1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRyYW5zaXRpb25Qcm9wcyhwcm9wcywgb3B0aW9ucykge1xuICB2YXIgdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICBfcHJvcHMkc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICAgIHN0eWxlID0gX3Byb3BzJHN0eWxlID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRzdHlsZTtcbiAgcmV0dXJuIHtcbiAgICBkdXJhdGlvbjogc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uIHx8IHR5cGVvZiB0aW1lb3V0ID09PSAnbnVtYmVyJyA/IHRpbWVvdXQgOiB0aW1lb3V0W29wdGlvbnMubW9kZV0gfHwgMCxcbiAgICBkZWxheTogc3R5bGUudHJhbnNpdGlvbkRlbGF5XG4gIH07XG59IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXlcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgVHJhbnNpdGlvbiB9IGZyb20gJ3JlYWN0LXRyYW5zaXRpb24tZ3JvdXAnO1xuaW1wb3J0IHsgZHVyYXRpb24gfSBmcm9tICcuLi9zdHlsZXMvdHJhbnNpdGlvbnMnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xudmFyIHN0eWxlcyA9IHtcbiAgZW50ZXJpbmc6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH0sXG4gIGVudGVyZWQ6IHtcbiAgICBvcGFjaXR5OiAxXG4gIH1cbn07XG52YXIgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIEZhZGUgdHJhbnNpdGlvbiBpcyB1c2VkIGJ5IHRoZSBbTW9kYWxdKC9jb21wb25lbnRzL21vZGFsLykgY29tcG9uZW50LlxuICogSXQgdXNlcyBbcmVhY3QtdHJhbnNpdGlvbi1ncm91cF0oaHR0cHM6Ly9naXRodWIuY29tL3JlYWN0anMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cCkgaW50ZXJuYWxseS5cbiAqL1xuXG52YXIgRmFkZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIEZhZGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXNhYmxlU3RyaWN0TSA9IHByb3BzLmRpc2FibGVTdHJpY3RNb2RlQ29tcGF0LFxuICAgICAgZGlzYWJsZVN0cmljdE1vZGVDb21wYXQgPSBfcHJvcHMkZGlzYWJsZVN0cmljdE0gPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGRpc2FibGVTdHJpY3RNLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gVHJhbnNpdGlvbiA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIF9wcm9wcyR0aW1lb3V0ID0gcHJvcHMudGltZW91dCxcbiAgICAgIHRpbWVvdXQgPSBfcHJvcHMkdGltZW91dCA9PT0gdm9pZCAwID8gZGVmYXVsdFRpbWVvdXQgOiBfcHJvcHMkdGltZW91dCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImRpc2FibGVTdHJpY3RNb2RlQ29tcGF0XCIsIFwiaW5cIiwgXCJvbkVudGVyXCIsIFwib25FbnRlcmVkXCIsIFwib25FbnRlcmluZ1wiLCBcIm9uRXhpdFwiLCBcIm9uRXhpdGVkXCIsIFwib25FeGl0aW5nXCIsIFwic3R5bGVcIiwgXCJUcmFuc2l0aW9uQ29tcG9uZW50XCIsIFwidGltZW91dFwiXSk7XG5cbiAgdmFyIHRoZW1lID0gdXNlVGhlbWUoKTtcbiAgdmFyIGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPSB0aGVtZS51bnN0YWJsZV9zdHJpY3RNb2RlICYmICFkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDtcbiAgdmFyIG5vZGVSZWYgPSBSZWFjdC51c2VSZWYobnVsbCk7XG4gIHZhciBmb3JlaWduUmVmID0gdXNlRm9ya1JlZihjaGlsZHJlbi5yZWYsIHJlZik7XG4gIHZhciBoYW5kbGVSZWYgPSB1c2VGb3JrUmVmKGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLCBmb3JlaWduUmVmKTtcblxuICB2YXIgbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soY2FsbGJhY2spIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmcpIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3JlZiA9IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBbbm9kZVJlZi5jdXJyZW50LCBub2RlT3JBcHBlYXJpbmddIDogW25vZGVPckFwcGVhcmluZywgbWF5YmVBcHBlYXJpbmddLFxuICAgICAgICAgICAgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgICAgIG5vZGUgPSBfcmVmMlswXSxcbiAgICAgICAgICAgIGlzQXBwZWFyaW5nID0gX3JlZjJbMV07IC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuXG5cbiAgICAgICAgaWYgKGlzQXBwZWFyaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9O1xuXG4gIHZhciBoYW5kbGVFbnRlcmluZyA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FbnRlcmluZyk7XG4gIHZhciBoYW5kbGVFbnRlciA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUsIGlzQXBwZWFyaW5nKSB7XG4gICAgcmVmbG93KG5vZGUpOyAvLyBTbyB0aGUgYW5pbWF0aW9uIGFsd2F5cyBzdGFydCBmcm9tIHRoZSBzdGFydC5cblxuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdGltZW91dDogdGltZW91dFxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICBpZiAob25FbnRlcikge1xuICAgICAgb25FbnRlcihub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXRcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ29wYWNpdHknLCB0cmFuc2l0aW9uUHJvcHMpO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9IHRoZW1lLnRyYW5zaXRpb25zLmNyZWF0ZSgnb3BhY2l0eScsIHRyYW5zaXRpb25Qcm9wcyk7XG5cbiAgICBpZiAob25FeGl0KSB7XG4gICAgICBvbkV4aXQobm9kZSk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUV4aXRlZCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sob25FeGl0ZWQpO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGFwcGVhcjogdHJ1ZSxcbiAgICBpbjogaW5Qcm9wLFxuICAgIG5vZGVSZWY6IGVuYWJsZVN0cmljdE1vZGVDb21wYXQgPyBub2RlUmVmIDogdW5kZWZpbmVkLFxuICAgIG9uRW50ZXI6IGhhbmRsZUVudGVyLFxuICAgIG9uRW50ZXJlZDogaGFuZGxlRW50ZXJlZCxcbiAgICBvbkVudGVyaW5nOiBoYW5kbGVFbnRlcmluZyxcbiAgICBvbkV4aXQ6IGhhbmRsZUV4aXQsXG4gICAgb25FeGl0ZWQ6IGhhbmRsZUV4aXRlZCxcbiAgICBvbkV4aXRpbmc6IGhhbmRsZUV4aXRpbmcsXG4gICAgdGltZW91dDogdGltZW91dFxuICB9LCBvdGhlciksIGZ1bmN0aW9uIChzdGF0ZSwgY2hpbGRQcm9wcykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkcmVuLCBfZXh0ZW5kcyh7XG4gICAgICBzdHlsZTogX2V4dGVuZHMoe1xuICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICB2aXNpYmlsaXR5OiBzdGF0ZSA9PT0gJ2V4aXRlZCcgJiYgIWluUHJvcCA/ICdoaWRkZW4nIDogdW5kZWZpbmVkXG4gICAgICB9LCBzdHlsZXNbc3RhdGVdLCBzdHlsZSwgY2hpbGRyZW4ucHJvcHMuc3R5bGUpLFxuICAgICAgcmVmOiBoYW5kbGVSZWZcbiAgICB9LCBjaGlsZFByb3BzKSk7XG4gIH0pO1xufSk7XG5wcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBGYWRlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMuZWxlbWVudCxcblxuICAvKipcbiAgICogRW5hYmxlIHRoaXMgcHJvcCBpZiB5b3UgZW5jb3VudGVyICdGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzJyxcbiAgICogdXNlIGB1bnN0YWJsZV9jcmVhdGVTdHJpY3RNb2RlVGhlbWVgLFxuICAgKiBhbmQgY2FuJ3QgZm9yd2FyZCB0aGUgcmVmIGluIHRoZSBjaGlsZCBjb21wb25lbnQuXG4gICAqL1xuICBkaXNhYmxlU3RyaWN0TW9kZUNvbXBhdDogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGNvbXBvbmVudCB3aWxsIHRyYW5zaXRpb24gaW4uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBGYWRlOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNcIjtcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgY2xzeCBmcm9tICdjbHN4JztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBGYWRlIGZyb20gJy4uL0ZhZGUnO1xuZXhwb3J0IHZhciBzdHlsZXMgPSB7XG4gIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQuICovXG4gIHJvb3Q6IHtcbiAgICAvLyBJbXByb3ZlIHNjcm9sbGFibGUgZGlhbG9nIHN1cHBvcnQuXG4gICAgekluZGV4OiAtMSxcbiAgICBwb3NpdGlvbjogJ2ZpeGVkJyxcbiAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMCxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsIDAsIDAsIDAuNSknLFxuICAgIFdlYmtpdFRhcEhpZ2hsaWdodENvbG9yOiAndHJhbnNwYXJlbnQnXG4gIH0sXG5cbiAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudCBpZiBgaW52aXNpYmxlPXt0cnVlfWAuICovXG4gIGludmlzaWJsZToge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50J1xuICB9XG59O1xudmFyIEJhY2tkcm9wID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gQmFja2Ryb3AocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGNsYXNzZXMgPSBwcm9wcy5jbGFzc2VzLFxuICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgX3Byb3BzJGludmlzaWJsZSA9IHByb3BzLmludmlzaWJsZSxcbiAgICAgIGludmlzaWJsZSA9IF9wcm9wcyRpbnZpc2libGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3Byb3BzJGludmlzaWJsZSxcbiAgICAgIG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uID0gcHJvcHMudHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgICAgX3Byb3BzJFRyYW5zaXRpb25Db21wID0gcHJvcHMuVHJhbnNpdGlvbkNvbXBvbmVudCxcbiAgICAgIFRyYW5zaXRpb25Db21wb25lbnQgPSBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPT09IHZvaWQgMCA/IEZhZGUgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiY2hpbGRyZW5cIiwgXCJjbGFzc2VzXCIsIFwiY2xhc3NOYW1lXCIsIFwiaW52aXNpYmxlXCIsIFwib3BlblwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl0pO1xuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgaW46IG9wZW4sXG4gICAgdGltZW91dDogdHJhbnNpdGlvbkR1cmF0aW9uXG4gIH0sIG90aGVyKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogY2xzeChjbGFzc2VzLnJvb3QsIGNsYXNzTmFtZSwgaW52aXNpYmxlICYmIGNsYXNzZXMuaW52aXNpYmxlKSxcbiAgICBcImFyaWEtaGlkZGVuXCI6IHRydWUsXG4gICAgcmVmOiByZWZcbiAgfSwgY2hpbGRyZW4pKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gQmFja2Ryb3AucHJvcFR5cGVzID0ge1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBXYXJuaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIHwgVGhlc2UgUHJvcFR5cGVzIGFyZSBnZW5lcmF0ZWQgZnJvbSB0aGUgVHlwZVNjcmlwdCB0eXBlIGRlZmluaXRpb25zIHxcbiAgLy8gfCAgICAgVG8gdXBkYXRlIHRoZW0gZWRpdCB0aGUgZC50cyBmaWxlIGFuZCBydW4gXCJ5YXJuIHByb3B0eXBlc1wiICAgICB8XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKipcbiAgICogVGhlIGNvbnRlbnQgb2YgdGhlIGNvbXBvbmVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcblxuICAvKipcbiAgICogT3ZlcnJpZGUgb3IgZXh0ZW5kIHRoZSBzdHlsZXMgYXBwbGllZCB0byB0aGUgY29tcG9uZW50LlxuICAgKiBTZWUgW0NTUyBBUEldKCNjc3MpIGJlbG93IGZvciBtb3JlIGRldGFpbHMuXG4gICAqL1xuICBjbGFzc2VzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgdGhlIGJhY2tkcm9wIGlzIGludmlzaWJsZS5cbiAgICogSXQgY2FuIGJlIHVzZWQgd2hlbiByZW5kZXJpbmcgYSBwb3BvdmVyIG9yIGEgY3VzdG9tIHNlbGVjdCBjb21wb25lbnQuXG4gICAqL1xuICBpbnZpc2libGU6IFByb3BUeXBlcy5ib29sLFxuXG4gIC8qKlxuICAgKiBJZiBgdHJ1ZWAsIHRoZSBiYWNrZHJvcCBpcyBvcGVuLlxuICAgKi9cbiAgb3BlbjogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKVxufSA6IHZvaWQgMDtcbmV4cG9ydCBkZWZhdWx0IHdpdGhTdHlsZXMoc3R5bGVzLCB7XG4gIG5hbWU6ICdNdWlCYWNrZHJvcCdcbn0pKEJhY2tkcm9wKTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICcuLi91dGlscy9kZWJvdW5jZSc7XG5pbXBvcnQgeyBUcmFuc2l0aW9uIH0gZnJvbSAncmVhY3QtdHJhbnNpdGlvbi1ncm91cCc7XG5pbXBvcnQgeyBlbGVtZW50QWNjZXB0aW5nUmVmIH0gZnJvbSAnQG1hdGVyaWFsLXVpL3V0aWxzJztcbmltcG9ydCB1c2VGb3JrUmVmIGZyb20gJy4uL3V0aWxzL3VzZUZvcmtSZWYnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3N0eWxlcy91c2VUaGVtZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgeyByZWZsb3csIGdldFRyYW5zaXRpb25Qcm9wcyB9IGZyb20gJy4uL3RyYW5zaXRpb25zL3V0aWxzJzsgLy8gVHJhbnNsYXRlIHRoZSBub2RlIHNvIGhlIGNhbid0IGJlIHNlZW4gb24gdGhlIHNjcmVlbi5cbi8vIExhdGVyLCB3ZSBnb25uYSB0cmFuc2xhdGUgYmFjayB0aGUgbm9kZSB0byBoaXMgb3JpZ2luYWwgbG9jYXRpb25cbi8vIHdpdGggYG5vbmVgLmBcblxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlVmFsdWUoZGlyZWN0aW9uLCBub2RlKSB7XG4gIHZhciByZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIHRyYW5zZm9ybTtcblxuICBpZiAobm9kZS5mYWtlVHJhbnNmb3JtKSB7XG4gICAgdHJhbnNmb3JtID0gbm9kZS5mYWtlVHJhbnNmb3JtO1xuICB9IGVsc2Uge1xuICAgIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgdHJhbnNmb3JtID0gY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCctd2Via2l0LXRyYW5zZm9ybScpIHx8IGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJyk7XG4gIH1cblxuICB2YXIgb2Zmc2V0WCA9IDA7XG4gIHZhciBvZmZzZXRZID0gMDtcblxuICBpZiAodHJhbnNmb3JtICYmIHRyYW5zZm9ybSAhPT0gJ25vbmUnICYmIHR5cGVvZiB0cmFuc2Zvcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHRyYW5zZm9ybVZhbHVlcyA9IHRyYW5zZm9ybS5zcGxpdCgnKCcpWzFdLnNwbGl0KCcpJylbMF0uc3BsaXQoJywnKTtcbiAgICBvZmZzZXRYID0gcGFyc2VJbnQodHJhbnNmb3JtVmFsdWVzWzRdLCAxMCk7XG4gICAgb2Zmc2V0WSA9IHBhcnNlSW50KHRyYW5zZm9ybVZhbHVlc1s1XSwgMTApO1xuICB9XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ2xlZnQnKSB7XG4gICAgcmV0dXJuIFwidHJhbnNsYXRlWChcIi5jb25jYXQod2luZG93LmlubmVyV2lkdGgsIFwicHgpIHRyYW5zbGF0ZVgoXCIpLmNvbmNhdChvZmZzZXRYIC0gcmVjdC5sZWZ0LCBcInB4KVwiKTtcbiAgfVxuXG4gIGlmIChkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICByZXR1cm4gXCJ0cmFuc2xhdGVYKC1cIi5jb25jYXQocmVjdC5sZWZ0ICsgcmVjdC53aWR0aCAtIG9mZnNldFgsIFwicHgpXCIpO1xuICB9XG5cbiAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgIHJldHVybiBcInRyYW5zbGF0ZVkoXCIuY29uY2F0KHdpbmRvdy5pbm5lckhlaWdodCwgXCJweCkgdHJhbnNsYXRlWShcIikuY29uY2F0KG9mZnNldFkgLSByZWN0LnRvcCwgXCJweClcIik7XG4gIH0gLy8gZGlyZWN0aW9uID09PSAnZG93bidcblxuXG4gIHJldHVybiBcInRyYW5zbGF0ZVkoLVwiLmNvbmNhdChyZWN0LnRvcCArIHJlY3QuaGVpZ2h0IC0gb2Zmc2V0WSwgXCJweClcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpIHtcbiAgdmFyIHRyYW5zZm9ybSA9IGdldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgbm9kZSk7XG5cbiAgaWYgKHRyYW5zZm9ybSkge1xuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgIG5vZGUuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICB9XG59XG52YXIgZGVmYXVsdFRpbWVvdXQgPSB7XG4gIGVudGVyOiBkdXJhdGlvbi5lbnRlcmluZ1NjcmVlbixcbiAgZXhpdDogZHVyYXRpb24ubGVhdmluZ1NjcmVlblxufTtcbi8qKlxuICogVGhlIFNsaWRlIHRyYW5zaXRpb24gaXMgdXNlZCBieSB0aGUgW0RyYXdlcl0oL2NvbXBvbmVudHMvZHJhd2Vycy8pIGNvbXBvbmVudC5cbiAqIEl0IHVzZXMgW3JlYWN0LXRyYW5zaXRpb24tZ3JvdXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXRyYW5zaXRpb24tZ3JvdXApIGludGVybmFsbHkuXG4gKi9cblxudmFyIFNsaWRlID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gU2xpZGUocHJvcHMsIHJlZikge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIF9wcm9wcyRkaXJlY3Rpb24gPSBwcm9wcy5kaXJlY3Rpb24sXG4gICAgICBkaXJlY3Rpb24gPSBfcHJvcHMkZGlyZWN0aW9uID09PSB2b2lkIDAgPyAnZG93bicgOiBfcHJvcHMkZGlyZWN0aW9uLFxuICAgICAgaW5Qcm9wID0gcHJvcHMuaW4sXG4gICAgICBvbkVudGVyID0gcHJvcHMub25FbnRlcixcbiAgICAgIG9uRW50ZXJlZCA9IHByb3BzLm9uRW50ZXJlZCxcbiAgICAgIG9uRW50ZXJpbmcgPSBwcm9wcy5vbkVudGVyaW5nLFxuICAgICAgb25FeGl0ID0gcHJvcHMub25FeGl0LFxuICAgICAgb25FeGl0ZWQgPSBwcm9wcy5vbkV4aXRlZCxcbiAgICAgIG9uRXhpdGluZyA9IHByb3BzLm9uRXhpdGluZyxcbiAgICAgIHN0eWxlID0gcHJvcHMuc3R5bGUsXG4gICAgICBfcHJvcHMkdGltZW91dCA9IHByb3BzLnRpbWVvdXQsXG4gICAgICB0aW1lb3V0ID0gX3Byb3BzJHRpbWVvdXQgPT09IHZvaWQgMCA/IGRlZmF1bHRUaW1lb3V0IDogX3Byb3BzJHRpbWVvdXQsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gVHJhbnNpdGlvbiA6IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCxcbiAgICAgIG90aGVyID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBbXCJjaGlsZHJlblwiLCBcImRpcmVjdGlvblwiLCBcImluXCIsIFwib25FbnRlclwiLCBcIm9uRW50ZXJlZFwiLCBcIm9uRW50ZXJpbmdcIiwgXCJvbkV4aXRcIiwgXCJvbkV4aXRlZFwiLCBcIm9uRXhpdGluZ1wiLCBcInN0eWxlXCIsIFwidGltZW91dFwiLCBcIlRyYW5zaXRpb25Db21wb25lbnRcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7XG4gIHZhciBjaGlsZHJlblJlZiA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgLyoqXG4gICAqIHVzZWQgaW4gY2xvbmVFbGVtZW50KGNoaWxkcmVuLCB7IHJlZjogaGFuZGxlUmVmIH0pXG4gICAqL1xuXG4gIHZhciBoYW5kbGVPd25SZWYgPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAvLyAjU3RyaWN0TW9kZSByZWFkeVxuICAgIGNoaWxkcmVuUmVmLmN1cnJlbnQgPSBSZWFjdERPTS5maW5kRE9NTm9kZShpbnN0YW5jZSk7XG4gIH0sIFtdKTtcbiAgdmFyIGhhbmRsZVJlZkludGVybWVkaWFyeSA9IHVzZUZvcmtSZWYoY2hpbGRyZW4ucmVmLCBoYW5kbGVPd25SZWYpO1xuICB2YXIgaGFuZGxlUmVmID0gdXNlRm9ya1JlZihoYW5kbGVSZWZJbnRlcm1lZGlhcnksIHJlZik7XG5cbiAgdmFyIG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpc0FwcGVhcmluZykge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIC8vIG9uRW50ZXJYeHggYW5kIG9uRXhpdFh4eCBjYWxsYmFja3MgaGF2ZSBhIGRpZmZlcmVudCBhcmd1bWVudHMubGVuZ3RoIHZhbHVlLlxuICAgICAgICBpZiAoaXNBcHBlYXJpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbGxiYWNrKGNoaWxkcmVuUmVmLmN1cnJlbnQsIGlzQXBwZWFyaW5nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgdmFyIGhhbmRsZUVudGVyID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhmdW5jdGlvbiAobm9kZSwgaXNBcHBlYXJpbmcpIHtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpO1xuICAgIHJlZmxvdyhub2RlKTtcblxuICAgIGlmIChvbkVudGVyKSB7XG4gICAgICBvbkVudGVyKG5vZGUsIGlzQXBwZWFyaW5nKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgaGFuZGxlRW50ZXJpbmcgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlLCBpc0FwcGVhcmluZykge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcHMgPSBnZXRUcmFuc2l0aW9uUHJvcHMoe1xuICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICAgIHN0eWxlOiBzdHlsZVxuICAgIH0sIHtcbiAgICAgIG1vZGU6ICdlbnRlcidcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgX2V4dGVuZHMoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuZWFzZU91dFxuICAgIH0pKTtcbiAgICBub2RlLnN0eWxlLnRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJ3RyYW5zZm9ybScsIF9leHRlbmRzKHt9LCB0cmFuc2l0aW9uUHJvcHMsIHtcbiAgICAgIGVhc2luZzogdGhlbWUudHJhbnNpdGlvbnMuZWFzaW5nLmVhc2VPdXRcbiAgICB9KSk7XG4gICAgbm9kZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG5cbiAgICBpZiAob25FbnRlcmluZykge1xuICAgICAgb25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIGhhbmRsZUVudGVyZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKG9uRW50ZXJlZCk7XG4gIHZhciBoYW5kbGVFeGl0aW5nID0gbm9ybWFsaXplZFRyYW5zaXRpb25DYWxsYmFjayhvbkV4aXRpbmcpO1xuICB2YXIgaGFuZGxlRXhpdCA9IG5vcm1hbGl6ZWRUcmFuc2l0aW9uQ2FsbGJhY2soZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BzID0gZ2V0VHJhbnNpdGlvblByb3BzKHtcbiAgICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgICBzdHlsZTogc3R5bGVcbiAgICB9LCB7XG4gICAgICBtb2RlOiAnZXhpdCdcbiAgICB9KTtcbiAgICBub2RlLnN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB0aGVtZS50cmFuc2l0aW9ucy5jcmVhdGUoJy13ZWJraXQtdHJhbnNmb3JtJywgX2V4dGVuZHMoe30sIHRyYW5zaXRpb25Qcm9wcywge1xuICAgICAgZWFzaW5nOiB0aGVtZS50cmFuc2l0aW9ucy5lYXNpbmcuc2hhcnBcbiAgICB9KSk7XG4gICAgbm9kZS5zdHlsZS50cmFuc2l0aW9uID0gdGhlbWUudHJhbnNpdGlvbnMuY3JlYXRlKCd0cmFuc2Zvcm0nLCBfZXh0ZW5kcyh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBlYXNpbmc6IHRoZW1lLnRyYW5zaXRpb25zLmVhc2luZy5zaGFycFxuICAgIH0pKTtcbiAgICBzZXRUcmFuc2xhdGVWYWx1ZShkaXJlY3Rpb24sIG5vZGUpO1xuXG4gICAgaWYgKG9uRXhpdCkge1xuICAgICAgb25FeGl0KG5vZGUpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBoYW5kbGVFeGl0ZWQgPSBub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgLy8gTm8gbmVlZCBmb3IgdHJhbnNpdGlvbnMgd2hlbiB0aGUgY29tcG9uZW50IGlzIGhpZGRlblxuICAgIG5vZGUuc3R5bGUud2Via2l0VHJhbnNpdGlvbiA9ICcnO1xuICAgIG5vZGUuc3R5bGUudHJhbnNpdGlvbiA9ICcnO1xuXG4gICAgaWYgKG9uRXhpdGVkKSB7XG4gICAgICBvbkV4aXRlZChub2RlKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgdXBkYXRlUG9zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjayhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNoaWxkcmVuUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCk7XG4gICAgfVxuICB9LCBbZGlyZWN0aW9uXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgLy8gU2tpcCBjb25maWd1cmF0aW9uIHdoZXJlIHRoZSBwb3NpdGlvbiBpcyBzY3JlZW4gc2l6ZSBpbnZhcmlhbnQuXG4gICAgaWYgKGluUHJvcCB8fCBkaXJlY3Rpb24gPT09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT09ICdyaWdodCcpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJlc2l6ZSA9IGRlYm91bmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChjaGlsZHJlblJlZi5jdXJyZW50KSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZVZhbHVlKGRpcmVjdGlvbiwgY2hpbGRyZW5SZWYuY3VycmVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGhhbmRsZVJlc2l6ZS5jbGVhcigpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XG4gICAgfTtcbiAgfSwgW2RpcmVjdGlvbiwgaW5Qcm9wXSk7XG4gIFJlYWN0LnVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFpblByb3ApIHtcbiAgICAgIC8vIFdlIG5lZWQgdG8gdXBkYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZHJhd2VyIHdoZW4gdGhlIGRpcmVjdGlvbiBjaGFuZ2UgYW5kXG4gICAgICAvLyB3aGVuIGl0J3MgaGlkZGVuLlxuICAgICAgdXBkYXRlUG9zaXRpb24oKTtcbiAgICB9XG4gIH0sIFtpblByb3AsIHVwZGF0ZVBvc2l0aW9uXSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUcmFuc2l0aW9uQ29tcG9uZW50LCBfZXh0ZW5kcyh7XG4gICAgbm9kZVJlZjogY2hpbGRyZW5SZWYsXG4gICAgb25FbnRlcjogaGFuZGxlRW50ZXIsXG4gICAgb25FbnRlcmVkOiBoYW5kbGVFbnRlcmVkLFxuICAgIG9uRW50ZXJpbmc6IGhhbmRsZUVudGVyaW5nLFxuICAgIG9uRXhpdDogaGFuZGxlRXhpdCxcbiAgICBvbkV4aXRlZDogaGFuZGxlRXhpdGVkLFxuICAgIG9uRXhpdGluZzogaGFuZGxlRXhpdGluZyxcbiAgICBhcHBlYXI6IHRydWUsXG4gICAgaW46IGluUHJvcCxcbiAgICB0aW1lb3V0OiB0aW1lb3V0XG4gIH0sIG90aGVyKSwgZnVuY3Rpb24gKHN0YXRlLCBjaGlsZFByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGRyZW4sIF9leHRlbmRzKHtcbiAgICAgIHJlZjogaGFuZGxlUmVmLFxuICAgICAgc3R5bGU6IF9leHRlbmRzKHtcbiAgICAgICAgdmlzaWJpbGl0eTogc3RhdGUgPT09ICdleGl0ZWQnICYmICFpblByb3AgPyAnaGlkZGVuJyA6IHVuZGVmaW5lZFxuICAgICAgfSwgc3R5bGUsIGNoaWxkcmVuLnByb3BzLnN0eWxlKVxuICAgIH0sIGNoaWxkUHJvcHMpKTtcbiAgfSk7XG59KTtcbnByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFNsaWRlLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIEEgc2luZ2xlIGNoaWxkIGNvbnRlbnQgZWxlbWVudC5cbiAgICovXG4gIGNoaWxkcmVuOiBlbGVtZW50QWNjZXB0aW5nUmVmLFxuXG4gIC8qKlxuICAgKiBEaXJlY3Rpb24gdGhlIGNoaWxkIG5vZGUgd2lsbCBlbnRlciBmcm9tLlxuICAgKi9cbiAgZGlyZWN0aW9uOiBQcm9wVHlwZXMub25lT2YoWydkb3duJywgJ2xlZnQnLCAncmlnaHQnLCAndXAnXSksXG5cbiAgLyoqXG4gICAqIElmIGB0cnVlYCwgc2hvdyB0aGUgY29tcG9uZW50OyB0cmlnZ2VycyB0aGUgZW50ZXIgb3IgZXhpdCBhbmltYXRpb24uXG4gICAqL1xuICBpbjogUHJvcFR5cGVzLmJvb2wsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIG9uRW50ZXI6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkVudGVyaW5nOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0OiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogQGlnbm9yZVxuICAgKi9cbiAgb25FeGl0ZWQ6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBvbkV4aXRpbmc6IFByb3BUeXBlcy5mdW5jLFxuXG4gIC8qKlxuICAgKiBAaWdub3JlXG4gICAqL1xuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0aW1lb3V0OiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMubnVtYmVyLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGFwcGVhcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBlbnRlcjogUHJvcFR5cGVzLm51bWJlcixcbiAgICBleGl0OiBQcm9wVHlwZXMubnVtYmVyXG4gIH0pXSlcbn0gOiB2b2lkIDA7XG5leHBvcnQgZGVmYXVsdCBTbGlkZTsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsc3ggZnJvbSAnY2xzeCc7XG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vTW9kYWwnO1xuaW1wb3J0IEJhY2tkcm9wIGZyb20gJy4uL0JhY2tkcm9wJztcbmltcG9ydCB3aXRoU3R5bGVzIGZyb20gJy4uL3N0eWxlcy93aXRoU3R5bGVzJztcbmltcG9ydCBTbGlkZSBmcm9tICcuLi9TbGlkZSc7XG5pbXBvcnQgUGFwZXIgZnJvbSAnLi4vUGFwZXInO1xuaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi4vdXRpbHMvY2FwaXRhbGl6ZSc7XG5pbXBvcnQgeyBkdXJhdGlvbiB9IGZyb20gJy4uL3N0eWxlcy90cmFuc2l0aW9ucyc7XG5pbXBvcnQgdXNlVGhlbWUgZnJvbSAnLi4vc3R5bGVzL3VzZVRoZW1lJztcbmV4cG9ydCB2YXIgc3R5bGVzID0gZnVuY3Rpb24gc3R5bGVzKHRoZW1lKSB7XG4gIHJldHVybiB7XG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIHJvb3QgZWxlbWVudC4gKi9cbiAgICByb290OiB7fSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSByb290IGVsZW1lbnQgaWYgYHZhcmlhbnQ9XCJwZXJtYW5lbnQgb3IgcGVyc2lzdGVudFwiYC4gKi9cbiAgICBkb2NrZWQ6IHtcbiAgICAgIGZsZXg6ICcwIDAgYXV0bydcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50LiAqL1xuICAgIHBhcGVyOiB7XG4gICAgICBvdmVyZmxvd1k6ICdhdXRvJyxcbiAgICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdjb2x1bW4nLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBmbGV4OiAnMSAwIGF1dG8nLFxuICAgICAgekluZGV4OiB0aGVtZS56SW5kZXguZHJhd2VyLFxuICAgICAgV2Via2l0T3ZlcmZsb3dTY3JvbGxpbmc6ICd0b3VjaCcsXG4gICAgICAvLyBBZGQgaU9TIG1vbWVudHVtIHNjcm9sbGluZy5cbiAgICAgIC8vIHRlbXBvcmFyeSBzdHlsZVxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXG4gICAgICB0b3A6IDAsXG4gICAgICAvLyBXZSBkaXNhYmxlIHRoZSBmb2N1cyByaW5nIGZvciBtb3VzZSwgdG91Y2ggYW5kIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gQXQgc29tZSBwb2ludCwgaXQgd291bGQgYmUgYmV0dGVyIHRvIGtlZXAgaXQgZm9yIGtleWJvYXJkIHVzZXJzLlxuICAgICAgLy8gOmZvY3VzLXJpbmcgQ1NTIHBzZXVkby1jbGFzcyB3aWxsIGhlbHAuXG4gICAgICBvdXRsaW5lOiAwXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwibGVmdFwiYC4gKi9cbiAgICBwYXBlckFuY2hvckxlZnQ6IHtcbiAgICAgIGxlZnQ6IDAsXG4gICAgICByaWdodDogJ2F1dG8nXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwicmlnaHRcImAuICovXG4gICAgcGFwZXJBbmNob3JSaWdodDoge1xuICAgICAgbGVmdDogJ2F1dG8nLFxuICAgICAgcmlnaHQ6IDBcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJ0b3BcImAuICovXG4gICAgcGFwZXJBbmNob3JUb3A6IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICBib3R0b206ICdhdXRvJyxcbiAgICAgIHJpZ2h0OiAwLFxuICAgICAgaGVpZ2h0OiAnYXV0bycsXG4gICAgICBtYXhIZWlnaHQ6ICcxMDAlJ1xuICAgIH0sXG5cbiAgICAvKiBTdHlsZXMgYXBwbGllZCB0byB0aGUgYFBhcGVyYCBjb21wb25lbnQgaWYgYGFuY2hvcj1cImJvdHRvbVwiYC4gKi9cbiAgICBwYXBlckFuY2hvckJvdHRvbToge1xuICAgICAgdG9wOiAnYXV0bycsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgYm90dG9tOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBoZWlnaHQ6ICdhdXRvJyxcbiAgICAgIG1heEhlaWdodDogJzEwMCUnXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwibGVmdFwiYCBhbmQgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkTGVmdDoge1xuICAgICAgYm9yZGVyUmlnaHQ6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwidG9wXCJgIGFuZCBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRUb3A6IHtcbiAgICAgIGJvcmRlckJvdHRvbTogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBQYXBlcmAgY29tcG9uZW50IGlmIGBhbmNob3I9XCJyaWdodFwiYCBhbmQgYHZhcmlhbnRgIGlzIG5vdCBcInRlbXBvcmFyeVwiLiAqL1xuICAgIHBhcGVyQW5jaG9yRG9ja2VkUmlnaHQ6IHtcbiAgICAgIGJvcmRlckxlZnQ6IFwiMXB4IHNvbGlkIFwiLmNvbmNhdCh0aGVtZS5wYWxldHRlLmRpdmlkZXIpXG4gICAgfSxcblxuICAgIC8qIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBgUGFwZXJgIGNvbXBvbmVudCBpZiBgYW5jaG9yPVwiYm90dG9tXCJgIGFuZCBgdmFyaWFudGAgaXMgbm90IFwidGVtcG9yYXJ5XCIuICovXG4gICAgcGFwZXJBbmNob3JEb2NrZWRCb3R0b206IHtcbiAgICAgIGJvcmRlclRvcDogXCIxcHggc29saWQgXCIuY29uY2F0KHRoZW1lLnBhbGV0dGUuZGl2aWRlcilcbiAgICB9LFxuXG4gICAgLyogU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGBNb2RhbGAgY29tcG9uZW50LiAqL1xuICAgIG1vZGFsOiB7fVxuICB9O1xufTtcbnZhciBvcHBvc2l0ZURpcmVjdGlvbiA9IHtcbiAgbGVmdDogJ3JpZ2h0JyxcbiAgcmlnaHQ6ICdsZWZ0JyxcbiAgdG9wOiAnZG93bicsXG4gIGJvdHRvbTogJ3VwJ1xufTtcbmV4cG9ydCBmdW5jdGlvbiBpc0hvcml6b250YWwoYW5jaG9yKSB7XG4gIHJldHVybiBbJ2xlZnQnLCAncmlnaHQnXS5pbmRleE9mKGFuY2hvcikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFuY2hvcih0aGVtZSwgYW5jaG9yKSB7XG4gIHJldHVybiB0aGVtZS5kaXJlY3Rpb24gPT09ICdydGwnICYmIGlzSG9yaXpvbnRhbChhbmNob3IpID8gb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSA6IGFuY2hvcjtcbn1cbnZhciBkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uID0ge1xuICBlbnRlcjogZHVyYXRpb24uZW50ZXJpbmdTY3JlZW4sXG4gIGV4aXQ6IGR1cmF0aW9uLmxlYXZpbmdTY3JlZW5cbn07XG4vKipcbiAqIFRoZSBwcm9wcyBvZiB0aGUgW01vZGFsXSgvYXBpL21vZGFsLykgY29tcG9uZW50IGFyZSBhdmFpbGFibGVcbiAqIHdoZW4gYHZhcmlhbnQ9XCJ0ZW1wb3JhcnlcImAgaXMgc2V0LlxuICovXG5cbnZhciBEcmF3ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZihmdW5jdGlvbiBEcmF3ZXIocHJvcHMsIHJlZikge1xuICB2YXIgX3Byb3BzJGFuY2hvciA9IHByb3BzLmFuY2hvcixcbiAgICAgIGFuY2hvclByb3AgPSBfcHJvcHMkYW5jaG9yID09PSB2b2lkIDAgPyAnbGVmdCcgOiBfcHJvcHMkYW5jaG9yLFxuICAgICAgQmFja2Ryb3BQcm9wcyA9IHByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuLFxuICAgICAgY2xhc3NlcyA9IHByb3BzLmNsYXNzZXMsXG4gICAgICBjbGFzc05hbWUgPSBwcm9wcy5jbGFzc05hbWUsXG4gICAgICBfcHJvcHMkZWxldmF0aW9uID0gcHJvcHMuZWxldmF0aW9uLFxuICAgICAgZWxldmF0aW9uID0gX3Byb3BzJGVsZXZhdGlvbiA9PT0gdm9pZCAwID8gMTYgOiBfcHJvcHMkZWxldmF0aW9uLFxuICAgICAgX3Byb3BzJE1vZGFsUHJvcHMgPSBwcm9wcy5Nb2RhbFByb3BzO1xuICBfcHJvcHMkTW9kYWxQcm9wcyA9IF9wcm9wcyRNb2RhbFByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRNb2RhbFByb3BzO1xuXG4gIHZhciBCYWNrZHJvcFByb3BzUHJvcCA9IF9wcm9wcyRNb2RhbFByb3BzLkJhY2tkcm9wUHJvcHMsXG4gICAgICBNb2RhbFByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF9wcm9wcyRNb2RhbFByb3BzLCBbXCJCYWNrZHJvcFByb3BzXCJdKSxcbiAgICAgIG9uQ2xvc2UgPSBwcm9wcy5vbkNsb3NlLFxuICAgICAgX3Byb3BzJG9wZW4gPSBwcm9wcy5vcGVuLFxuICAgICAgb3BlbiA9IF9wcm9wcyRvcGVuID09PSB2b2lkIDAgPyBmYWxzZSA6IF9wcm9wcyRvcGVuLFxuICAgICAgX3Byb3BzJFBhcGVyUHJvcHMgPSBwcm9wcy5QYXBlclByb3BzLFxuICAgICAgUGFwZXJQcm9wcyA9IF9wcm9wcyRQYXBlclByb3BzID09PSB2b2lkIDAgPyB7fSA6IF9wcm9wcyRQYXBlclByb3BzLFxuICAgICAgU2xpZGVQcm9wcyA9IHByb3BzLlNsaWRlUHJvcHMsXG4gICAgICBfcHJvcHMkVHJhbnNpdGlvbkNvbXAgPSBwcm9wcy5UcmFuc2l0aW9uQ29tcG9uZW50LFxuICAgICAgVHJhbnNpdGlvbkNvbXBvbmVudCA9IF9wcm9wcyRUcmFuc2l0aW9uQ29tcCA9PT0gdm9pZCAwID8gU2xpZGUgOiBfcHJvcHMkVHJhbnNpdGlvbkNvbXAsXG4gICAgICBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPSBwcm9wcy50cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBfcHJvcHMkdHJhbnNpdGlvbkR1cmEgPT09IHZvaWQgMCA/IGRlZmF1bHRUcmFuc2l0aW9uRHVyYXRpb24gOiBfcHJvcHMkdHJhbnNpdGlvbkR1cmEsXG4gICAgICBfcHJvcHMkdmFyaWFudCA9IHByb3BzLnZhcmlhbnQsXG4gICAgICB2YXJpYW50ID0gX3Byb3BzJHZhcmlhbnQgPT09IHZvaWQgMCA/ICd0ZW1wb3JhcnknIDogX3Byb3BzJHZhcmlhbnQsXG4gICAgICBvdGhlciA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgW1wiYW5jaG9yXCIsIFwiQmFja2Ryb3BQcm9wc1wiLCBcImNoaWxkcmVuXCIsIFwiY2xhc3Nlc1wiLCBcImNsYXNzTmFtZVwiLCBcImVsZXZhdGlvblwiLCBcIk1vZGFsUHJvcHNcIiwgXCJvbkNsb3NlXCIsIFwib3BlblwiLCBcIlBhcGVyUHJvcHNcIiwgXCJTbGlkZVByb3BzXCIsIFwiVHJhbnNpdGlvbkNvbXBvbmVudFwiLCBcInRyYW5zaXRpb25EdXJhdGlvblwiLCBcInZhcmlhbnRcIl0pO1xuXG4gIHZhciB0aGVtZSA9IHVzZVRoZW1lKCk7IC8vIExldCdzIGFzc3VtZSB0aGF0IHRoZSBEcmF3ZXIgd2lsbCBhbHdheXMgYmUgcmVuZGVyZWQgb24gdXNlciBzcGFjZS5cbiAgLy8gV2UgdXNlIHRoaXMgc3RhdGUgaXMgb3JkZXIgdG8gc2tpcCB0aGUgYXBwZWFyIHRyYW5zaXRpb24gZHVyaW5nIHRoZVxuICAvLyBpbml0aWFsIG1vdW50IG9mIHRoZSBjb21wb25lbnQuXG5cbiAgdmFyIG1vdW50ZWQgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIG1vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gIH0sIFtdKTtcbiAgdmFyIGFuY2hvciA9IGdldEFuY2hvcih0aGVtZSwgYW5jaG9yUHJvcCk7XG4gIHZhciBkcmF3ZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChQYXBlciwgX2V4dGVuZHMoe1xuICAgIGVsZXZhdGlvbjogdmFyaWFudCA9PT0gJ3RlbXBvcmFyeScgPyBlbGV2YXRpb24gOiAwLFxuICAgIHNxdWFyZTogdHJ1ZVxuICB9LCBQYXBlclByb3BzLCB7XG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucGFwZXIsIGNsYXNzZXNbXCJwYXBlckFuY2hvclwiLmNvbmNhdChjYXBpdGFsaXplKGFuY2hvcikpXSwgUGFwZXJQcm9wcy5jbGFzc05hbWUsIHZhcmlhbnQgIT09ICd0ZW1wb3JhcnknICYmIGNsYXNzZXNbXCJwYXBlckFuY2hvckRvY2tlZFwiLmNvbmNhdChjYXBpdGFsaXplKGFuY2hvcikpXSlcbiAgfSksIGNoaWxkcmVuKTtcblxuICBpZiAodmFyaWFudCA9PT0gJ3Blcm1hbmVudCcpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwgX2V4dGVuZHMoe1xuICAgICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5kb2NrZWQsIGNsYXNzTmFtZSksXG4gICAgICByZWY6IHJlZlxuICAgIH0sIG90aGVyKSwgZHJhd2VyKTtcbiAgfVxuXG4gIHZhciBzbGlkaW5nRHJhd2VyID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVHJhbnNpdGlvbkNvbXBvbmVudCwgX2V4dGVuZHMoe1xuICAgIGluOiBvcGVuLFxuICAgIGRpcmVjdGlvbjogb3Bwb3NpdGVEaXJlY3Rpb25bYW5jaG9yXSxcbiAgICB0aW1lb3V0OiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgYXBwZWFyOiBtb3VudGVkLmN1cnJlbnRcbiAgfSwgU2xpZGVQcm9wcyksIGRyYXdlcik7XG5cbiAgaWYgKHZhcmlhbnQgPT09ICdwZXJzaXN0ZW50Jykge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7XG4gICAgICBjbGFzc05hbWU6IGNsc3goY2xhc3Nlcy5yb290LCBjbGFzc2VzLmRvY2tlZCwgY2xhc3NOYW1lKSxcbiAgICAgIHJlZjogcmVmXG4gICAgfSwgb3RoZXIpLCBzbGlkaW5nRHJhd2VyKTtcbiAgfSAvLyB2YXJpYW50ID09PSB0ZW1wb3JhcnlcblxuXG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChNb2RhbCwgX2V4dGVuZHMoe1xuICAgIEJhY2tkcm9wUHJvcHM6IF9leHRlbmRzKHt9LCBCYWNrZHJvcFByb3BzLCBCYWNrZHJvcFByb3BzUHJvcCwge1xuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAgICB9KSxcbiAgICBCYWNrZHJvcENvbXBvbmVudDogQmFja2Ryb3AsXG4gICAgY2xhc3NOYW1lOiBjbHN4KGNsYXNzZXMucm9vdCwgY2xhc3Nlcy5tb2RhbCwgY2xhc3NOYW1lKSxcbiAgICBvcGVuOiBvcGVuLFxuICAgIG9uQ2xvc2U6IG9uQ2xvc2UsXG4gICAgcmVmOiByZWZcbiAgfSwgb3RoZXIsIE1vZGFsUHJvcHMpLCBzbGlkaW5nRHJhd2VyKTtcbn0pO1xucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gRHJhd2VyLnByb3BUeXBlcyA9IHtcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gV2FybmluZyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyB8IFRoZXNlIFByb3BUeXBlcyBhcmUgZ2VuZXJhdGVkIGZyb20gdGhlIFR5cGVTY3JpcHQgdHlwZSBkZWZpbml0aW9ucyB8XG4gIC8vIHwgICAgIFRvIHVwZGF0ZSB0aGVtIGVkaXQgdGhlIGQudHMgZmlsZSBhbmQgcnVuIFwieWFybiBwcm9wdHlwZXNcIiAgICAgfFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFNpZGUgZnJvbSB3aGljaCB0aGUgZHJhd2VyIHdpbGwgYXBwZWFyLlxuICAgKi9cbiAgYW5jaG9yOiBQcm9wVHlwZXMub25lT2YoWydib3R0b20nLCAnbGVmdCcsICdyaWdodCcsICd0b3AnXSksXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIEJhY2tkcm9wUHJvcHM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIFRoZSBjb250ZW50cyBvZiB0aGUgZHJhd2VyLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuXG4gIC8qKlxuICAgKiBPdmVycmlkZSBvciBleHRlbmQgdGhlIHN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQuXG4gICAqIFNlZSBbQ1NTIEFQSV0oI2NzcykgYmVsb3cgZm9yIG1vcmUgZGV0YWlscy5cbiAgICovXG4gIGNsYXNzZXM6IFByb3BUeXBlcy5vYmplY3QsXG5cbiAgLyoqXG4gICAqIEBpZ25vcmVcbiAgICovXG4gIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcblxuICAvKipcbiAgICogVGhlIGVsZXZhdGlvbiBvZiB0aGUgZHJhd2VyLlxuICAgKi9cbiAgZWxldmF0aW9uOiBQcm9wVHlwZXMubnVtYmVyLFxuXG4gIC8qKlxuICAgKiBQcm9wcyBhcHBsaWVkIHRvIHRoZSBbYE1vZGFsYF0oL2FwaS9tb2RhbC8pIGVsZW1lbnQuXG4gICAqL1xuICBNb2RhbFByb3BzOiBQcm9wVHlwZXMub2JqZWN0LFxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayBmaXJlZCB3aGVuIHRoZSBjb21wb25lbnQgcmVxdWVzdHMgdG8gYmUgY2xvc2VkLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgVGhlIGV2ZW50IHNvdXJjZSBvZiB0aGUgY2FsbGJhY2suXG4gICAqL1xuICBvbkNsb3NlOiBQcm9wVHlwZXMuZnVuYyxcblxuICAvKipcbiAgICogSWYgYHRydWVgLCB0aGUgZHJhd2VyIGlzIG9wZW4uXG4gICAqL1xuICBvcGVuOiBQcm9wVHlwZXMuYm9vbCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BQYXBlcmBdKC9hcGkvcGFwZXIvKSBlbGVtZW50LlxuICAgKi9cbiAgUGFwZXJQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogUHJvcHMgYXBwbGllZCB0byB0aGUgW2BTbGlkZWBdKC9hcGkvc2xpZGUvKSBlbGVtZW50LlxuICAgKi9cbiAgU2xpZGVQcm9wczogUHJvcFR5cGVzLm9iamVjdCxcblxuICAvKipcbiAgICogVGhlIGR1cmF0aW9uIGZvciB0aGUgdHJhbnNpdGlvbiwgaW4gbWlsbGlzZWNvbmRzLlxuICAgKiBZb3UgbWF5IHNwZWNpZnkgYSBzaW5nbGUgdGltZW91dCBmb3IgYWxsIHRyYW5zaXRpb25zLCBvciBpbmRpdmlkdWFsbHkgd2l0aCBhbiBvYmplY3QuXG4gICAqL1xuICB0cmFuc2l0aW9uRHVyYXRpb246IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5udW1iZXIsIFByb3BUeXBlcy5zaGFwZSh7XG4gICAgYXBwZWFyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGVudGVyOiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGV4aXQ6IFByb3BUeXBlcy5udW1iZXJcbiAgfSldKSxcblxuICAvKipcbiAgICogVGhlIHZhcmlhbnQgdG8gdXNlLlxuICAgKi9cbiAgdmFyaWFudDogUHJvcFR5cGVzLm9uZU9mKFsncGVybWFuZW50JywgJ3BlcnNpc3RlbnQnLCAndGVtcG9yYXJ5J10pXG59IDogdm9pZCAwO1xuZXhwb3J0IGRlZmF1bHQgd2l0aFN0eWxlcyhzdHlsZXMsIHtcbiAgbmFtZTogJ011aURyYXdlcicsXG4gIGZsaXA6IGZhbHNlXG59KShEcmF3ZXIpOyIsImltcG9ydCB7IFJvdXRlciwgX19Sb3V0ZXJDb250ZXh0LCBtYXRjaFBhdGggfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgZ2VuZXJhdGVQYXRoLCBtYXRjaFBhdGgsIHVzZUhpc3RvcnksIHVzZUxvY2F0aW9uLCB1c2VQYXJhbXMsIHVzZVJvdXRlTWF0Y2gsIHdpdGhSb3V0ZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTG9jYXRpb24gfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LWludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlQnJvd3Nlckhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBCcm93c2VyUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgICAgaGlzdG9yeTogdGhpcy5oaXN0b3J5LFxuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW5cbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gQnJvd3NlclJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICsgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUhhc2hIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gSGFzaFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcImFcIiwgcHJvcHMpO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cblxuXG52YXIgTGluayA9IGZvcndhcmRSZWYoZnVuY3Rpb24gKF9yZWYyLCBmb3J3YXJkZWRSZWYpIHtcbiAgdmFyIF9yZWYyJGNvbXBvbmVudCA9IF9yZWYyLmNvbXBvbmVudCxcbiAgICAgIGNvbXBvbmVudCA9IF9yZWYyJGNvbXBvbmVudCA9PT0gdm9pZCAwID8gTGlua0FuY2hvciA6IF9yZWYyJGNvbXBvbmVudCxcbiAgICAgIHJlcGxhY2UgPSBfcmVmMi5yZXBsYWNlLFxuICAgICAgdG8gPSBfcmVmMi50byxcbiAgICAgIGlubmVyUmVmID0gX3JlZjIuaW5uZXJSZWYsXG4gICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjIsIFtcImNvbXBvbmVudFwiLCBcInJlcGxhY2VcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5O1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLCBjb250ZXh0LmxvY2F0aW9uKTtcbiAgICB2YXIgaHJlZiA9IGxvY2F0aW9uID8gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKSA6IFwiXCI7XG5cbiAgICB2YXIgcHJvcHMgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogaHJlZixcbiAgICAgIG5hdmlnYXRlOiBmdW5jdGlvbiBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgdmFyIGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICB2YXIgbWV0aG9kID0gcmVwbGFjZSA/IGhpc3RvcnkucmVwbGFjZSA6IGhpc3RvcnkucHVzaDtcbiAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChfX1JvdXRlckNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgIWNvbnRleHQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgdXNlIDxOYXZMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBjdXJyZW50TG9jYXRpb24gPSBsb2NhdGlvblByb3AgfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24ocmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksIGN1cnJlbnRMb2NhdGlvbik7XG4gICAgdmFyIHBhdGggPSB0b0xvY2F0aW9uLnBhdGhuYW1lOyAvLyBSZWdleCB0YWtlbiBmcm9tOiBodHRwczovL2dpdGh1Yi5jb20vcGlsbGFyanMvcGF0aC10by1yZWdleHAvYmxvYi9tYXN0ZXIvaW5kZXguanMjTDIwMlxuXG4gICAgdmFyIGVzY2FwZWRQYXRoID0gcGF0aCAmJiBwYXRoLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18L1xcXFxdKS9nLCBcIlxcXFwkMVwiKTtcbiAgICB2YXIgbWF0Y2ggPSBlc2NhcGVkUGF0aCA/IG1hdGNoUGF0aChjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIHtcbiAgICAgIHBhdGg6IGVzY2FwZWRQYXRoLFxuICAgICAgZXhhY3Q6IGV4YWN0LFxuICAgICAgc2Vuc2l0aXZlOiBzZW5zaXRpdmUsXG4gICAgICBzdHJpY3Q6IHN0cmljdFxuICAgIH0pIDogbnVsbDtcbiAgICB2YXIgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3AgPyBpc0FjdGl2ZVByb3AobWF0Y2gsIGN1cnJlbnRMb2NhdGlvbikgOiBtYXRjaCk7XG4gICAgdmFyIGNsYXNzTmFtZSA9IGlzQWN0aXZlID8gam9pbkNsYXNzbmFtZXMoY2xhc3NOYW1lUHJvcCwgYWN0aXZlQ2xhc3NOYW1lKSA6IGNsYXNzTmFtZVByb3A7XG4gICAgdmFyIHN0eWxlID0gaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGVQcm9wLCB7fSwgYWN0aXZlU3R5bGUpIDogc3R5bGVQcm9wO1xuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChMaW5rLCBwcm9wcyk7XG4gIH0pO1xufSk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTmF2TGluay5kaXNwbGF5TmFtZSA9IFwiTmF2TGlua1wiO1xuICB2YXIgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcInBhZ2VcIiwgXCJzdGVwXCIsIFwibG9jYXRpb25cIiwgXCJkYXRlXCIsIFwidGltZVwiLCBcInRydWVcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub2JqZWN0XG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcclxuaW1wb3J0IHsgY3JlYXRlU3R5bGVzLCBtYWtlU3R5bGVzLCBUaGVtZSB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gIHJvb3Q6IHtcclxuICAgIGZsZXhHcm93OiAxLFxyXG4gICAgbWFyZ2luOiBcIjFyZW0gM3JlbSAwcmVtIDNyZW1cIixcclxuICAgIHBhZGRpbmc6IFwiMXJlbSAxcmVtIDByZW0gMXJlbVwiLFxyXG4gICAgbWF4SGVpZ2h0OiBcIjUwcHhcIixcclxuICB9LFxyXG4gIGxpbms6IHtcclxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcbiAgICBjb2xvcjogXCJibGFja1wiLFxyXG4gICAgdGV4dERlY29yYXRpb246IFwibm9uZVwiLFxyXG4gICAgXCImIC5NdWlTdmdJY29uLXJvb3RcIjoge1xyXG4gICAgICBmb250U2l6ZTogXCIycmVtXCIsXHJcbiAgICB9LFxyXG4gIH0sXHJcbn0pKTtcclxuaW50ZXJmYWNlIE1lbnVJdGVtUHJvcCB7XHJcbiAgdG86IHN0cmluZztcclxuICB0aXRsZTogc3RyaW5nO1xyXG59XHJcblxyXG5jb25zdCBNZW51SXRlbSA9ICh7IHRvLCB0aXRsZSB9OiBNZW51SXRlbVByb3ApID0+IHtcclxuICBjb25zdCBjbGFzc2VzID0gdXNlU3R5bGVzKCk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgPExpbmsgY2xhc3NOYW1lPXtjbGFzc2VzLmxpbmt9IHRvPXt0b30+XHJcbiAgICAgICAgPGRpdj57dGl0bGV9PC9kaXY+XHJcbiAgICAgIDwvTGluaz5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNZW51SXRlbTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgQXBwQmFyIGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9BcHBCYXJcIjtcclxuaW1wb3J0IFRvb2xiYXIgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL1Rvb2xiYXJcIjtcclxuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHlcIjtcclxuaW1wb3J0IEljb25CdXR0b24gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL0ljb25CdXR0b25cIjtcclxuaW1wb3J0IE1lbnVJY29uIGZyb20gXCJAbWF0ZXJpYWwtdWkvaWNvbnMvTWVudVwiO1xyXG5pbXBvcnQgTm90aWZpY2F0aW9uc0ljb24gZnJvbSBcIkBtYXRlcmlhbC11aS9pY29ucy9Ob3RpZmljYXRpb25zXCI7XHJcbmltcG9ydCBCYWRnZSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvQmFkZ2VcIjtcclxuaW1wb3J0IERyYXdlciBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvRHJhd2VyXCI7XHJcbmltcG9ydCBNZW51SXRlbSBmcm9tIFwiLi9jb21wb25lbnQvTWVudUl0ZW1cIjtcclxuaW1wb3J0IHsgdXNlSGlzdG9yeSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XHJcblxyXG5jb25zdCB1c2VTdHlsZXMgPSBtYWtlU3R5bGVzKCh0aGVtZSkgPT4gKHtcclxuICByb290OiB7XHJcbiAgICBmbGV4R3JvdzogMSxcclxuICB9LFxyXG5cclxuICB0aXRsZToge1xyXG4gICAgZmxleEdyb3c6IDEsXHJcbiAgICB0ZXh0QWxpZ246IFwic3RhcnRcIixcclxuICB9LFxyXG4gIG5vdGlJY29uOiB7XHJcbiAgICBtYXJnaW46IFwiMC4yNXJlbVwiLFxyXG4gICAgcGFkZGluZzogXCIwLjI1cmVtXCIsXHJcbiAgICBib3JkZXJSYWRpdXM6IFwiNTAlXCIsXHJcbiAgICBcIiY6aG92ZXJcIjoge1xyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwicmVkXCIsXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgc2lkZU1lbnU6IHtcclxuICAgIFwiJiAuTXVpRHJhd2VyLXBhcGVyXCI6IHtcclxuICAgICAgYm9yZGVyUmFkaXVzOiBcIjIwcHggMHB4IDBweCAyMHB4IC8gMjBweCAwcHggMHB4IDIwcHhcIixcclxuICAgIH0sXHJcbiAgfSxcclxuICBtZW51QnV0dG9uOiB7XHJcbiAgICBtYXJnaW46IFwiMC4yNXJlbVwiLFxyXG4gICAgcGFkZGluZzogXCIwLjI1cmVtXCIsXHJcbiAgfSxcclxuICBtZW51Qm90dG9tSXRlbToge1xyXG4gICAgcG9zaXRpb246IFwiZml4ZWRcIixcclxuICAgIGJvdHRvbTogXCIxMHB4XCIsXHJcbiAgICBtYXJnaW46IFwiMXJlbVwiLFxyXG4gICAgZm9udFNpemU6IFwiMC43NXJlbVwiLFxyXG4gIH0sXHJcbn0pKTtcclxuXHJcbmNvbnN0IFRvcE1lbnVCYXIgPSAoKSA9PiB7XHJcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoZmFsc2UpO1xyXG4gIGxldCBoaXN0b3J5ID0gdXNlSGlzdG9yeSgpO1xyXG5cclxuICBjb25zdCB0b2dnbGVEcmF3ZXIgPSAob3BlbjogYm9vbGVhbikgPT4gKGV2ZW50OiBSZWFjdC5LZXlib2FyZEV2ZW50IHwgUmVhY3QuTW91c2VFdmVudCkgPT4ge1xyXG4gICAgaWYgKFxyXG4gICAgICBldmVudC50eXBlID09PSBcImtleWRvd25cIiAmJlxyXG4gICAgICAoKGV2ZW50IGFzIFJlYWN0LktleWJvYXJkRXZlbnQpLmtleSA9PT0gXCJUYWJcIiB8fCAoZXZlbnQgYXMgUmVhY3QuS2V5Ym9hcmRFdmVudCkua2V5ID09PSBcIlNoaWZ0XCIpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFN0YXRlKG9wZW4pO1xyXG4gIH07XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xhc3Nlcy5yb290fT5cclxuICAgICAgPEFwcEJhciBwb3NpdGlvbj1cInN0YXRpY1wiPlxyXG4gICAgICAgIDxUb29sYmFyPlxyXG4gICAgICAgICAgPFR5cG9ncmFwaHlcclxuICAgICAgICAgICAgdmFyaWFudD1cImg2XCJcclxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzLnRpdGxlfVxyXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XHJcbiAgICAgICAgICAgICAgaGlzdG9yeS5wdXNoKGAvYCk7XHJcbiAgICAgICAgICAgIH19XHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIFJvdW5kaW5cclxuICAgICAgICAgIDwvVHlwb2dyYXBoeT5cclxuICAgICAgICAgIDxCYWRnZSBjbGFzc05hbWU9e2NsYXNzZXMubm90aUljb259IHZhcmlhbnQ9XCJkb3RcIiBjb2xvcj1cInNlY29uZGFyeVwiPlxyXG4gICAgICAgICAgICA8Tm90aWZpY2F0aW9uc0ljb24gLz5cclxuICAgICAgICAgIDwvQmFkZ2U+XHJcbiAgICAgICAgICA8SWNvbkJ1dHRvblxyXG4gICAgICAgICAgICBvbkNsaWNrPXt0b2dnbGVEcmF3ZXIodHJ1ZSl9XHJcbiAgICAgICAgICAgIGVkZ2U9XCJzdGFydFwiXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3Nlcy5tZW51QnV0dG9ufVxyXG4gICAgICAgICAgICBjb2xvcj1cImluaGVyaXRcIlxyXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwibWVudVwiXHJcbiAgICAgICAgICA+XHJcbiAgICAgICAgICAgIDxNZW51SWNvbiAvPlxyXG4gICAgICAgICAgPC9JY29uQnV0dG9uPlxyXG4gICAgICAgIDwvVG9vbGJhcj5cclxuICAgICAgPC9BcHBCYXI+XHJcbiAgICAgIDxEcmF3ZXIgY2xhc3NOYW1lPXtjbGFzc2VzLnNpZGVNZW51fSBhbmNob3I9e1wicmlnaHRcIn0gb3Blbj17c3RhdGV9IG9uQ2xvc2U9e3RvZ2dsZURyYXdlcihmYWxzZSl9PlxyXG4gICAgICAgIDxNZW51SXRlbSB0bz17XCJkXCJ9IHRpdGxlPXtcIuuCtCDroIjsiqgg66qp66GdXCJ9IC8+XHJcbiAgICAgICAgPE1lbnVJdGVtIHRvPXtcImRcIn0gdGl0bGU9e1wi64K0IOy/oO2PsFwifSAvPlxyXG4gICAgICAgIDxNZW51SXRlbSB0bz17XCJkXCJ9IHRpdGxlPXtcIuuhnOq3uOyVhOybg1wifSAvPlxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLm1lbnVCb3R0b21JdGVtfT5cclxuICAgICAgICAgIDxkaXY+7ISc67mE7IqkIOydtOyaqeusuOydmDwvZGl2PlxyXG4gICAgICAgICAgPGEgaHJlZj1cIm1haWx0bzogdGVhbS5yb3VuZGluQGdtYWlsLmNvbVwiPnRlYW0ucm91bmRpbkBnbWFpbC5jb208L2E+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvRHJhd2VyPlxyXG4gICAgPC9kaXY+XHJcbiAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRvcE1lbnVCYXI7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgbWFrZVN0eWxlcyB9IGZyb20gXCJAbWF0ZXJpYWwtdWkvY29yZS9zdHlsZXNcIjtcclxuaW1wb3J0IFR5cG9ncmFwaHkgZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL1R5cG9ncmFwaHlcIjtcclxuaW1wb3J0IGxvZ28gZnJvbSBcIi4uLy4uLy4uL3Jlcy9pbWFnZXMvbG9nby5wbmdcIjtcclxuXHJcbmNvbnN0IHVzZVN0eWxlcyA9IG1ha2VTdHlsZXMoKHRoZW1lKSA9PiAoe1xyXG4gIHJvb3Q6IHtcclxuICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgZmxleERpcmVjdGlvbjogXCJjb2x1bW5cIixcclxuICAgIGFsaWduSXRlbXM6IFwiY2VudGVyXCIsXHJcbiAgICBqdXN0aWZ5Q29udGVudDogXCJjZW50ZXJcIixcclxuICAgIGZsZXhHcm93OiAxLFxyXG4gICAgbWF4V2lkdGg6IFwiNTAwcHhcIixcclxuICAgIG1hcmdpbjogXCJhdXRvXCIsXHJcbiAgICBcIiYgPiBkaXZcIjoge1xyXG4gICAgICB3aWR0aDogXCIxMDAlXCIsXHJcbiAgICAgIGRpc3BsYXk6IFwiZmxleFwiLFxyXG4gICAgICBqdXN0aWZ5Q29udGVudDogXCJmbGV4LXN0YXJ0XCIsXHJcbiAgICB9LFxyXG4gIH0sXHJcblxyXG4gIHRpdGxlOiB7XHJcbiAgICBmb250U2l6ZTogXCIxLjI1cmVtXCIsXHJcbiAgICBmbGV4R3JvdzogMSxcclxuICAgIHRleHRBbGlnbjogXCJzdGFydFwiLFxyXG4gICAgZm9udFdlaWdodDogXCJib2xkXCIsXHJcbiAgfSxcclxufSkpO1xyXG5cclxuY29uc3QgUHJvUHJvZmlsZVBhZ2UgPSAoKSA9PiB7XHJcbiAgY29uc3QgY2xhc3NlcyA9IHVzZVN0eWxlcygpO1xyXG5cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzZXMucm9vdH0+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnRpdGxlfT7snbTsmqntnawg7ZSE66Gc64uYIO2UhOuhnO2VhDwvZGl2PlxyXG4gICAgICA8aW1nIHNyYz17bG9nb30gYWx0PVwiYnJhbmRMb2dvXCIgLz5cclxuICAgICAgPGRpdj5cclxuICAgICAgICB7YFxyXG4gICAgICAgIOyViOuFle2VmOyEuOyalH5+ICDsmqnslYTsoIDslKgg7J207Jqp7Z2s7ZSE66Gc7J6F64uI64ukIF5eXlxyXG5cclxu7Yis7Ja06rK966ClIDMw64WE7J2YIOuFuO2VmOyasOulvCDqsIDsp4Dqs6Ag7Jyg7Yis67iMIOyxhOuEkCjsmqnslYTsoIDslKgp66W8IOqwnOyEpO2VmOyYgOyKteuLiOuLpFxyXG7smqnslYTsoIDslKgg7LGE64SQ7J2AIOq4iOuwqSDsnbTtlbTtlaDsiJjsnojqs6Ag7ZWE65Oc7JeQ7IScIOuwlOuhnCDsoIHsmqntlaDsiJgg7J6I64qUIOuCtOyaqeydhCDrqqjtg5zroZwg66eM65Ok7Ja07KGM7Iq164uI64ukXHJcbuyaqeyVhOyggOyUqCDssYTrhJDsnYQg7Ya17ZW07IScIOyXrOufrOu2hOydmCDqs6jtlITsi6TroKXsnbQg7ZWc67Cc642UIOyLseq4gOuhnCDqsIDquYzsnbQg6rCA6riw66W8IOq4sOybkO2VqeuLiOuLpCB+fl5eXlxyXG4gICAgICAgIGB9XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2PlNOUzwvZGl2PlxyXG4gICAgICA8ZGl2PuycoO2KnOu4jCBnb2xmZ29vZHR27Jqp7JWE7KCA7JSoIOyxhOuEkCDsmrTsmIEgKOq1rOuPheyekOyImCAxMOunjCk8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBQcm9Qcm9maWxlUGFnZTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBtYWtlU3R5bGVzIH0gZnJvbSBcIkBtYXRlcmlhbC11aS9jb3JlL3N0eWxlc1wiO1xyXG5pbXBvcnQgbG9nbyBmcm9tIFwiLi4vLi4vLi4vcmVzL2ltYWdlcy9sb2dvLnBuZ1wiO1xyXG5cclxuY29uc3QgdXNlU3R5bGVzID0gbWFrZVN0eWxlcygodGhlbWUpID0+ICh7XHJcbiAgcm9vdDoge1xyXG4gICAgZGlzcGxheTogXCJmbGV4XCIsXHJcbiAgICBmbGV4RGlyZWN0aW9uOiBcImNvbHVtblwiLFxyXG4gICAgYWxpZ25JdGVtczogXCJjZW50ZXJcIixcclxuICAgIGZsZXhHcm93OiAxLFxyXG4gICAgaGVpZ2h0OiBcIjcwdmhcIixcclxuICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxyXG4gIH0sXHJcbn0pKTtcclxuXHJcbmNvbnN0IFJlbmRpbmdQYWdlID0gKCkgPT4ge1xyXG4gIGNvbnN0IGNsYXNzZXMgPSB1c2VTdHlsZXMoKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbGFzc2VzLnJvb3R9PlxyXG4gICAgICA8aW1nIHNyYz17bG9nb30gYWx0PVwiYnJhbmRMb2dvXCIgLz5cclxuICAgICAgPGRpdj7tjpjsnbTsp4Drpbwg66Gc65Sp7KSR7J6F64uI64ukLi4uPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVuZGluZ1BhZ2U7XHJcbiIsImltcG9ydCBSZWFjdCwgeyBTdXNwZW5zZSB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgUm91dGUsIFN3aXRjaCB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgVG9wTWVudUJhciBmcm9tIFwiLi9jb21wb25lbnQvdG9wTWVudWJhci9Ub3BNZW51QmFyXCI7XG5pbXBvcnQgUHJvUHJvZmlsZVBhZ2UgZnJvbSBcIi4vdXRpbHMvY29tcG9uZW50L1Byb1Byb2ZpbGVQYWdlXCI7XG5pbXBvcnQgUmVuZGluZ1BhZ2UgZnJvbSBcIi4vdXRpbHMvY29tcG9uZW50L1JlbmRpbmdQYWdlXCI7XG5cbmZ1bmN0aW9uIEFwcCgpIHtcbiAgY29uc3QgVXNlclBhZ2UgPSBSZWFjdC5sYXp5KCgpID0+IGltcG9ydChcIi4vY29tcG9uZW50L3VzZXJQYWdlL1VzZXJQYWdlXCIpKTtcblxuICByZXR1cm4gKFxuICAgIDxTdXNwZW5zZSBmYWxsYmFjaz17PFJlbmRpbmdQYWdlIC8+fT5cbiAgICAgIDxUb3BNZW51QmFyIC8+XG4gICAgICA8U3dpdGNoPlxuICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIiBjb21wb25lbnQ9e1VzZXJQYWdlfT48L1JvdXRlPlxuICAgICAgICA8Um91dGUgcGF0aD1cIi91c2VyXCIgY29tcG9uZW50PXtVc2VyUGFnZX0+PC9Sb3V0ZT5cbiAgICAgICAgPFJvdXRlIHBhdGg9XCIvcHJvXCIgY29tcG9uZW50PXtQcm9Qcm9maWxlUGFnZX0+PC9Sb3V0ZT5cbiAgICAgIDwvU3dpdGNoPlxuICAgIDwvU3VzcGVuc2U+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcDtcbiIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBleGFjdFByb3AgfSBmcm9tICdAbWF0ZXJpYWwtdWkvdXRpbHMnO1xuaW1wb3J0IFRoZW1lQ29udGV4dCBmcm9tICcuLi91c2VUaGVtZS9UaGVtZUNvbnRleHQnO1xuaW1wb3J0IHVzZVRoZW1lIGZyb20gJy4uL3VzZVRoZW1lJztcbmltcG9ydCBuZXN0ZWQgZnJvbSAnLi9uZXN0ZWQnOyAvLyBUbyBzdXBwb3J0IGNvbXBvc2l0aW9uIG9mIHRoZW1lLlxuXG5mdW5jdGlvbiBtZXJnZU91dGVyTG9jYWxUaGVtZShvdXRlclRoZW1lLCBsb2NhbFRoZW1lKSB7XG4gIGlmICh0eXBlb2YgbG9jYWxUaGVtZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBtZXJnZWRUaGVtZSA9IGxvY2FsVGhlbWUob3V0ZXJUaGVtZSk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFtZXJnZWRUaGVtZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFsnTWF0ZXJpYWwtVUk6IFlvdSBzaG91bGQgcmV0dXJuIGFuIG9iamVjdCBmcm9tIHlvdXIgdGhlbWUgZnVuY3Rpb24sIGkuZS4nLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9eygpID0+ICh7fSl9IC8+J10uam9pbignXFxuJykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWRUaGVtZTtcbiAgfVxuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgb3V0ZXJUaGVtZSwgbG9jYWxUaGVtZSk7XG59XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHRha2VzIGEgYHRoZW1lYCBwcm9wLlxuICogSXQgbWFrZXMgdGhlIGB0aGVtZWAgYXZhaWxhYmxlIGRvd24gdGhlIFJlYWN0IHRyZWUgdGhhbmtzIHRvIFJlYWN0IGNvbnRleHQuXG4gKiBUaGlzIGNvbXBvbmVudCBzaG91bGQgcHJlZmVyYWJseSBiZSB1c2VkIGF0ICoqdGhlIHJvb3Qgb2YgeW91ciBjb21wb25lbnQgdHJlZSoqLlxuICovXG5cblxuZnVuY3Rpb24gVGhlbWVQcm92aWRlcihwcm9wcykge1xuICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgIGxvY2FsVGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgdmFyIG91dGVyVGhlbWUgPSB1c2VUaGVtZSgpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaWYgKG91dGVyVGhlbWUgPT09IG51bGwgJiYgdHlwZW9mIGxvY2FsVGhlbWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydNYXRlcmlhbC1VSTogWW91IGFyZSBwcm92aWRpbmcgYSB0aGVtZSBmdW5jdGlvbiBwcm9wIHRvIHRoZSBUaGVtZVByb3ZpZGVyIGNvbXBvbmVudDonLCAnPFRoZW1lUHJvdmlkZXIgdGhlbWU9e291dGVyVGhlbWUgPT4gb3V0ZXJUaGVtZX0gLz4nLCAnJywgJ0hvd2V2ZXIsIG5vIG91dGVyIHRoZW1lIGlzIHByZXNlbnQuJywgJ01ha2Ugc3VyZSBhIHRoZW1lIGlzIGFscmVhZHkgaW5qZWN0ZWQgaGlnaGVyIGluIHRoZSBSZWFjdCB0cmVlICcgKyAnb3IgcHJvdmlkZSBhIHRoZW1lIG9iamVjdC4nXS5qb2luKCdcXG4nKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHRoZW1lID0gUmVhY3QudXNlTWVtbyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG91dHB1dCA9IG91dGVyVGhlbWUgPT09IG51bGwgPyBsb2NhbFRoZW1lIDogbWVyZ2VPdXRlckxvY2FsVGhlbWUob3V0ZXJUaGVtZSwgbG9jYWxUaGVtZSk7XG5cbiAgICBpZiAob3V0cHV0ICE9IG51bGwpIHtcbiAgICAgIG91dHB1dFtuZXN0ZWRdID0gb3V0ZXJUaGVtZSAhPT0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9LCBbbG9jYWxUaGVtZSwgb3V0ZXJUaGVtZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGhlbWVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHRoZW1lXG4gIH0sIGNoaWxkcmVuKTtcbn1cblxucHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgPSB7XG4gIC8qKlxuICAgKiBZb3VyIGNvbXBvbmVudCB0cmVlLlxuICAgKi9cbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLmlzUmVxdWlyZWQsXG5cbiAgLyoqXG4gICAqIEEgdGhlbWUgb2JqZWN0LiBZb3UgY2FuIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBleHRlbmQgdGhlIG91dGVyIHRoZW1lLlxuICAgKi9cbiAgdGhlbWU6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSkuaXNSZXF1aXJlZFxufSA6IHZvaWQgMDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVGhlbWVQcm92aWRlci5wcm9wVHlwZXMgPSBleGFjdFByb3AoVGhlbWVQcm92aWRlci5wcm9wVHlwZXMpIDogdm9pZCAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBUaGVtZVByb3ZpZGVyOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBSZWFjdERPTSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgXCIuL2luZGV4LmNzc1wiO1xuaW1wb3J0IEFwcCBmcm9tIFwiLi9BcHBcIjtcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuaW1wb3J0IHsgTXVpVGhlbWVQcm92aWRlciwgY3JlYXRlVGhlbWUgfSBmcm9tIFwiQG1hdGVyaWFsLXVpL2NvcmUvc3R5bGVzXCI7XG5cbmNvbnN0IHRoZW1lID0gY3JlYXRlVGhlbWUoe1xuICB0eXBvZ3JhcGh5OiB7XG4gICAgZm9udEZhbWlseTogXCJOb3RvIFNhbnMgQ0pLIEtSXCIsXG4gIH0sXG4gIHBhbGV0dGU6IHtcbiAgICAvLyBwcmltYXJ5OiB7IG1haW46IFwiIzIyOGUyMlwiIH0sXG4gICAgc2Vjb25kYXJ5OiB7IG1haW46IFwiIzE3REM3OVwiIH0sXG4gIH0sXG59KTtcblJlYWN0RE9NLnJlbmRlcihcbiAgPFJlYWN0LlN0cmljdE1vZGU+XG4gICAgPEJyb3dzZXJSb3V0ZXI+XG4gICAgICA8TXVpVGhlbWVQcm92aWRlciB0aGVtZT17dGhlbWV9PlxuICAgICAgICA8QXBwIC8+XG4gICAgICA8L011aVRoZW1lUHJvdmlkZXI+XG4gICAgPC9Ccm93c2VyUm91dGVyPlxuICA8L1JlYWN0LlN0cmljdE1vZGU+LFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIilcbik7XG4iXSwibmFtZXMiOlsiaW5Qcm9ncmVzcyIsImRhdGFXZWJwYWNrUHJlZml4IiwibW9kdWxlIiwiZXhwb3J0cyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0VmFyaWFudE1hcHBpbmciLCJoMSIsImgyIiwiaDMiLCJoNCIsImg1IiwiaDYiLCJzdWJ0aXRsZTEiLCJzdWJ0aXRsZTIiLCJib2R5MSIsImJvZHkyIiwiVHlwb2dyYXBoeSIsInByb3BzIiwicmVmIiwiX3Byb3BzJGFsaWduIiwiYWxpZ24iLCJjbGFzc2VzIiwiY2xhc3NOYW1lIiwiX3Byb3BzJGNvbG9yIiwiY29sb3IiLCJjb21wb25lbnQiLCJfcHJvcHMkZGlzcGxheSIsImRpc3BsYXkiLCJfcHJvcHMkZ3V0dGVyQm90dG9tIiwiZ3V0dGVyQm90dG9tIiwiX3Byb3BzJG5vV3JhcCIsIm5vV3JhcCIsIl9wcm9wcyRwYXJhZ3JhcGgiLCJwYXJhZ3JhcGgiLCJfcHJvcHMkdmFyaWFudCIsInZhcmlhbnQiLCJfcHJvcHMkdmFyaWFudE1hcHBpbmciLCJ2YXJpYW50TWFwcGluZyIsIm90aGVyIiwiQ29tcG9uZW50Iiwicm9vdCIsImNvbmNhdCIsInRoZW1lIiwibWFyZ2luIiwidHlwb2dyYXBoeSIsImNhcHRpb24iLCJidXR0b24iLCJvdmVybGluZSIsInNyT25seSIsInBvc2l0aW9uIiwiaGVpZ2h0Iiwid2lkdGgiLCJvdmVyZmxvdyIsImFsaWduTGVmdCIsInRleHRBbGlnbiIsImFsaWduQ2VudGVyIiwiYWxpZ25SaWdodCIsImFsaWduSnVzdGlmeSIsInRleHRPdmVyZmxvdyIsIndoaXRlU3BhY2UiLCJtYXJnaW5Cb3R0b20iLCJjb2xvckluaGVyaXQiLCJjb2xvclByaW1hcnkiLCJwYWxldHRlIiwicHJpbWFyeSIsIm1haW4iLCJjb2xvclNlY29uZGFyeSIsInNlY29uZGFyeSIsImNvbG9yVGV4dFByaW1hcnkiLCJ0ZXh0IiwiY29sb3JUZXh0U2Vjb25kYXJ5IiwiY29sb3JFcnJvciIsImVycm9yIiwiZGlzcGxheUlubGluZSIsImRpc3BsYXlCbG9jayIsIm5hbWUiLCJjbGFtcCIsInZhbHVlIiwibWluIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwibWF4IiwiTWF0aCIsImRlY29tcG9zZUNvbG9yIiwidHlwZSIsImNoYXJBdCIsInN1YnN0ciIsInJlIiwiUmVnRXhwIiwiY29sb3JzIiwibWF0Y2giLCJtYXAiLCJuIiwiaW5kZXgiLCJwYXJzZUludCIsInJvdW5kIiwiam9pbiIsImhleFRvUmdiIiwibWFya2VyIiwiaW5kZXhPZiIsInN1YnN0cmluZyIsIkVycm9yIiwidmFsdWVzIiwic3BsaXQiLCJwYXJzZUZsb2F0IiwicmVjb21wb3NlQ29sb3IiLCJpIiwiZ2V0Q29udHJhc3RSYXRpbyIsImZvcmVncm91bmQiLCJiYWNrZ3JvdW5kIiwibHVtQSIsImdldEx1bWluYW5jZSIsImx1bUIiLCJyZ2IiLCJoIiwicyIsImwiLCJhIiwiZiIsImsiLCJwdXNoIiwiaHNsVG9SZ2IiLCJ2YWwiLCJwb3ciLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiYWxwaGEiLCJkYXJrZW4iLCJjb2VmZmljaWVudCIsImxpZ2h0ZW4iLCJrZXlzIiwiY3JlYXRlQnJlYWtwb2ludHMiLCJicmVha3BvaW50cyIsIl9icmVha3BvaW50cyR2YWx1ZXMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwiX2JyZWFrcG9pbnRzJHVuaXQiLCJ1bml0IiwiX2JyZWFrcG9pbnRzJHN0ZXAiLCJzdGVwIiwidXAiLCJrZXkiLCJiZXR3ZWVuIiwic3RhcnQiLCJlbmQiLCJlbmRJbmRleCIsImRvd24iLCJ1cHBlcmJvdW5kIiwib25seSIsImNyZWF0ZU1peGlucyIsInNwYWNpbmciLCJtaXhpbnMiLCJfdG9vbGJhciIsImd1dHRlcnMiLCJzdHlsZXMiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsInRvb2xiYXIiLCJtaW5IZWlnaHQiLCJibGFjayIsIndoaXRlIiwiQTEwMCIsIkEyMDAiLCJBNDAwIiwiQTcwMCIsImxpZ2h0IiwiZGlzYWJsZWQiLCJoaW50IiwiZGl2aWRlciIsInBhcGVyIiwiZGVmYXVsdCIsImFjdGlvbiIsImFjdGl2ZSIsImhvdmVyIiwiaG92ZXJPcGFjaXR5Iiwic2VsZWN0ZWQiLCJzZWxlY3RlZE9wYWNpdHkiLCJkaXNhYmxlZEJhY2tncm91bmQiLCJkaXNhYmxlZE9wYWNpdHkiLCJmb2N1cyIsImZvY3VzT3BhY2l0eSIsImFjdGl2YXRlZE9wYWNpdHkiLCJkYXJrIiwiaWNvbiIsImFkZExpZ2h0T3JEYXJrIiwiaW50ZW50IiwiZGlyZWN0aW9uIiwic2hhZGUiLCJ0b25hbE9mZnNldCIsInRvbmFsT2Zmc2V0TGlnaHQiLCJ0b25hbE9mZnNldERhcmsiLCJoYXNPd25Qcm9wZXJ0eSIsImNyZWF0ZVBhbGV0dGUiLCJfcGFsZXR0ZSRwcmltYXJ5IiwiX3BhbGV0dGUkc2Vjb25kYXJ5IiwiX3BhbGV0dGUkZXJyb3IiLCJfcGFsZXR0ZSR3YXJuaW5nIiwid2FybmluZyIsIl9wYWxldHRlJGluZm8iLCJpbmZvIiwiX3BhbGV0dGUkc3VjY2VzcyIsInN1Y2Nlc3MiLCJfcGFsZXR0ZSR0eXBlIiwiX3BhbGV0dGUkY29udHJhc3RUaHJlIiwiY29udHJhc3RUaHJlc2hvbGQiLCJfcGFsZXR0ZSR0b25hbE9mZnNldCIsImdldENvbnRyYXN0VGV4dCIsImF1Z21lbnRDb2xvciIsIm1haW5TaGFkZSIsImxpZ2h0U2hhZGUiLCJkYXJrU2hhZGUiLCJKU09OIiwic3RyaW5naWZ5IiwiY29udHJhc3RUZXh0IiwidHlwZXMiLCJkZWVwbWVyZ2UiLCJjb21tb24iLCJncmV5Iiwicm91bmRXaXRoRGVwcmVjYXRpb25XYXJuaW5nIiwiY2FzZUFsbENhcHMiLCJ0ZXh0VHJhbnNmb3JtIiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJjcmVhdGVUeXBvZ3JhcGh5IiwiX3JlZiIsIl9yZWYkZm9udEZhbWlseSIsImZvbnRGYW1pbHkiLCJfcmVmJGZvbnRTaXplIiwiZm9udFNpemUiLCJfcmVmJGZvbnRXZWlnaHRMaWdodCIsImZvbnRXZWlnaHRMaWdodCIsIl9yZWYkZm9udFdlaWdodFJlZ3VsYSIsImZvbnRXZWlnaHRSZWd1bGFyIiwiX3JlZiRmb250V2VpZ2h0TWVkaXVtIiwiZm9udFdlaWdodE1lZGl1bSIsIl9yZWYkZm9udFdlaWdodEJvbGQiLCJmb250V2VpZ2h0Qm9sZCIsIl9yZWYkaHRtbEZvbnRTaXplIiwiaHRtbEZvbnRTaXplIiwiYWxsVmFyaWFudHMiLCJweFRvUmVtMiIsInB4VG9SZW0iLCJjb2VmIiwic2l6ZSIsImJ1aWxkVmFyaWFudCIsImZvbnRXZWlnaHQiLCJsaW5lSGVpZ2h0IiwibGV0dGVyU3BhY2luZyIsImNhc2luZyIsInZhcmlhbnRzIiwiY2xvbmUiLCJjcmVhdGVTaGFkb3ciLCJib3JkZXJSYWRpdXMiLCJkZWZhdWx0QnJlYWtwb2ludHMiLCJhY2MiLCJpdGVtIiwiZm4iLCJjYWNoZSIsInByb3BlcnRpZXMiLCJtIiwicCIsImRpcmVjdGlvbnMiLCJ0IiwiciIsImIiLCJ4IiwieSIsImFsaWFzZXMiLCJtYXJnaW5YIiwibWFyZ2luWSIsInBhZGRpbmdYIiwicGFkZGluZ1kiLCJnZXRDc3NQcm9wZXJ0aWVzIiwicHJvcCIsIl9wcm9wJHNwbGl0IiwiX3Byb3Akc3BsaXQyIiwicHJvcGVydHkiLCJBcnJheSIsImlzQXJyYXkiLCJkaXIiLCJhcmciLCJzcGFjaW5nS2V5cyIsImNyZWF0ZVVuYXJ5U3BhY2luZyIsInRoZW1lU3BhY2luZyIsImFicyIsImdldFN0eWxlRnJvbVByb3BWYWx1ZSIsImNzc1Byb3BlcnRpZXMiLCJ0cmFuc2Zvcm1lciIsInByb3BWYWx1ZSIsInJlZHVjZSIsImNzc1Byb3BlcnR5IiwidHJhbnNmb3JtZWQiLCJnZXRWYWx1ZSIsIk9iamVjdCIsInN0eWxlRnJvbVByb3BWYWx1ZSIsInRoZW1lQnJlYWtwb2ludHMiLCJfdGhlbWVCcmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJoYW5kbGVCcmVha3BvaW50cyIsInByb3BUeXBlcyIsImZpbHRlclByb3BzIiwiY3JlYXRlU3BhY2luZyIsInNwYWNpbmdJbnB1dCIsIm11aSIsInRyYW5zZm9ybSIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImFyZ3VtZW50Iiwib3V0cHV0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJjcmVhdGVUaGVtZSIsIm9wdGlvbnMiLCJfb3B0aW9ucyRicmVha3BvaW50cyIsImJyZWFrcG9pbnRzSW5wdXQiLCJfb3B0aW9ucyRtaXhpbnMiLCJtaXhpbnNJbnB1dCIsIl9vcHRpb25zJHBhbGV0dGUiLCJwYWxldHRlSW5wdXQiLCJfb3B0aW9ucyR0eXBvZ3JhcGh5IiwidHlwb2dyYXBoeUlucHV0IiwibXVpVGhlbWUiLCJvdmVycmlkZXMiLCJzaGFkb3dzIiwic2hhcGUiLCJ0cmFuc2l0aW9ucyIsInpJbmRleCIsInN0eWxlc09yQ3JlYXRvciIsImRlZmF1bHRUaGVtZSIsImVhc2luZyIsImVhc2VJbk91dCIsImVhc2VPdXQiLCJlYXNlSW4iLCJzaGFycCIsImR1cmF0aW9uIiwic2hvcnRlc3QiLCJzaG9ydGVyIiwic2hvcnQiLCJzdGFuZGFyZCIsImNvbXBsZXgiLCJlbnRlcmluZ1NjcmVlbiIsImxlYXZpbmdTY3JlZW4iLCJmb3JtYXRNcyIsIm1pbGxpc2Vjb25kcyIsImNyZWF0ZSIsIl9vcHRpb25zJGR1cmF0aW9uIiwiZHVyYXRpb25PcHRpb24iLCJfb3B0aW9ucyRlYXNpbmciLCJlYXNpbmdPcHRpb24iLCJfb3B0aW9ucyRkZWxheSIsImRlbGF5IiwiYW5pbWF0ZWRQcm9wIiwiZ2V0QXV0b0hlaWdodER1cmF0aW9uIiwiY29uc3RhbnQiLCJfb3B0aW9ucyR3aXRoVGhlbWUiLCJ3aXRoVGhlbWUiLCJzdHlsZXNPcHRpb25zIiwiY2xhc3NOYW1lUHJlZml4IiwidXNlU3R5bGVzIiwibWFrZVN0eWxlcyIsImRpc3BsYXlOYW1lIiwiV2l0aFN0eWxlcyIsImlubmVyUmVmIiwiZGVmYXVsdFByb3BzIiwibW9yZSIsInVzZVRoZW1lIiwiZ2V0VGhlbWVQcm9wcyIsIm1vYmlsZVN0ZXBwZXIiLCJzcGVlZERpYWwiLCJhcHBCYXIiLCJkcmF3ZXIiLCJtb2RhbCIsInNuYWNrYmFyIiwidG9vbHRpcCIsImNhcGl0YWxpemUiLCJzdHJpbmciLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiY3JlYXRlQ2hhaW5lZEZ1bmN0aW9uIiwiZnVuY3MiLCJmdW5jIiwiX2xlbjIiLCJfa2V5MiIsImFwcGx5IiwidGhpcyIsImRlYm91bmNlIiwidGltZW91dCIsIndhaXQiLCJkZWJvdW5jZWQiLCJ0aGF0IiwibGF0ZXIiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXIiLCJTdmdJY29uIiwiY2hpbGRyZW4iLCJfcHJvcHMkY29tcG9uZW50IiwiX3Byb3BzJGZvbnRTaXplIiwiaHRtbENvbG9yIiwidGl0bGVBY2Nlc3MiLCJfcHJvcHMkdmlld0JveCIsInZpZXdCb3giLCJmb2N1c2FibGUiLCJyb2xlIiwibXVpTmFtZSIsIndpdGhTdHlsZXMiLCJ1c2VyU2VsZWN0IiwiZmlsbCIsImZsZXhTaHJpbmsiLCJ0cmFuc2l0aW9uIiwiY29sb3JBY3Rpb24iLCJjb2xvckRpc2FibGVkIiwiZm9udFNpemVJbmhlcml0IiwiZm9udFNpemVTbWFsbCIsImZvbnRTaXplTGFyZ2UiLCJjcmVhdGVTdmdJY29uIiwicGF0aCIsImRlcHJlY2F0ZWRQcm9wVHlwZSIsInZhbGlkYXRvciIsInJlYXNvbiIsImlzTXVpRWxlbWVudCIsImVsZW1lbnQiLCJtdWlOYW1lcyIsInJlcXVpcmVQcm9wRmFjdG9yeSIsImNvbXBvbmVudE5hbWVJbkVycm9yIiwidW5zdXBwb3J0ZWRQcm9wIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJ1c2VDb250cm9sbGVkIiwiY29udHJvbGxlZCIsImRlZmF1bHRQcm9wIiwiaXNDb250cm9sbGVkIiwic3RhdGUiLCJjdXJyZW50IiwiX1JlYWN0JHVzZVN0YXRlIiwidmFsdWVTdGF0ZSIsInNldFZhbHVlIiwibmV3VmFsdWUiLCJ1c2VJZCIsImlkT3ZlcnJpZGUiLCJkZWZhdWx0SWQiLCJzZXREZWZhdWx0SWQiLCJpZCIsInJhbmRvbSIsIm93bmVyRG9jdW1lbnQiLCJub2RlIiwiZG9jdW1lbnQiLCJvd25lcldpbmRvdyIsImRlZmF1bHRWaWV3Iiwid2luZG93Iiwic2V0UmVmIiwidXNlRW5oYW5jZWRFZmZlY3QiLCJ1c2VFdmVudENhbGxiYWNrIiwidXNlRm9ya1JlZiIsInJlZkEiLCJyZWZCIiwicmVmVmFsdWUiLCJoYWRLZXlib2FyZEV2ZW50IiwiaGFkRm9jdXNWaXNpYmxlUmVjZW50bHkiLCJoYWRGb2N1c1Zpc2libGVSZWNlbnRseVRpbWVvdXQiLCJpbnB1dFR5cGVzV2hpdGVsaXN0Iiwic2VhcmNoIiwidXJsIiwidGVsIiwiZW1haWwiLCJwYXNzd29yZCIsIm51bWJlciIsImRhdGUiLCJtb250aCIsIndlZWsiLCJ0aW1lIiwiZGF0ZXRpbWUiLCJoYW5kbGVLZXlEb3duIiwiZXZlbnQiLCJtZXRhS2V5IiwiYWx0S2V5IiwiY3RybEtleSIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsImlzRm9jdXNWaXNpYmxlIiwidGFnTmFtZSIsInRhcmdldCIsIm1hdGNoZXMiLCJyZWFkT25seSIsImlzQ29udGVudEVkaXRhYmxlIiwiaGFuZGxlQmx1clZpc2libGUiLCJ1c2VJc0ZvY3VzVmlzaWJsZSIsIm9uQmx1clZpc2libGUiLCJpbnN0YW5jZSIsImRvYyIsImFkZEV2ZW50TGlzdGVuZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2NyZWF0ZVN2Z0ljb24iLCJfanN4UnVudGltZSIsIl9kZWZhdWx0IiwianN4IiwiZCIsImVudW1lcmFibGUiLCJfdXRpbHMiLCJTeW1ib2wiLCJmb3IiLCJwYXJhbXMiLCJfdHlwZW9mIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm5vZGVUeXBlIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsInBsYWluT2JqZWN0Q29uc3RydXJjdG9yIiwiY2xvbmVTdHlsZSIsInN0eWxlIiwibmV3U3R5bGUiLCJjcmVhdGVSdWxlIiwiZGVjbCIsImpzcyIsImRlY2xDb3B5IiwicnVsZSIsInBsdWdpbnMiLCJvbkNyZWF0ZVJ1bGUiLCJieSIsInJlc3VsdCIsInRvQ3NzVmFsdWUiLCJpZ25vcmVJbXBvcnRhbnQiLCJjc3NWYWx1ZSIsImluZGVudFN0ciIsInN0ciIsImluZGVudCIsInRvQ3NzIiwic2VsZWN0b3IiLCJfb3B0aW9ucyRpbmRlbnQiLCJmYWxsYmFja3MiLCJmYWxsYmFjayIsIl9wcm9wIiwiX3ZhbHVlIiwiX3Byb3AyIiwiX3ZhbHVlMiIsImFsbG93RW1wdHkiLCJlc2NhcGVSZWdleCIsIm5hdGl2ZUVzY2FwZSIsIkNTUyIsImVzY2FwZSIsInJlcGxhY2UiLCJCYXNlU3R5bGVSdWxlIiwiaXNQcm9jZXNzZWQiLCJyZW5kZXJlciIsInJlbmRlcmFibGUiLCJzaGVldCIsIlJlbmRlcmVyIiwiZm9yY2UiLCJwcm9jZXNzIiwib25DaGFuZ2VWYWx1ZSIsImlzRW1wdHkiLCJpc0RlZmluZWQiLCJyZW1vdmUiLCJyZW1vdmVQcm9wZXJ0eSIsInNldFByb3BlcnR5IiwiYXR0YWNoZWQiLCJTdHlsZVJ1bGUiLCJfQmFzZVN0eWxlUnVsZSIsIl90aGlzIiwiY2FsbCIsInNlbGVjdG9yVGV4dCIsInNjb3BlZCIsImdlbmVyYXRlSWQiLCJfcHJvdG8yIiwiYXBwbHlUbyIsImpzb24iLCJ0b0pTT04iLCJ0b1N0cmluZyIsIm9wdHMiLCJsaW5rIiwic2V0Iiwic2V0U2VsZWN0b3IiLCJyZXBsYWNlUnVsZSIsInBsdWdpblN0eWxlUnVsZSIsInBhcmVudCIsImRlZmF1bHRUb1N0cmluZ09wdGlvbnMiLCJhdFJlZ0V4cCIsIkNvbmRpdGlvbmFsUnVsZSIsImF0IiwicXVlcnkiLCJydWxlcyIsImF0TWF0Y2giLCJSdWxlTGlzdCIsImFkZCIsIl9wcm90byIsImdldFJ1bGUiLCJhZGRSdWxlIiwib25Qcm9jZXNzUnVsZSIsImtleVJlZ0V4cCIsInBsdWdpbkNvbmRpdGlvbmFsUnVsZSIsInRlc3QiLCJkZWZhdWx0VG9TdHJpbmdPcHRpb25zJDEiLCJuYW1lUmVnRXhwIiwiS2V5ZnJhbWVzUnVsZSIsImZyYW1lcyIsIm5hbWVNYXRjaCIsImtleVJlZ0V4cCQxIiwicmVmUmVnRXhwIiwiZmluZFJlZmVyZW5jZWRLZXlmcmFtZSIsImtleWZyYW1lcyIsInJlcGxhY2VSZWYiLCJyZWZLZXlmcmFtZSIsIm9uUHJvY2Vzc1N0eWxlIiwiS2V5ZnJhbWVSdWxlIiwicGx1Z2luS2V5ZnJhbWVSdWxlIiwiRm9udEZhY2VSdWxlIiwia2V5UmVnRXhwJDIiLCJwbHVnaW5Gb250RmFjZVJ1bGUiLCJWaWV3cG9ydFJ1bGUiLCJwbHVnaW5WaWV3cG9ydFJ1bGUiLCJTaW1wbGVSdWxlIiwia2V5c01hcCIsImRlZmF1bHRVcGRhdGVPcHRpb25zIiwiZm9yY2VVcGRhdGVPcHRpb25zIiwicmF3IiwiY291bnRlciIsInJ1bGVPcHRpb25zIiwiX3RoaXMkb3B0aW9ucyIsInJlZ2lzdGVyIiwic3BsaWNlIiwidW5yZWdpc3RlciIsImZvckVhY2giLCJ1cGRhdGUiLCJkYXRhIiwidXBkYXRlT25lIiwiX3RoaXMkb3B0aW9uczIiLCJzdHlsZVJ1bGUiLCJvblVwZGF0ZSIsIm5leHRWYWx1ZSIsIl9uZXh0VmFsdWUiLCJfcHJldlZhbHVlIiwiY3NzIiwiU3R5bGVTaGVldCIsImRlcGxveWVkIiwicXVldWUiLCJhdHRhY2giLCJkZXBsb3kiLCJkZXRhY2giLCJpbnNlcnRSdWxlIiwiYWRkUnVsZXMiLCJhZGRlZCIsImRlbGV0ZVJ1bGUiLCJfdGhpcyRydWxlcyIsIlBsdWdpbnNSZWdpc3RyeSIsImludGVybmFsIiwiZXh0ZXJuYWwiLCJyZWdpc3RyeSIsIm9uUHJvY2Vzc1NoZWV0IiwicHJvY2Vzc2VkVmFsdWUiLCJ1c2UiLCJuZXdQbHVnaW4iLCJwbHVnaW4iLCJTaGVldHNSZWdpc3RyeSIsInJlc2V0IiwiX3RlbXAiLCJnbG9iYWxUaGlzJDEiLCJnbG9iYWxUaGlzIiwiRnVuY3Rpb24iLCJucyIsIm1vZHVsZUlkIiwiY3JlYXRlR2VuZXJhdGVJZCIsInJ1bGVDb3VudGVyIiwianNzSWQiLCJwcmVmaXgiLCJTdHJpbmciLCJtaW5pZnkiLCJtZW1vaXplIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImNzc1J1bGUiLCJhdHRyaWJ1dGVTdHlsZU1hcCIsImVyciIsImRlbGV0ZSIsImdldEhlYWQiLCJxdWVyeVNlbGVjdG9yIiwiZmluZFByZXZOb2RlIiwicmVnaXN0cnkkMSIsImluc2VydGlvblBvaW50IiwiZmluZEhpZ2hlclNoZWV0IiwicGFyZW50Tm9kZSIsImZpbmRIaWdoZXN0U2hlZXQiLCJuZXh0U2libGluZyIsImNvbW1lbnQiLCJoZWFkIiwiY2hpbGROb2RlcyIsIm5vZGVWYWx1ZSIsInRyaW0iLCJmaW5kQ29tbWVudE5vZGUiLCJnZXROb25jZSIsImdldEF0dHJpYnV0ZSIsIl9pbnNlcnRSdWxlIiwiY29udGFpbmVyIiwiYXBwZW5kUnVsZSIsImNzc1J1bGVzIiwiZ2V0VmFsaWRSdWxlSW5zZXJ0aW9uSW5kZXgiLCJtYXhJbmRleCIsIkRvbVJlbmRlcmVyIiwiaGFzSW5zZXJ0ZWRSdWxlcyIsIm1lZGlhIiwibWV0YSIsImVsIiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50IiwiY3JlYXRlU3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJub25jZSIsIm5leHROb2RlIiwiaW5zZXJ0QmVmb3JlIiwiaW5zZXJ0aW9uUG9pbnRFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJpbnNlcnRTdHlsZSIsIkJvb2xlYW4iLCJyZW1vdmVDaGlsZCIsImluc2VydFJ1bGVzIiwibmF0aXZlUGFyZW50IiwibGF0ZXN0TmF0aXZlUGFyZW50IiwiX2luc2VydGlvbkluZGV4IiwicmVmQ3NzUnVsZSIsInJ1bGVTdHIiLCJpbnNlcnRpb25JbmRleCIsIm5hdGl2ZVJ1bGUiLCJnZXRSdWxlcyIsImluc3RhbmNlQ291bnRlciIsIkpzcyIsInZlcnNpb24iLCJzZXR1cCIsImNyZWF0ZVN0eWxlU2hlZXQiLCJyZW1vdmVTdHlsZVNoZWV0IiwiZ2V0RHluYW1pY1N0eWxlcyIsInRvIiwiZXh0cmFjdGVkIiwiaGFzQ1NTVE9NU3VwcG9ydCIsIm1lcmdlQ2xhc3NlcyIsImJhc2VDbGFzc2VzIiwibmV3Q2xhc3NlcyIsIm5leHRDbGFzc2VzIiwia2V5MSIsImtleTIiLCJzdWJDYWNoZSIsIk1hcCIsInBzZXVkb0NsYXNzZXMiLCJub3ciLCJEYXRlIiwiZm5WYWx1ZXNOcyIsImZuUnVsZU5zIiwiZm5WYWx1ZXMiLCJmblJ1bGUiLCJhdFByZWZpeCIsIkdsb2JhbENvbnRhaW5lclJ1bGUiLCJHbG9iYWxQcmVmaXhlZFJ1bGUiLCJzZXBhcmF0b3JSZWdFeHAiLCJhZGRTY29wZSIsInNjb3BlIiwicGFydHMiLCJoYW5kbGVOZXN0ZWRHbG9iYWxDb250YWluZXJSdWxlIiwiaGFuZGxlUHJlZml4ZWRHbG9iYWxSdWxlIiwicGFyZW50UmVnRXhwIiwiZ2V0UmVwbGFjZVJlZiIsInJlcGxhY2VQYXJlbnRSZWZzIiwibmVzdGVkUHJvcCIsInBhcmVudFByb3AiLCJwYXJlbnRTZWxlY3RvcnMiLCJuZXN0ZWRTZWxlY3RvcnMiLCJqIiwibmVzdGVkIiwiZ2V0T3B0aW9ucyIsInByZXZPcHRpb25zIiwibmVzdGluZ0xldmVsIiwiaXNOZXN0ZWQiLCJpc05lc3RlZENvbmRpdGlvbmFsIiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsInRvSHlwaGVuTG93ZXIiLCJ0b0xvd2VyQ2FzZSIsImhOYW1lIiwiY29udmVydENhc2UiLCJjb252ZXJ0ZWQiLCJoeXBoZW5hdGVkUHJvcCIsInB4IiwibXMiLCJwZXJjZW50IiwiYWRkQ2FtZWxDYXNlZFZlcnNpb24iLCJyZWdFeHAiLCJuZXdPYmoiLCJ1bml0cyIsImJvcmRlciIsInBhZGRpbmciLCJib3R0b20iLCJsZWZ0IiwidG9wIiwicmlnaHQiLCJpbnNldCIsIm1vdGlvbiIsIm91dGxpbmUiLCJwZXJzcGVjdGl2ZSIsImdhcCIsImdyaWQiLCJpdGVyYXRlIiwiaW5uZXJQcm9wIiwiX2lubmVyUHJvcCIsImlzTmFOIiwiY2FtZWxDYXNlZE9wdGlvbnMiLCJqcyIsInZlbmRvciIsImJyb3dzZXIiLCJpc1RvdWNoIiwiZG9jdW1lbnRFbGVtZW50IiwianNDc3NNYXAiLCJNb3oiLCJPIiwiV2Via2l0IiwiYXBwZWFyZW5jZSIsIm5vUHJlZmlsbCIsInN1cHBvcnRlZFByb3BlcnR5IiwiY29sb3JBZGp1c3QiLCJ0b1VwcGVyIiwiYyIsImNhbWVsaXplIiwicGFzY2FsaXplIiwibWFzayIsImxvbmdoYW5kIiwidGV4dE9yaWVudGF0aW9uIiwid3JpdGluZ01vZGUiLCJicmVha1Byb3BzT2xkIiwiaW5saW5lTG9naWNhbE9sZCIsIm5ld1Byb3AiLCJ1bnByZWZpeGVkIiwicHJlZml4ZWQiLCJwYXNjYWxpemVkIiwic2Nyb2xsU25hcCIsIm92ZXJzY3JvbGxCZWhhdmlvciIsInByb3BNYXAiLCJvcmRlciIsImZsZXgyMDEyIiwicHJvcE1hcCQxIiwiZmxleCIsInByb3BLZXlzIiwicHJlZml4Q3NzIiwibXVsdGlwbGUiLCJwcm9wZXJ0eURldGVjdG9ycyIsImZpbHRlciIsImNvbXB1dGVkIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImtleSQxIiwiZWwkMSIsImNhY2hlJDEiLCJ0cmFuc2l0aW9uUHJvcGVydGllcyIsInRyYW5zUHJvcHNSZWdFeHAiLCJwcmVmaXhUcmFuc2l0aW9uQ2FsbGJhY2siLCJwMSIsInAyIiwicHJlZml4ZWRWYWx1ZSIsInN1cHBvcnRlZFZhbHVlIiwiY2FjaGVLZXkiLCJwcmVmaXhTdHlsZSIsImNoYW5nZVByb3AiLCJzdXBwb3J0ZWRQcm9wIiwiY2hhbmdlVmFsdWUiLCJzdXBwb3J0ZWRWYWx1ZSQxIiwiYXRSdWxlIiwic3VwcG9ydGVkS2V5ZnJhbWVzIiwic29ydCIsInByb3AwIiwicHJvcDEiLCJkZWZhdWx0T3B0aW9ucyIsImRpc2FibGVHZW5lcmF0aW9uIiwiZ2VuZXJhdGVDbGFzc05hbWUiLCJfb3B0aW9ucyRkaXNhYmxlR2xvYmEiLCJkaXNhYmxlR2xvYmFsIiwiX29wdGlvbnMkcHJvZHVjdGlvblByIiwicHJvZHVjdGlvblByZWZpeCIsIl9vcHRpb25zJHNlZWQiLCJzZWVkIiwic2VlZFByZWZpeCIsImdldE5leHRDb3VudGVySWQiLCJzdHlsZVNoZWV0IiwiY3JlYXRlR2VuZXJhdGVDbGFzc05hbWUiLCJzaGVldHNDYWNoZSIsInNoZWV0c01hbmFnZXIiLCJzaGVldHNSZWdpc3RyeSIsIlN0eWxlc0NvbnRleHQiLCJpbmRleENvdW50ZXIiLCJpbmNyZW1lbnQiLCJnZXRTdHlsZXNDcmVhdG9yIiwidGhlbWluZ0VuYWJsZWQiLCJzdHlsZXNXaXRoT3ZlcnJpZGVzIiwiZ2V0Q2xhc3NlcyIsImNhY2hlQ2xhc3NlcyIsImxhc3RQcm9wIiwibGFzdEpTUyIsImdlbmVyYXRlIiwiX3JlZjIiLCJzdHlsZXNDcmVhdG9yIiwic2hlZXRNYW5hZ2VyIiwicmVmcyIsInN0YXRpY1NoZWV0IiwiZHluYW1pY1N0eWxlcyIsImZsaXAiLCJzZXJ2ZXJHZW5lcmF0ZUNsYXNzTmFtZSIsImR5bmFtaWNTaGVldCIsIl9yZWYzIiwiX3JlZjQiLCJ1c2VTeW5jaHJvbm91c0VmZmVjdCIsImN1cnJlbnRLZXkiLCJjbGFzc05hbWVQcmVmaXhPcHRpb24iLCJfb3B0aW9ucyRkZWZhdWx0VGhlbWUiLCJzdHlsZXNPcHRpb25zMiIsInNob3VsZFVwZGF0ZSIsImlzUGxhaW5PYmplY3QiLCJzb3VyY2UiLCJmb3JtYXRNdWlFcnJvck1lc3NhZ2UiLCJjb2RlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9WYWwiLCJtaXgiLCJ0bXAiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xMF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzExX19fIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsImxpc3QiLCJjb250ZW50IiwibW9kdWxlcyIsIm1lZGlhUXVlcnkiLCJkZWR1cGUiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiX2kiLCJfc2xpY2VkVG9BcnJheSIsImFyciIsIl9hcnJheVdpdGhIb2xlcyIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsIm5leHQiLCJkb25lIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiZnJvbSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJsZW4iLCJhcnIyIiwiX2l0ZW0iLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImhhc2giLCJuZWVkUXVvdGVzIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwic3BsaWNlT25lIiwicG9wIiwiaGFzVHJhaWxpbmdTbGFzaCIsInRvUGFydHMiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImxhc3QiLCJwYXJ0IiwidW5zaGlmdCIsImFkZExlYWRpbmdTbGFzaCIsInN0cmlwTGVhZGluZ1NsYXNoIiwic3RyaXBCYXNlbmFtZSIsImhhc0Jhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJlIiwiVVJJRXJyb3IiLCJjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwibm90aWZ5TGlzdGVuZXJzIiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwibWVzc2FnZSIsImNvbmZpcm0iLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwidWEiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImxpc3RlbmVyQ291bnQiLCJjaGVja0RPTUxpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0Jsb2NrZWQiLCJocmVmIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hDaGFuZ2VFdmVudCQxIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImJhc2VUYWciLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJhc3NpZ24iLCJ0ZXN0MSIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInNlY3JldCIsImdldFNoaW0iLCJpc1JlcXVpcmVkIiwiUmVhY3RQcm9wVHlwZXMiLCJhcnJheSIsImJvb2wiLCJvYmplY3QiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhYSIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsIkIiLCJnIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJEIiwib2EiLCJwYSIsInFhIiwibWEiLCJuYSIsImxhIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsIndhIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJFIiwiTWEiLCJLYSIsIkxhIiwiTmEiLCJzdGFjayIsIk9hIiwiUGEiLCJwcmVwYXJlU3RhY2tUcmFjZSIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiY29uZmlndXJhYmxlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsImNoZWNrZWQiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiJGEiLCJhYiIsImJiIiwiY2IiLCJlYiIsIkNoaWxkcmVuIiwiZGIiLCJmYiIsImRlZmF1bHRTZWxlY3RlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsImliIiwiamIiLCJrYiIsImxiIiwibWIiLCJuYiIsIm9iIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwidmFsdWVPZiIsImZpcnN0Q2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJsaW5lQ2xhbXAiLCJvcGFjaXR5Iiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicmIiLCJzYiIsInRiIiwidWIiLCJtZW51aXRlbSIsImFyZWEiLCJiYXNlIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJ5YiIsInpiIiwiQWIiLCJCYiIsIkNiIiwic3RhdGVOb2RlIiwiRGIiLCJFYiIsIkZiIiwiR2IiLCJIYiIsIkliIiwiSmIiLCJLYiIsIkxiIiwiTWIiLCJPYiIsIlBiIiwiUWIiLCJSYiIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJiYyIsImRjIiwiZWMiLCJmYyIsImdjIiwiaGMiLCJpYyIsImpjIiwia2MiLCJsYyIsIm1jIiwibmMiLCJvYyIsInBjIiwicWMiLCJyYyIsImJsb2NrZWRPbiIsImRvbUV2ZW50TmFtZSIsImV2ZW50U3lzdGVtRmxhZ3MiLCJuYXRpdmVFdmVudCIsInRhcmdldENvbnRhaW5lcnMiLCJzYyIsInBvaW50ZXJJZCIsInRjIiwidmMiLCJ3YyIsImxhbmVQcmlvcml0eSIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsImNvbnRhaW5lckluZm8iLCJ4YyIsInljIiwic2hpZnQiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJhbmltYXRpb24iLCJJYyIsIkpjIiwiS2MiLCJMYyIsIk1jIiwiTmMiLCJPYyIsIlBjIiwiUWMiLCJ1bnN0YWJsZV9ub3ciLCJGIiwiUmMiLCJVYyIsInBlbmRpbmdMYW5lcyIsImV4cGlyZWRMYW5lcyIsInN1c3BlbmRlZExhbmVzIiwicGluZ2VkTGFuZXMiLCJWYyIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsIldjIiwiWGMiLCJZYyIsIlpjIiwiJGMiLCJldmVudFRpbWVzIiwiY2x6MzIiLCJiZCIsImNkIiwibG9nIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiYmluZCIsInVjIiwiamQiLCJrZCIsImxkIiwibmQiLCJvZCIsImtleUNvZGUiLCJjaGFyQ29kZSIsInBkIiwicWQiLCJyZCIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImdldE1vZGlmaWVyU3RhdGUiLCJ6ZCIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJKZCIsImNsaXBib2FyZERhdGEiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiT2QiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGQiLCJSZCIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiVGQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJaZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiJGQiLCJhZSIsImJlIiwiZG9jdW1lbnRNb2RlIiwiY2UiLCJkZSIsImVlIiwiZmUiLCJnZSIsImhlIiwiaWUiLCJsZSIsInJhbmdlIiwibWUiLCJuZSIsIm9lIiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJvZmZzZXQiLCJNZSIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJOZSIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudFdpbmRvdyIsIk9lIiwiY29udGVudEVkaXRhYmxlIiwiUGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJhbmNob3JOb2RlIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJHIiwiJGUiLCJoYXMiLCJhZiIsImJmIiwiY2YiLCJkZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiTmIiLCJ3IiwieiIsInUiLCJxIiwidiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiSiIsIksiLCJRIiwiTCIsImplIiwiY2hhciIsImtlIiwiamYiLCJrZiIsImxmIiwibWYiLCJhdXRvRm9jdXMiLCJuZiIsIl9faHRtbCIsIm9mIiwicGYiLCJxZiIsInJmIiwic2YiLCJwcmV2aW91c1NpYmxpbmciLCJ0ZiIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiSCIsIkkiLCJDZiIsIk0iLCJOIiwiRGYiLCJFZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkZmIiwiR2YiLCJIZiIsIklmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiSmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIktmIiwiTGYiLCJNZiIsIk5mIiwiT2YiLCJQZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiUWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlJmIiwidW5zdGFibGVfcmVxdWVzdFBhaW50IiwiU2YiLCJUZiIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiVWYiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsIlZmIiwiV2YiLCJYZiIsInVuc3RhYmxlX0xvd1ByaW9yaXR5IiwiWWYiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibWciLCJuZyIsIm9nIiwicGciLCJxZyIsInJnIiwiX2N1cnJlbnRWYWx1ZSIsInNnIiwiY2hpbGRMYW5lcyIsInRnIiwiZGVwZW5kZW5jaWVzIiwiZmlyc3RDb250ZXh0IiwibGFuZXMiLCJ1ZyIsInZnIiwiY29udGV4dCIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiQWciLCJCZyIsIkNnIiwiQSIsIkMiLCJEZyIsIkVnIiwiRmciLCJHZyIsIktnIiwiaXNNb3VudGVkIiwiX3JlYWN0SW50ZXJuYWxzIiwiZW5xdWV1ZVNldFN0YXRlIiwiSGciLCJJZyIsIkpnIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIkxnIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJNZyIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiVGciLCJVZyIsIm1vZGUiLCJWZyIsImltcGxlbWVudGF0aW9uIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJQIiwiaWgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJqaCIsImtoIiwibGgiLCJtaCIsIm5oIiwib2giLCJwZW5kaW5nUHJvcHMiLCJwaCIsInFoIiwicmgiLCJzaCIsInRoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJSIiwiUyIsIlQiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJWIiwiSGkiLCJJaSIsIlciLCJKaSIsIktpIiwiTGkiLCJNaSIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsInRoZW4iLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJleHRlbmQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsVG9wIiwib25Db21taXRGaWJlclJvb3QiLCJmayIsImdrIiwiaWsiLCJpc1JlYWN0Q29tcG9uZW50IiwicGVuZGluZ0NoaWxkcmVuIiwiamsiLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwia2siLCJsayIsIm1rIiwibmsiLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInhrIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJ5ayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJFbGVtZW50IiwiRnJhZ21lbnQiLCJMYXp5IiwiUG9ydGFsIiwiUHJvZmlsZXIiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJpc0FzeW5jTW9kZSIsImlzQ29uY3VycmVudE1vZGUiLCJpc0NvbnRleHRDb25zdW1lciIsImlzQ29udGV4dFByb3ZpZGVyIiwiaXNFbGVtZW50IiwiaXNGb3J3YXJkUmVmIiwiaXNGcmFnbWVudCIsImlzTGF6eSIsImlzUG9ydGFsIiwiaXNQcm9maWxlciIsImlzU3RyaWN0TW9kZSIsImlzU3VzcGVuc2UiLCJpc1ZhbGlkRWxlbWVudFR5cGUiLCJ0eXBlT2YiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJjb21tb25qc0dsb2JhbCIsImNyZWF0ZUV2ZW50RW1pdHRlciIsImhhbmRsZXJzIiwib24iLCJoYW5kbGVyIiwib2ZmIiwiY2hhbmdlZEJpdHMiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiZ2V0VW5pcXVlSWQiLCJQcm92aWRlciIsIl9Db21wb25lbnQiLCJlbWl0dGVyIiwibmV4dFByb3BzIiwib2xkVmFsdWUiLCJDb25zdW1lciIsIl9Db21wb25lbnQyIiwiX3RoaXMyIiwiaGlzdG9yeUNvbnRleHQiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJjcmVhdGVOYW1lZENvbnRleHQkMSIsIlJvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwiaXNFeGFjdCIsImNhY2hlQ291bnQkMSIsIm1hdGNoUGF0aCIsIl9vcHRpb25zIiwiX29wdGlvbnMkZXhhY3QiLCJfb3B0aW9ucyRzdHJpY3QiLCJzdHJpY3QiLCJfb3B0aW9ucyRzZW5zaXRpdmUiLCJzZW5zaXRpdmUiLCJtYXRjaGVkIiwiX2NvbXBpbGVQYXRoIiwicGF0aENhY2hlIiwicmVnZXhwIiwiY29tcGlsZVBhdGgkMSIsImV4ZWMiLCJtZW1vIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiX3RoaXMkcHJvcHMiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTd2l0Y2giLCJ1c2VIaXN0b3J5IiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJjaGFyQ29kZUF0IiwiZW5jb2RlIiwicHJldHR5IiwidG9rZW4iLCJzZWdtZW50IiwiYXR0YWNoS2V5cyIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsIl9fc2VsZiIsIl9fc291cmNlIiwianN4cyIsImZvcmNlVXBkYXRlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsImNvdW50IiwidG9BcnJheSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNvbnNvbGUiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZsb29yIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJwcmlvcml0eUxldmVsIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZSIsInVuc3RhYmxlX25leHQiLCJ1bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbiIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsInN0eWxlc0luRG9tIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZFN0eWxlIiwiYXBpIiwiZG9tQVBJIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pbmRleCIsImluc2VydCIsInN0eWxlVGFyZ2V0IiwiY29udGVudERvY3VtZW50IiwiZ2V0VGFyZ2V0Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsImNzc1RleHQiLCJjb25kaXRpb24iLCJfZGVmaW5lUHJvcGVydGllcyIsIndyaXRhYmxlIiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZGVmaW5lUHJvcGVydHkiLCJfZXh0ZW5kcyIsIl9zZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX2luaGVyaXRzTG9vc2UiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsInNvdXJjZVN5bWJvbEtleXMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsInNvdXJjZUtleXMiLCJ1bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycmF5TGlrZVRvQXJyYXkiLCJpdGVyIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJkZWZpbml0aW9uIiwiY2h1bmtJZCIsIlByb21pc2UiLCJhbGwiLCJwcm9taXNlcyIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjaGFyc2V0Iiwic3JjIiwib25TY3JpcHRDb21wbGV0ZSIsInByZXYiLCJvbmVycm9yIiwib25sb2FkIiwiZG9uZUZucyIsInRvU3RyaW5nVGFnIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImN1cnJlbnRTY3JpcHQiLCJpbnN0YWxsZWRDaHVua3MiLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJyZXF1ZXN0Iiwid2VicGFja0pzb25wQ2FsbGJhY2siLCJwYXJlbnRDaHVua0xvYWRpbmdGdW5jdGlvbiIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJydW50aW1lIiwic29tZSIsImNodW5rTG9hZGluZ0dsb2JhbCIsIlBhcGVyIiwiX3Byb3BzJHNxdWFyZSIsInNxdWFyZSIsIl9wcm9wcyRlbGV2YXRpb24iLCJlbGV2YXRpb24iLCJvdXRsaW5lZCIsInJvdW5kZWQiLCJlbGV2YXRpb25zIiwic2hhZG93IiwiYm94U2hhZG93IiwiYmFja2dyb3VuZENvbG9yIiwiQXBwQmFyIiwiX3Byb3BzJHBvc2l0aW9uIiwiYmFja2dyb3VuZENvbG9yRGVmYXVsdCIsImZsZXhEaXJlY3Rpb24iLCJib3hTaXppbmciLCJwb3NpdGlvbkZpeGVkIiwicG9zaXRpb25BYnNvbHV0ZSIsInBvc2l0aW9uU3RpY2t5IiwicG9zaXRpb25TdGF0aWMiLCJwb3NpdGlvblJlbGF0aXZlIiwiY29sb3JEZWZhdWx0IiwiY29sb3JUcmFuc3BhcmVudCIsIlRvb2xiYXIiLCJfcHJvcHMkZGlzYWJsZUd1dHRlcnMiLCJkaXNhYmxlR3V0dGVycyIsImFsaWduSXRlbXMiLCJyZWd1bGFyIiwiZGVuc2UiLCJnZXRDaGlsZE1hcHBpbmciLCJtYXBGbiIsIm1hcHBlciIsImdldFByb3AiLCJnZXROZXh0Q2hpbGRNYXBwaW5nIiwicHJldkNoaWxkTWFwcGluZyIsIm9uRXhpdGVkIiwibmV4dENoaWxkTWFwcGluZyIsImdldFZhbHVlRm9yS2V5IiwibmV4dEtleXNQZW5kaW5nIiwicGVuZGluZ0tleXMiLCJwcmV2S2V5IiwiY2hpbGRNYXBwaW5nIiwibmV4dEtleSIsInBlbmRpbmdOZXh0S2V5IiwibWVyZ2VDaGlsZE1hcHBpbmdzIiwiaGFzUHJldiIsImhhc05leHQiLCJwcmV2Q2hpbGQiLCJpc0xlYXZpbmciLCJpbiIsImV4aXQiLCJlbnRlciIsIlRyYW5zaXRpb25Hcm91cCIsImhhbmRsZUV4aXRlZCIsImNvbnRleHRWYWx1ZSIsImlzTW91bnRpbmciLCJmaXJzdFJlbmRlciIsIm1vdW50ZWQiLCJhcHBlYXIiLCJjdXJyZW50Q2hpbGRNYXBwaW5nIiwiY2hpbGRGYWN0b3J5IiwiVHJhbnNpdGlvbkdyb3VwQ29udGV4dCIsIl9wcm9wcyRwdWxzYXRlIiwicHVsc2F0ZSIsInJpcHBsZVgiLCJyaXBwbGVZIiwicmlwcGxlU2l6ZSIsImluUHJvcCIsIl9wcm9wcyRvbkV4aXRlZCIsImxlYXZpbmciLCJzZXRMZWF2aW5nIiwicmlwcGxlQ2xhc3NOYW1lIiwicmlwcGxlIiwicmlwcGxlVmlzaWJsZSIsInJpcHBsZVB1bHNhdGUiLCJyaXBwbGVTdHlsZXMiLCJjaGlsZENsYXNzTmFtZSIsImNoaWxkTGVhdmluZyIsImNoaWxkUHVsc2F0ZSIsInRpbWVvdXRJZCIsIlRvdWNoUmlwcGxlIiwiX3Byb3BzJGNlbnRlciIsImNlbnRlciIsImNlbnRlclByb3AiLCJyaXBwbGVzIiwic2V0UmlwcGxlcyIsInJpcHBsZUNhbGxiYWNrIiwiaWdub3JpbmdNb3VzZURvd24iLCJzdGFydFRpbWVyIiwic3RhcnRUaW1lckNvbW1pdCIsInN0YXJ0Q29tbWl0Iiwib2xkUmlwcGxlcyIsIl9vcHRpb25zJHB1bHNhdGUiLCJfb3B0aW9ucyRjZW50ZXIiLCJfb3B0aW9ucyRmYWtlRWxlbWVudCIsImZha2VFbGVtZW50IiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInNxcnQiLCJzaXplWCIsImNsaWVudFdpZHRoIiwic2l6ZVkiLCJjbGllbnRIZWlnaHQiLCJzdG9wIiwicG9pbnRlckV2ZW50cyIsImFuaW1hdGlvbkR1cmF0aW9uIiwiQnV0dG9uQmFzZSIsImJ1dHRvblJlZlByb3AiLCJidXR0b25SZWYiLCJfcHJvcHMkY2VudGVyUmlwcGxlIiwiY2VudGVyUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVkIiwiX3Byb3BzJGRpc2FibGVSaXBwbGUiLCJkaXNhYmxlUmlwcGxlIiwiX3Byb3BzJGRpc2FibGVUb3VjaFJpIiwiZGlzYWJsZVRvdWNoUmlwcGxlIiwiX3Byb3BzJGZvY3VzUmlwcGxlIiwiZm9jdXNSaXBwbGUiLCJmb2N1c1Zpc2libGVDbGFzc05hbWUiLCJvbkJsdXIiLCJvbkZvY3VzIiwib25Gb2N1c1Zpc2libGUiLCJvbktleURvd24iLCJvbktleVVwIiwib25Nb3VzZURvd24iLCJvbk1vdXNlTGVhdmUiLCJvbk1vdXNlVXAiLCJvblRvdWNoRW5kIiwib25Ub3VjaE1vdmUiLCJvblRvdWNoU3RhcnQiLCJvbkRyYWdMZWF2ZSIsIl9wcm9wcyR0YWJJbmRleCIsInRhYkluZGV4IiwiVG91Y2hSaXBwbGVQcm9wcyIsIl9wcm9wcyR0eXBlIiwicmlwcGxlUmVmIiwiZm9jdXNWaXNpYmxlIiwic2V0Rm9jdXNWaXNpYmxlIiwiX3VzZUlzRm9jdXNWaXNpYmxlIiwiZm9jdXNWaXNpYmxlUmVmIiwidXNlUmlwcGxlSGFuZGxlciIsInJpcHBsZUFjdGlvbiIsImV2ZW50Q2FsbGJhY2siLCJza2lwUmlwcGxlQWN0aW9uIiwiaGFuZGxlTW91c2VEb3duIiwiaGFuZGxlRHJhZ0xlYXZlIiwiaGFuZGxlTW91c2VVcCIsImhhbmRsZU1vdXNlTGVhdmUiLCJoYW5kbGVUb3VjaFN0YXJ0IiwiaGFuZGxlVG91Y2hFbmQiLCJoYW5kbGVUb3VjaE1vdmUiLCJoYW5kbGVCbHVyIiwiaGFuZGxlRm9jdXMiLCJpc05vbk5hdGl2ZUJ1dHRvbiIsImtleWRvd25SZWYiLCJoYW5kbGVLZXlVcCIsIkNvbXBvbmVudFByb3AiLCJidXR0b25Qcm9wcyIsImhhbmRsZVVzZXJSZWYiLCJoYW5kbGVPd25SZWYiLCJoYW5kbGVSZWYiLCJfUmVhY3QkdXNlU3RhdGUyIiwibW91bnRlZFN0YXRlIiwic2V0TW91bnRlZFN0YXRlIiwiZW5hYmxlVG91Y2hSaXBwbGUiLCJqdXN0aWZ5Q29udGVudCIsIldlYmtpdFRhcEhpZ2hsaWdodENvbG9yIiwiY3Vyc29yIiwidmVydGljYWxBbGlnbiIsInRleHREZWNvcmF0aW9uIiwiYm9yZGVyU3R5bGUiLCJJY29uQnV0dG9uIiwiX3Byb3BzJGVkZ2UiLCJlZGdlIiwiX3Byb3BzJGRpc2FibGVGb2N1c1JpIiwiZGlzYWJsZUZvY3VzUmlwcGxlIiwiX3Byb3BzJHNpemUiLCJlZGdlU3RhcnQiLCJlZGdlRW5kIiwibGFiZWwiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJzaXplU21hbGwiLCJCYWRnZSIsIl9wcm9wcyRhbmNob3JPcmlnaW4iLCJhbmNob3JPcmlnaW4iLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJiYWRnZUNvbnRlbnQiLCJpbnZpc2libGVQcm9wIiwiaW52aXNpYmxlIiwiX3Byb3BzJG1heCIsIl9wcm9wcyRvdmVybGFwIiwib3ZlcmxhcCIsIl9wcm9wcyRzaG93WmVybyIsInNob3daZXJvIiwiZGlzcGxheVZhbHVlIiwiYmFkZ2UiLCJkb3QiLCJmbGV4V3JhcCIsImFsaWduQ29udGVudCIsIm1pbldpZHRoIiwiUkFESVVTX1NUQU5EQVJEIiwiUkFESVVTX0RPVCIsImFuY2hvck9yaWdpblRvcFJpZ2h0UmVjdGFuZ2xlIiwidHJhbnNmb3JtT3JpZ2luIiwiYW5jaG9yT3JpZ2luVG9wUmlnaHRSZWN0YW5ndWxhciIsImFuY2hvck9yaWdpbkJvdHRvbVJpZ2h0UmVjdGFuZ2xlIiwiYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRSZWN0YW5ndWxhciIsImFuY2hvck9yaWdpblRvcExlZnRSZWN0YW5nbGUiLCJhbmNob3JPcmlnaW5Ub3BMZWZ0UmVjdGFuZ3VsYXIiLCJhbmNob3JPcmlnaW5Cb3R0b21MZWZ0UmVjdGFuZ2xlIiwiYW5jaG9yT3JpZ2luQm90dG9tTGVmdFJlY3Rhbmd1bGFyIiwiYW5jaG9yT3JpZ2luVG9wUmlnaHRDaXJjbGUiLCJhbmNob3JPcmlnaW5Ub3BSaWdodENpcmN1bGFyIiwiYW5jaG9yT3JpZ2luQm90dG9tUmlnaHRDaXJjbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21SaWdodENpcmN1bGFyIiwiYW5jaG9yT3JpZ2luVG9wTGVmdENpcmNsZSIsImFuY2hvck9yaWdpblRvcExlZnRDaXJjdWxhciIsImFuY2hvck9yaWdpbkJvdHRvbUxlZnRDaXJjbGUiLCJhbmNob3JPcmlnaW5Cb3R0b21MZWZ0Q2lyY3VsYXIiLCJfcHJvcHMkZGlzYWJsZVBvcnRhbCIsImRpc2FibGVQb3J0YWwiLCJvblJlbmRlcmVkIiwibW91bnROb2RlIiwic2V0TW91bnROb2RlIiwiZ2V0Q29udGFpbmVyIiwiYXJpYUhpZGRlbiIsInNob3ciLCJnZXRQYWRkaW5nUmlnaHQiLCJhcmlhSGlkZGVuU2libGluZ3MiLCJjdXJyZW50Tm9kZSIsIm5vZGVzVG9FeGNsdWRlIiwiYmxhY2tsaXN0VGFnTmFtZXMiLCJmaW5kSW5kZXhPZiIsImlkeCIsImhhbmRsZUNvbnRhaW5lciIsImZpeGVkTm9kZXMiLCJyZXN0b3JlU3R5bGUiLCJyZXN0b3JlUGFkZGluZ3MiLCJkaXNhYmxlU2Nyb2xsTG9jayIsImlubmVyV2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJpc092ZXJmbG93aW5nIiwic2Nyb2xsYmFyU2l6ZSIsInNjcm9sbERpdiIsIm9mZnNldFdpZHRoIiwiZ2V0U2Nyb2xsYmFyU2l6ZSIsInBhcmVudEVsZW1lbnQiLCJzY3JvbGxDb250YWluZXIiLCJNb2RhbE1hbmFnZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJtb2RhbHMiLCJjb250YWluZXJzIiwibW9kYWxJbmRleCIsIm1vZGFsUmVmIiwiaGlkZGVuU2libGluZ05vZGVzIiwiaGlkZGVuU2libGluZ3MiLCJnZXRIaWRkZW5TaWJsaW5ncyIsImNvbnRhaW5lckluZGV4IiwicmVzdG9yZSIsIm5leHRUb3AiLCJfcHJvcHMkZGlzYWJsZUF1dG9Gb2MiLCJkaXNhYmxlQXV0b0ZvY3VzIiwiX3Byb3BzJGRpc2FibGVFbmZvcmNlIiwiZGlzYWJsZUVuZm9yY2VGb2N1cyIsIl9wcm9wcyRkaXNhYmxlUmVzdG9yZSIsImRpc2FibGVSZXN0b3JlRm9jdXMiLCJnZXREb2MiLCJpc0VuYWJsZWQiLCJvcGVuIiwiaWdub3JlTmV4dEVuZm9yY2VGb2N1cyIsInNlbnRpbmVsU3RhcnQiLCJzZW50aW5lbEVuZCIsIm5vZGVUb1Jlc3RvcmUiLCJyb290UmVmIiwicHJldk9wZW5SZWYiLCJjb250YWluIiwiaGFzRm9jdXMiLCJsb29wRm9jdXMiLCJpbnRlcnZhbCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIl9wcm9wcyRpbnZpc2libGUiLCJkZWZhdWx0TWFuYWdlciIsImluUHJvcHMiLCJfcHJvcHMkQmFja2Ryb3BDb21wb24iLCJCYWNrZHJvcENvbXBvbmVudCIsIkJhY2tkcm9wUHJvcHMiLCJfcHJvcHMkY2xvc2VBZnRlclRyYW4iLCJjbG9zZUFmdGVyVHJhbnNpdGlvbiIsIl9wcm9wcyRkaXNhYmxlQmFja2RybyIsImRpc2FibGVCYWNrZHJvcENsaWNrIiwiX3Byb3BzJGRpc2FibGVFc2NhcGVLIiwiZGlzYWJsZUVzY2FwZUtleURvd24iLCJfcHJvcHMkZGlzYWJsZVNjcm9sbEwiLCJfcHJvcHMkaGlkZUJhY2tkcm9wIiwiaGlkZUJhY2tkcm9wIiwiX3Byb3BzJGtlZXBNb3VudGVkIiwia2VlcE1vdW50ZWQiLCJfcHJvcHMkbWFuYWdlciIsIm1hbmFnZXIiLCJvbkJhY2tkcm9wQ2xpY2siLCJvbkNsb3NlIiwib25Fc2NhcGVLZXlEb3duIiwiZXhpdGVkIiwic2V0RXhpdGVkIiwibW91bnROb2RlUmVmIiwiaGFzVHJhbnNpdGlvbiIsImdldEhhc1RyYW5zaXRpb24iLCJnZXRNb2RhbCIsImhhbmRsZU1vdW50ZWQiLCJtb3VudCIsImhhbmRsZU9wZW4iLCJyZXNvbHZlZENvbnRhaW5lciIsImlzVG9wTW9kYWwiLCJoYW5kbGVQb3J0YWxSZWYiLCJoYW5kbGVDbG9zZSIsImlubGluZVN0eWxlIiwiaGlkZGVuIiwidmlzaWJpbGl0eSIsImNoaWxkUHJvcHMiLCJvbkVudGVyIiwiVU5NT1VOVEVEIiwiRVhJVEVEIiwiRU5URVJJTkciLCJFTlRFUkVEIiwiRVhJVElORyIsIlRyYW5zaXRpb24iLCJpbml0aWFsU3RhdHVzIiwiYXBwZWFyU3RhdHVzIiwidW5tb3VudE9uRXhpdCIsIm1vdW50T25FbnRlciIsInN0YXR1cyIsIm5leHRDYWxsYmFjayIsInByZXZTdGF0ZSIsInVwZGF0ZVN0YXR1cyIsInByZXZQcm9wcyIsIm5leHRTdGF0dXMiLCJjYW5jZWxOZXh0Q2FsbGJhY2siLCJnZXRUaW1lb3V0cyIsIm1vdW50aW5nIiwicGVyZm9ybUVudGVyIiwicGVyZm9ybUV4aXQiLCJhcHBlYXJpbmciLCJub2RlUmVmIiwibWF5YmVOb2RlIiwibWF5YmVBcHBlYXJpbmciLCJ0aW1lb3V0cyIsImVudGVyVGltZW91dCIsImNvbmZpZyIsInNhZmVTZXRTdGF0ZSIsIm9uRW50ZXJlZCIsIm9uRW50ZXJpbmciLCJvblRyYW5zaXRpb25FbmQiLCJfdGhpczMiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJjYW5jZWwiLCJzZXROZXh0Q2FsbGJhY2siLCJfdGhpczQiLCJkb2VzTm90SGF2ZVRpbWVvdXRPckxpc3RlbmVyIiwiYWRkRW5kTGlzdGVuZXIiLCJtYXliZU5leHRDYWxsYmFjayIsInJlZmxvdyIsImdldFRyYW5zaXRpb25Qcm9wcyIsIl9wcm9wcyRzdHlsZSIsInRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EZWxheSIsImVudGVyaW5nIiwiZW50ZXJlZCIsImRlZmF1bHRUaW1lb3V0IiwiX3Byb3BzJGRpc2FibGVTdHJpY3RNIiwiZGlzYWJsZVN0cmljdE1vZGVDb21wYXQiLCJfcHJvcHMkVHJhbnNpdGlvbkNvbXAiLCJUcmFuc2l0aW9uQ29tcG9uZW50IiwiX3Byb3BzJHRpbWVvdXQiLCJlbmFibGVTdHJpY3RNb2RlQ29tcGF0IiwidW5zdGFibGVfc3RyaWN0TW9kZSIsImZvcmVpZ25SZWYiLCJub3JtYWxpemVkVHJhbnNpdGlvbkNhbGxiYWNrIiwibm9kZU9yQXBwZWFyaW5nIiwiaXNBcHBlYXJpbmciLCJoYW5kbGVFbnRlcmluZyIsImhhbmRsZUVudGVyIiwidHJhbnNpdGlvblByb3BzIiwid2Via2l0VHJhbnNpdGlvbiIsImhhbmRsZUVudGVyZWQiLCJoYW5kbGVFeGl0aW5nIiwiaGFuZGxlRXhpdCIsIkJhY2tkcm9wIiwic2V0VHJhbnNsYXRlVmFsdWUiLCJmYWtlVHJhbnNmb3JtIiwiY29tcHV0ZWRTdHlsZSIsIm9mZnNldFgiLCJvZmZzZXRZIiwidHJhbnNmb3JtVmFsdWVzIiwiaW5uZXJIZWlnaHQiLCJnZXRUcmFuc2xhdGVWYWx1ZSIsIndlYmtpdFRyYW5zZm9ybSIsIl9wcm9wcyRkaXJlY3Rpb24iLCJjaGlsZHJlblJlZiIsImhhbmRsZVJlZkludGVybWVkaWFyeSIsInVwZGF0ZVBvc2l0aW9uIiwiaGFuZGxlUmVzaXplIiwib3Bwb3NpdGVEaXJlY3Rpb24iLCJkZWZhdWx0VHJhbnNpdGlvbkR1cmF0aW9uIiwiRHJhd2VyIiwiX3Byb3BzJGFuY2hvciIsImFuY2hvciIsImFuY2hvclByb3AiLCJfcHJvcHMkTW9kYWxQcm9wcyIsIk1vZGFsUHJvcHMiLCJCYWNrZHJvcFByb3BzUHJvcCIsIl9wcm9wcyRvcGVuIiwiX3Byb3BzJFBhcGVyUHJvcHMiLCJQYXBlclByb3BzIiwiU2xpZGVQcm9wcyIsIl9wcm9wcyR0cmFuc2l0aW9uRHVyYSIsImlzSG9yaXpvbnRhbCIsImdldEFuY2hvciIsImRvY2tlZCIsInNsaWRpbmdEcmF3ZXIiLCJvdmVyZmxvd1kiLCJXZWJraXRPdmVyZmxvd1Njcm9sbGluZyIsInBhcGVyQW5jaG9yTGVmdCIsInBhcGVyQW5jaG9yUmlnaHQiLCJwYXBlckFuY2hvclRvcCIsIm1heEhlaWdodCIsInBhcGVyQW5jaG9yQm90dG9tIiwicGFwZXJBbmNob3JEb2NrZWRMZWZ0IiwiYm9yZGVyUmlnaHQiLCJwYXBlckFuY2hvckRvY2tlZFRvcCIsImJvcmRlckJvdHRvbSIsInBhcGVyQW5jaG9yRG9ja2VkUmlnaHQiLCJib3JkZXJMZWZ0IiwicGFwZXJBbmNob3JEb2NrZWRCb3R0b20iLCJib3JkZXJUb3AiLCJCcm93c2VyUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJub3JtYWxpemVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiZm9yd2FyZGVkUmVmIiwibmF2aWdhdGUiLCJfb25DbGljayIsInJlc3QiLCJleCIsImlzTW9kaWZpZWRFdmVudCIsIkxpbmsiLCJfcmVmMiRjb21wb25lbnQiLCJmb3J3YXJkUmVmU2hpbSQxIiwiZm9yd2FyZFJlZiQxIiwiX3JlZiRhcmlhQ3VycmVudCIsImFyaWFDdXJyZW50IiwiX3JlZiRhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsInRpdGxlIiwibm90aUljb24iLCJzaWRlTWVudSIsIm1lbnVCdXR0b24iLCJtZW51Qm90dG9tSXRlbSIsIlJlYWN0IiwidG9nZ2xlRHJhd2VyIiwiTm90aWZpY2F0aW9ucyIsIm1heFdpZHRoIiwibG9nbyIsImFsdCIsIlVzZXJQYWdlIiwiUHJvUHJvZmlsZVBhZ2UiLCJsb2NhbFRoZW1lIiwib3V0ZXJUaGVtZSIsIm1lcmdlT3V0ZXJMb2NhbFRoZW1lIiwiVGhlbWVDb250ZXh0IiwiUmVhY3RET00iLCJnZXRFbGVtZW50QnlJZCJdLCJzb3VyY2VSb290IjoiIn0=